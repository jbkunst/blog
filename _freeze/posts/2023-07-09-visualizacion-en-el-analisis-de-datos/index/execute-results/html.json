{
  "hash": "100562f2375fb42703b34a4e8f0920ac",
  "result": {
    "markdown": "---\ntitle: \"Visualización en el Análisis de Datos\"\neditor_options: \n  chunk_output_type: console\nlang: es\ndate: 2023-07-09\ncategories: [ggplot2, data-visualization, spanish]\nimage: images/preview.png\n---\n\n\n\n\n## Introducción\n\nDe vez en cuando tengo que hacer clases de visualización o análisis de datos,\nenseñar `ggplot2` o `dplyr`, y en dichas ocaciones especiales siempre retomo un\n*ya muy viejo* ejemplo con datos del metro de Santiago de Chile en el cual\nintento motivar el hecho de que a través de distintas visualización uno va \naprediendo de los datos.\n\nLa idea es ejemplificar el ejercicio de visualización tanto para consumir o generar \nconocimiento además de presentar la información. Todo esto bajo un contexto\nde análsis de datos generando/derivando nuevas variables como se verá más adelante.\n\n## Setup: paquetes y otras cosas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(corrr)\nlibrary(patchwork)\nlibrary(widyr)\nlibrary(igraph)\nlibrary(ggnetwork)\nlibrary(ggforce)\nlibrary(chilemapas)\n\ntheme_set(\n  theme_get() +\n    theme(legend.position = \"bottom\")\n)\n\n# sobresicribir los parámetros por default\n# lo hago pues no me gusta el color tan claro \n# _amarillo chillón_ en la escala viridis.\nscale_fill_viridis_d  <- partial(\n  ggplot2::scale_fill_viridis_d , \n  begin = 0.05, end = 0.9\n  )\nscale_color_viridis_d <- partial(\n  ggplot2::scale_color_viridis_d, \n  begin = 0.05, end = 0.9\n  )\n```\n:::\n\n\n## Datos\n\nLos datos a trabajar corresponden a ingresos de usuarios a estaciones de metros cada media hora.\nNo recuerdo muy bien de donde los obtuve, pero existen y los llevo a cada repo en\ndonde necesito mostrar este ejemplo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nruta_datos <- here::here(\"posts/2023-07-09-visualizacion-en-el-analisis-de-datos/data\")\n\ndata <- data.table::fread(fs::path(ruta_datos, \"2015.04_Subidas_paradero_mediahora_web.csv.gz\"))\ndata <- as_tibble(data)\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 358,543 × 3\n   paraderosubida mediahora subidas_laboral_promedio\n   <chr>          <chr>                        <dbl>\n 1 ALCANTARA      05:30:00                       2.6\n 2 ALCANTARA      06:00:00                      13.2\n 3 ALCANTARA      06:30:00                      53.4\n 4 ALCANTARA      07:00:00                     185. \n 5 ALCANTARA      07:30:00                     364  \n 6 ALCANTARA      08:00:00                     546. \n 7 ALCANTARA      08:30:00                     479. \n 8 ALCANTARA      09:00:00                     359  \n 9 ALCANTARA      09:30:00                     275. \n10 ALCANTARA      10:00:00                     230. \n# ℹ 358,533 more rows\n```\n:::\n:::\n\n\nEn el ejemplo estudiamos solamente las estaciones de metro, por lo que eliminamos todo\nlo que _parezca_ código.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  filter(!str_detect(paraderosubida, \"[0-9]+-[0-9]\")) |>\n  filter(paraderosubida != \"-\")\n```\n:::\n\n\nAhora _parseamos_ `mediahora` para transformarla en el tipo de dato adecuado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data |>\n  mutate(mediahora = readr::parse_guess(mediahora)) |> \n  filter(hour(mediahora) > 0) \n```\n:::\n\n\nY por último nos aseguramos de que cada estación posea todas las `mediahora`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- complete(\n  data,\n  paraderosubida,\n  mediahora, \n  fill = list(subidas_laboral_promedio = 0)\n  )\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,922 × 3\n   paraderosubida mediahora subidas_laboral_promedio\n   <chr>          <time>                       <dbl>\n 1 ALCANTARA      05:30                          2.6\n 2 ALCANTARA      06:00                         13.2\n 3 ALCANTARA      06:30                         53.4\n 4 ALCANTARA      07:00                        185. \n 5 ALCANTARA      07:30                        364  \n 6 ALCANTARA      08:00                        546. \n 7 ALCANTARA      08:30                        479. \n 8 ALCANTARA      09:00                        359  \n 9 ALCANTARA      09:30                        275. \n10 ALCANTARA      10:00                        230. \n# ℹ 3,912 more rows\n```\n:::\n:::\n\n\n## Lo simple, de menos a más\n\nVisualicemos los datos de una estación:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplazamaipu <- data |>\n  filter(paraderosubida == \"PLAZA MAIPU\")\n\np0 <- ggplot(dplazamaipu) +\n  geom_point(aes(subidas_laboral_promedio, mediahora, color = paraderosubida), size = 1.5) +\n  scale_x_continuous(labels = comma) +\n  scale_color_viridis_d(guide = \"none\")\n\np0\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\nEs bueno equivocarse! Vamos por otro intento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dplazamaipu) +\n  geom_path(aes(subidas_laboral_promedio, mediahora, color = paraderosubida), size = 1.5) +\n  scale_x_continuous(labels = comma) +\n  scale_color_viridis_d(guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\nEs importante seguir convenciones. En un gráfico done una de las variables\nes temporal usualmente se _mapea_ al eje X.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dplazamaipu) +\n  geom_path(aes(mediahora, subidas_laboral_promedio, color = paraderosubida), size = 1.5) +\n  scale_y_continuous(labels = comma) +\n  scale_color_viridis_d(name = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\n## Buscando patrones\n\nImportante observar patrones o relaciones en los datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 <- data |> \n  filter(paraderosubida %in% c(\"PLAZA MAIPU\", \"LAGUNA SUR\"))\n\nc <- d1 |> \n  pivot_wider(\n    names_from = paraderosubida, \n    values_from = subidas_laboral_promedio\n    ) |>\n  corrr::correlate(quiet = TRUE) |> \n  select(2) |>\n  pull() |> \n  na.omit() |> \n  as.numeric()\n\np1 <- ggplot(d1) +\n  geom_line(\n    aes(mediahora, subidas_laboral_promedio, \n        color = paraderosubida, \n        group = paraderosubida),\n    size = 1.2\n    ) +\n  scale_y_continuous(label = scales::comma) +\n  scale_color_viridis_d()\n  \np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\n### Correlación\n\n_Métrica_ de asociación lineal. Nos ayuda a _cuantificar_ la asociación **lineal**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nn <- 100\nx <- rnorm(n)\ne <- rnorm(n)\n\npc <- tibble(\n  beta  = c(0,  1, 1, -1, -1, 0),\n  beta2 = c(0,  0, 0,  1,  0, 1),\n  sd    = c(1,  1, 0,  0,  1, 1),\n) |> \n  pmap_df(function(beta = 1, beta2 = 1, sd = 1){\n    tibble(\n      x = x,\n      y = beta * x + beta2 * x^2 + sqrt(sd) * e,\n      cor = cor(x, y)\n    )\n  }) |> \n  mutate(\n    cor = round(cor, 3),\n    cor = str_glue(\"{cor} ({ percent(cor)})\"),\n    cor = fct_inorder(as.character(cor))\n    ) |> \n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.25) +\n  geom_smooth(method = \"lm\", color = \"darkred\", size = 1.2, \n              formula = y ~  x, se = FALSE) +\n  facet_wrap(vars(cor), scales = \"free\") +\n  theme(\n    axis.text.x = element_text(size = 6),\n    axis.text.y = element_text(size = 6),\n    )\n\npc\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n:::\n\n\nDe esta forma, con los datos los podemos visualizar de otra forma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlab_dates <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio)  |> \n  pull(mediahora) |> \n  as_datetime() |> \n  pretty(6)\n\nlab_dates_lbls <- str_extract(lab_dates, \"[0-9]{2}:[0-9]{2}\")\n\np2 <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio) |>  \n  mutate(mediahora = as_datetime(mediahora)) |> \n  ggplot(aes(`LAGUNA SUR`, `PLAZA MAIPU`)) +\n  geom_point(aes(color = as.numeric(mediahora)), size = 3) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  scale_color_viridis_c(name = NULL, breaks = as.numeric(lab_dates), labels = lab_dates_lbls) +\n  labs(subtitle = str_glue(\"Correlación { percent(c, , accuracy = 0.01) }\"))\n\n\np1 | p2 \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\n### Otro par de estaciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 <- data |> \n  filter(paraderosubida %in% c(\"UNIVERSIDAD DE CHILE\", \"PLAZA DE PUENTE ALTO\")) \n\nc <- d1 |> \n  pivot_wider(\n    names_from = paraderosubida, \n    values_from = subidas_laboral_promedio\n    ) |>\n  corrr::correlate(quiet = TRUE) |> \n  select(2) |>\n  pull() |> \n  na.omit() |> \n  as.numeric()\n\np1 <- ggplot(d1) +\n  geom_line(\n    aes(mediahora, subidas_laboral_promedio, color = paraderosubida, group = paraderosubida),\n    size = 1.2\n    ) +\n  scale_y_continuous(label = scales::comma) +\n  scale_color_viridis_d(name = NULL)\n\np2 <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio) |>  \n  mutate(mediahora = as_datetime(mediahora)) |> \n  ggplot(aes(`PLAZA DE PUENTE ALTO`, `UNIVERSIDAD DE CHILE`)) +\n  geom_point(aes(color = as.numeric(mediahora)), size = 3) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  scale_color_viridis_c(name = NULL, breaks = as.numeric(lab_dates), labels = lab_dates_lbls) +\n  labs(subtitle = str_glue(\"Correlación { percent(c, , accuracy = 0.01) }\"))\n\np1 | p2 \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n\n### Todas las correlaciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcor <- data |>\n  widyr::pairwise_cor(\n    paraderosubida,\n    mediahora,\n    subidas_laboral_promedio\n    )\n\nncors <- dcor |> \n  nrow() |> \n  comma()\n\nnest <- dcor |> \n  count(item1) |> \n  nrow() |> \n  comma()\n```\n:::\n\n\nCalculamos con 106 estaciones 11,130 correlaciones. Visualización vía __heatmap__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n\n\nEl orden, en este caso, importa.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM <- data |> \n  spread(paraderosubida, subidas_laboral_promedio) |> \n  select(-1) |> \n  mutate_all(replace_na, 0) |> \n  cor()\n\norder <- corrplot::corrMatOrder(M, order = \"hclust\")\n\nM <- M[order, order]\n\nlvls <- colnames(M)\n\ndcor <- dcor |> \n  mutate(across(where(is.character), ~ factor(.x,  levels = lvls)))\n\npcors <- ggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL) +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\npcors\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.svg)\n:::\n:::\n\n\n## Redes y comunidades\n\nSelecciones las correlaciones más altas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncors <- 250\n\ndcorf <- dcor |>\n  filter(as.character(item1) < as.character(item2)) |> \n  arrange(desc(correlation)) |> \n  mutate(w = correlation*correlation) |> \n  head(ncors)\n```\n:::\n\n\nConsiderando las 250 correlaciones más altas realizamos una red donde el peso\ndel vértice es la correlación y el tamaño es la cantidad de subidas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph_from_data_frame(dcorf, directed = FALSE)\n\nE(g)$weight <- dcorf$w\n\nwc <- cluster_fast_greedy(g)\nnc <- length(unique(membership(wc)))\n\ndvert <- tibble(paraderosubida = V(g)$name) |> \n  mutate(comm = as.numeric(membership(wc))) |> \n  left_join(\n    data |>\n      group_by(paraderosubida) |>\n      summarise(n = sum(subidas_laboral_promedio)),\n    by = \"paraderosubida\"\n    ) |> \n  left_join(\n    data |>\n      group_by(paraderosubida) |> \n      summarise(tend = cor(seq(1, n()), subidas_laboral_promedio)),\n    by = \"paraderosubida\"\n    ) |> \n  ungroup()\n\n# dvert\nV(g)$label <- dvert$paraderosubida\nV(g)$size <- dvert$n\nV(g)$subidas_totales_miles <- round(dvert$n/1000, 2)\nV(g)$comm <- as.numeric(membership(wc))\nV(g)$tendencia <- round(dvert$tend, 2)\nV(g)$color <- dvert$comm\n\nset.seed(123)\n\ndfnet <- ggnetwork(g)\n\ndfnet2 <- dfnet |>\n  as.matrix() |>\n  as.data.frame() |>\n  as_tibble() |>\n  select(x, y, name, weight, size, color) |>\n  mutate_all(as.character) |>\n  mutate_at(vars(x, y, weight, size), as.numeric) |>\n  filter(is.na(weight))\n\npnet <- ggplot(dfnet) + \n  geom_edges(\n    aes(-x, -y, size = width, color = factor(comm), xend = -xend, yend = -yend), \n    color = \"gray50\", size = 1, alpha = 0.25\n    ) +\n  geom_point(\n    aes(-x, -y, size = size, color = factor(comm), fill = factor(comm)), shape = 21\n    ) +\n  ggrepel::geom_text_repel(\n    aes(-x, -y, label = name), size = 2,\n    data = dfnet2, color = \"#666666\",\n    force = 10,\n    family = \"main_font\"\n    ) +\n  scale_fill_viridis_d(name = \"Comunidad\") + \n  # scale_color_viridis_d() + \n  scale_size(guide = \"none\") +\n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n  ) +\n  \n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n    ) +\n  \n  labs(\n    x = NULL,\n    y = NULL,\n    size = \"Subidas\",\n    color = \"Comunidad\"\n    ) + \n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\npnet\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.svg)\n:::\n:::\n\n\n## Reducción de Dimensionalidad\n\nHasta ahora hemos usado solamente *correlaciones* que miden asociacion lineal \ny no es un indicador necesariamente robusto para usarlo como métrica de distancia.\n\nUsaremos todos los datos por estacion y usaremos __UMAP__, un algoritmo \npara _resumir_ toda la información en *2* columnas/variables. Lleva de una tabla\ncon muchas columnas por observación a 2 columnas:\n\nDe esto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhead <- 8\n\ndatas <- data |> \n  mutate(mediahora = format(mediahora, \"%R\")) |> \n  spread(mediahora, subidas_laboral_promedio)\n\ndatas <- datas |> \n  mutate_if(is.numeric, replace_na, 0)\n\ndatas |> \n  select(1:8) |> \n  head(nhead)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 8\n  paraderosubida          `05:30:00` `06:00:00` `06:30:00` `07:00:00` `07:30:00`\n  <chr>                        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 ALCANTARA                      2.6       13.2       53.4      185.        364 \n2 BAQUEDANO L1                  86.6      125.       208.       398.        522.\n3 BAQUEDANO L5                   1.4        7.2       26.2       95.6       200.\n4 BARRANCAS                     37        195.       406.       737.        800.\n5 BELLAS ARTES                   6.6       37         92.2      178.        282.\n6 BELLAVISTA DE LA FLORI…      158.       298.       566.      1114.       1163.\n7 BLANQUEADO                    35.8      200.       411.       646.        737.\n8 CAL Y CANTO                  103        575.      1281       2309        2640.\n# ℹ 2 more variables: `08:00:00` <dbl>, `08:30:00` <dbl>\n```\n:::\n:::\n\n\nA esto:\n\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_6737e3d8f663f9393dd63cddc36aeb0d'}\n\n```{.r .cell-code}\nlibrary(uwot)\n\nset.seed(123)\n\num <- umap(datas, verbose = TRUE, n_threads = 3, n_neighbors = 20)\n\ndumap <- as.data.frame(um) |> \n  as_tibble() |> \n  mutate(paraderosubida = pull(datas, paraderosubida)) |> \n  select(paraderosubida, everything())\n\ndumap\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 106 × 3\n   paraderosubida                V1      V2\n   <chr>                      <dbl>   <dbl>\n 1 ALCANTARA                -0.162   1.17  \n 2 BAQUEDANO L1             -2.07    1.44  \n 3 BAQUEDANO L5              0.284   1.14  \n 4 BARRANCAS                 2.23   -0.0915\n 5 BELLAS ARTES             -0.0693  1.08  \n 6 BELLAVISTA DE LA FLORIDA -0.473  -1.95  \n 7 BLANQUEADO                2.97    0.117 \n 8 CAL Y CANTO              -3.10    2.10  \n 9 CAMINO AGRICOLA          -0.327   0.523 \n10 CARLOS VALDOVINOS         1.32    0.887 \n# … with 96 more rows\n```\n:::\n:::\n\n\nDe esta forma:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\npumap <- ggplot(dumap) +\n  geom_point(aes(V1, V2), alpha = 0.3) +\n  ggrepel::geom_text_repel(\n    aes(V1, V2, label = paraderosubida),\n    data = dumap |> sample_n(30),\n    size = 3,\n    force = 10\n    ) \n\npumap\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.svg)\n:::\n:::\n\n\n## Clustering\n\n### K-means\n\nDe vez en cuando es relevante agrupar información/perfilar. __Diagramas de Voronoi__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwithins <- map_dbl(1:15, function(k = 4){\n  km <- kmeans(\n    dumap |> select(-paraderosubida), \n    centers = k,\n    nstart = 50,\n    iter.max = 150\n    )\n  km$tot.withinss\n}) \n\n# plot(withins)\nkm <- kmeans(\n  dumap |> select(-paraderosubida), \n  centers = 4,\n  nstart = 50,\n  iter.max = 150\n  )\n\ndumap <- dumap |> \n  mutate(cluster = as.character(km$cluster))\n\ndcenters <- km$centers |> \n  as.data.frame() |> \n  as_tibble() |> \n  mutate(cluster = as.character(row_number()))\n\n# xmin, xmax, ymin, ymax.\nbnd <- c(-4, 4, -4, 4)\n\nset.seed(1234)\n\npumapkm <- ggplot(dumap, aes(V1, V2, fill = cluster, group = -1)) +\n  geom_voronoi_tile(data = dcenters, alpha = 0.2, bound = bnd) +\n  geom_voronoi_segment(data = dcenters, color = \"gray70\", bound = bnd) +\n  geom_point(aes(V1, V2, fill = cluster), alpha = 0.3) +\n  ggrepel::geom_text_repel(\n    aes(V1, V2, label = paraderosubida),\n    data = dumap |> sample_n(30),\n    size = 3,\n    force = 10\n    ) +\n  scale_fill_viridis_d() +\n  xlim(c(-4, 4)) + ylim(c(-4, 4)) +\n  theme(legend.position = \"none\")\n\npumapkm\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.svg)\n:::\n:::\n\n\n\n¿Por qué 4 grupos? El algoritmo para encontrar grupos usado fue __K-means__. Uno usualmente\nda el número de grupos y determina que observación queda en que grupo. Una regla para decidir el número de cluster es realizando el proceso varias veces con distintas cantidad de centros.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndkm <- tibble(\n  tot.withinss = withins,\n  cluster      = seq(length(withins))\n) \n\npkm <- ggplot(dkm, aes(cluster, tot.withinss, fill = \"1\", color = \"1\")) +\n  \n  geom_line(size = 2) +\n  geom_point(size = 3, shape = 21, color = \"white\") +\n  scale_x_continuous(breaks = dkm$cluster) +\n  labs(\n    y = \"Suma de los cuadrados dentro de cada grupo\",\n    x = \"Grupos\"\n  ) +\n  scale_fill_viridis_d() +\n  scale_color_viridis_d() +\n  theme(legend.position = \"none\")\n\npkm\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.svg)\n:::\n:::\n\n\n### Clustering Jerárquico\n\n__Dendograma__ visualiza la forma de agrupación a medida que aumento distancia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdendro)\n\ndhclust <- dumap |> \n  column_to_rownames(\"paraderosubida\") |> \n  select(V1, V2)\n\nhc       <- hclust(dist(dhclust), \"ave\")           # heirarchal clustering\ndendr    <- dendro_data(hc, type=\"rectangle\")    # convert for ggplot\nclust    <- cutree(hc, k = 4)                    # find 4 clusters\nclust.df <- data.frame(label = names(clust), cluster = factor(clust))\ndendr[[\"labels\"]] <- merge(dendr[[\"labels\"]], clust.df, by = \"label\")\n\npdend <- ggplot() +\n  geom_segment(\n    data = segment(dendr),\n    aes(x = x, y = y, xend = xend, yend = yend)\n    ) +\n  geom_text(\n    data = label(dendr),\n    aes(x, y, label = label, hjust = 1, color = cluster),\n    size = 1.8\n    \n  ) +\n  coord_flip() +\n  scale_color_viridis_d() +\n  # scale_y_continuous(limits = c(-0.10, NA)) +\n  # scale_y_reverse(expand=c(0.2, 0)) +\n  theme(\n    axis.line.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"right\"\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 5))) \n\npdend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.svg)\n:::\n:::\n\n\n### Árbol filogenético\n\nOtra visualización con los mismos datos del dendograma. __Árbol filogenético__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ape)\n\nplot(\n  ape::as.phylo(hc), \n  type = \"unrooted\",\n  edge.width = 2, \n  edge.lty = 2,\n  # tip.color = colors[clust],\n  no.margin = TRUE,\n  label.offset = 0.5,\n  plot = FALSE\n  )\n```\n\n```{.r .cell-code}\nL <- get(\"last_plot.phylo\", envir = .PlotPhyloEnv)\n\ndedges <- tibble(x = L$xx, y = L$yy) |> \n  mutate(id = row_number())\n\ndedges2 <- as.data.frame(L$edge) |> \n  as_tibble() |> \n  left_join(dedges, by = c(\"V1\" = \"id\")) |> \n  left_join(dedges, by = c(\"V2\" = \"id\"),  suffix = c(\"\", \"_end\")) \n\ndnodes <- dedges |> \n  head(length(clust)) |> \n  mutate(\n    paraderosubida = names(clust),\n    cluster = as.character(clust)\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npphylo <- ggplot(dedges2) +\n  geom_segment(\n    aes(x = x, y = y, xend = x_end, yend = y_end, group = -1L), \n    color = \"gray70\", \n    size = .9\n    ) +\n   ggrepel::geom_text_repel(\n    aes(x, y, label = paraderosubida),\n    data = dnodes,\n    size = 1.5,\n    max.overlaps = 1000,\n    segment.colour = \"gray80\"\n    )  +\n  geom_point(\n    aes(x, y, fill = cluster), \n    data = dnodes, \n    shape = 21, color = \"white\", size = 4\n    ) +\n  scale_color_viridis_d()  + \n  scale_fill_viridis_d()  + \n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  scale_y_continuous(expand = expansion(mult = 0.25)) +\n  scale_x_continuous(expand = expansion(mult = 0.25)) \n \npphylo\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.svg)\n:::\n:::\n\n\n## ¿Significan algo los cluster generados?\n\nRevisamos _nuestro primer gráfico_ para cada estación y separados por grupo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataf <- data |> \n  left_join(dumap |> select(paraderosubida, cluster), by = \"paraderosubida\")\n\npclus <- ggplot(dataf, aes(mediahora, subidas_laboral_promedio)) +\n  geom_line(aes(group = paraderosubida), alpha = 0.8, size = 0.8, color = \"gray90\") +\n  geom_smooth(\n    aes(color = cluster),\n    se = FALSE, size = 2,\n    method = 'gam',\n    formula = y ~ s(x, bs = \"cs\")\n    ) + \n  scale_color_viridis_d() +\n  facet_wrap(vars(cluster)) +\n  scale_y_continuous(labels = comma)\n\npclus\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.svg)\n:::\n:::\n\n\nSe observan comportamientos distintos para cada grupo.\n\n## Contextualizar\n\nVamos con información geofráfica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroutes <- read_csv(fs::path(ruta_datos, \"routes.txt\"))\ntrips  <- read_csv(fs::path(ruta_datos, \"trips.txt\"))\nstops  <- read_csv(fs::path(ruta_datos, \"stops.txt\"), \n                   col_types = cols(stop_url = col_character()))\n\nshapes <- data.table::fread(fs::path(ruta_datos, \"shapes.csv.gz\"))\nshapes <- as_tibble(shapes)\n\nstops_metro <- stops |>\n  filter(!grepl(\"\\\\d\", stop_id)) |> \n  mutate(stop_url = basename(stop_url))\n\nroutes_metro <- routes |> \n  filter(grepl(\"^L\\\\d\",route_id))\n\nshapes_metro <- routes |> \n  filter(grepl(\"^L\\\\d\",route_id)) %>% \n  semi_join(trips, .,  by = \"route_id\") %>%\n  semi_join(shapes, ., by = \"shape_id\") |> \n  ### IMPORTANTE\n  filter(str_detect(shape_id, \"-I\")) |> \n  mutate(shape_id2 = str_replace(shape_id, \"-I\", \"\"))\n\ncolors_metro <- distinct(shapes, shape_id) |> \n  left_join(distinct(trips, shape_id, route_id), by = \"shape_id\") |> \n  left_join(distinct(routes, route_id, route_color), by = \"route_id\") |> \n  semi_join(shapes_metro, by = \"shape_id\") |> \n  mutate(route_color = paste0(\"#\", route_color))\n  \nstr_to_id2 <- function(x) {\n   x |>\n    as.character() |>\n    str_trim() |>\n    str_to_lower() |> \n    str_replace_all(\"\\\\\\\\s+\", \"_\") |>\n    str_replace_all(\"\\\\\\\\\\\\\\\\|/\", \"_\") |>\n    str_replace_all(\"\\\\\\\\[|\\\\\\\\]\", \"_\") |>\n    str_replace_all(\"_+\", \"_\") |>\n    str_replace_all(\"_$|^_\", \"\") |> \n    str_replace_all(\"á\", \"a\") |>\n    str_replace_all(\"é\", \"e\") |> \n    str_replace_all(\"í\", \"i\") |> \n    str_replace_all(\"ó\", \"o\") |> \n    str_replace_all(\"ú\", \"u\") |> \n    str_replace_all(\"ñ\", \"n\") |> \n    str_replace_all(\"`\", \"\") |> \n    str_replace_all(\"_de_\", \"_\")\n}\n\ndumap <- mutate(dumap, id = str_to_id2(paraderosubida))\n\ndata4 <- dataf |> \n  group_by(paraderosubida, cluster) |> \n  summarise(median = median(subidas_laboral_promedio), .groups = \"drop\") |> \n  ungroup() |> \n  mutate(id = str_to_id2(paraderosubida))\n\nstops_metro_data <- stops_metro |> \n  mutate(id = str_to_id2(stop_name)) |> \n  left_join(data4, by = \"id\") |> \n  filter(!is.na(cluster))\n\nrm(shapes, routes, stops, trips, data4)\n\ncolors_metro_manual <- colors_metro |> \n  select(name = route_id, value = route_color) |> \n  deframe()\n\npmetro <- ggplot() +\n  geom_path(\n    data = shapes_metro, \n    aes(shape_pt_lon, shape_pt_lat, color = shape_id2), \n    size = 2\n    ) +\n  geom_point(\n    data = stops_metro_data,\n    aes(stop_lon, stop_lat, size = log(median), fill = cluster),\n    shape = 21, color = \"white\"\n    ) + \n  scale_color_manual(name = \"Línea\", values = colors_metro_manual) +\n  scale_size(guide = \"none\") +\n  scale_fill_viridis_d(name = \"Clúster\") +\n  coord_equal() +\n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n    ) + \n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n    )  +\n  facet_wrap(vars(cluster))\n\npmetro\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.svg)\n:::\n:::\n\n\nU otra versión utilizando `{{chilemapas}}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npmetro2 <- ggplot() +\n  geom_sf(\n    data = chilemapas::mapa_zonas |> filter(codigo_region == \"13\"),\n    aes(geometry = geometry),\n    alpha = 0.5,\n    color = \"white\"\n  ) +\n  geom_path(\n    data = shapes_metro, \n    aes(shape_pt_lon, shape_pt_lat, color = shape_id2), \n    size = 2\n    ) +\n  geom_point(\n    data = stops_metro_data,\n    aes(stop_lon, stop_lat, size = log(median), fill = cluster),\n    shape = 21, color = \"white\"\n    ) + \n  scale_color_manual(name = \"Línea\", values = colors_metro_manual) +\n  scale_size(guide = \"none\") +\n  scale_fill_viridis_d(name = \"Clúster\") +\n  coord_sf(xlim = c(-70.8, -70.5), ylim = c(-33.3, -33.65)) +\n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n  ) +\n  theme(legend.position = \"right\")\n  \npmetro2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.svg)\n:::\n:::\n\n\n## Resumiendo\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://stackoverflow.com/a/46221054/829971\nremove_geom <- function(ggplot2_object, geom_type) {\n  # Delete layers that match the requested type.\n  layers <- lapply(ggplot2_object$layers, function(x) {\n    if (class(x$geom)[1] == geom_type) {\n      NULL\n    } else {\n      x\n    }\n  })\n  # Delete the unwanted layers.\n  layers <- layers[!sapply(layers, is.null)]\n  ggplot2_object$layers <- layers\n  ggplot2_object\n}\n\nlist(p0, p1, p2, pcors, pnet, pumapkm, pkm,\n     pdend, pphylo, pclus, pmetro, pmetro2) |>\n  map(function(p){\n    \n    pb <- ggplot_build(p)\n    \n    nfacets <- pb$layout$layout$PANEL |> length() \n    \n    p <- remove_geom(p, \"GeomTextRepel\") + \n      theme(\n        panel.grid.major = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.position = \"none\",\n        strip.text = element_blank(),\n        panel.spacing = unit(0.1, \"lines\")\n        \n      ) +\n      labs(x = NULL, y = NULL, title = NULL, subtitle = NULL) \n    \n    \n    if(!class(pb$layout$coord)[1] == \"CoordSf\") {\n      p <- p +  coord_cartesian() \n    }\n    \n    if(nfacets != 1){\n      p <- p + \n        # ggforce::facet_grid_paginate(vars(cluster),  ncol = 1, nrow = 1, page = 1)\n        facet_wrap(vars(cluster), ncol = 2, scales = \"free\")\n    }\n    \n    p\n    \n  }) |> \n  reduce(`+`)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.svg)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}