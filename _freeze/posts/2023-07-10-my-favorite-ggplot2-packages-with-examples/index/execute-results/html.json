{
  "hash": "00639c1ab0343f417cc61ade49526b1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My favorite `ggplot2` packages with examples\"\nsubtitle: I have to put things somewhere so I don't forget them\ndate: 2023-07-23\ndate-modified: \"2024-03-25\"\ncategories: [minipost, ggplot2, dont-forget]\nimage: images/preview.png  \neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nThe idea is to show some packages and options that I use on a daily basis, and leave code with annotations and defaults that I normally use. We will go through the packages one by one with examples, but these can be grouped into the following categories.\n\n* Typography: `{showtext}`.\n* Annotations: `{ggrepel}`, `{gghighlight}`, `{ggforce}`, `{ggfittext}`.\n* Extra features: `{scales}` and -again- `{ggforce}`.\n* Tree-objects: `{ggparty}` and `{parttree}`.\n\nWhere do we start from? Define some data and some defaults plots that we would have and would like to modify. \n\n\n::: {.cell .column-page layout-ncol=\"3\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\nset.seed(123)\n\nmtcars <- mtcars |>\n  rownames_to_column(var = \"name\") |> \n  as_tibble() |> \n  sample_n(20)\n\npenguins <- penguins |> \n  filter(complete.cases(penguins)) \n\np1 <- ggplot(mtcars, aes(wt, mpg, label = name)) +\n  geom_point(color = \"cyan4\", size = 2)\np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.svg)\n:::\n\n```{.r .cell-code}\np2 <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_point(aes(color = species), size = 2)\np2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.svg)\n:::\n\n```{.r .cell-code}\np3 <- penguins |> \n  count(species) |> \n  ggplot(aes(species, n)) +\n  geom_col()\np3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.svg)\n:::\n:::\n\n\nIn my particuar case I like `theme_minimal` theme and legend at the bottom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"plain\"),\n      plot.background = element_rect(fill = \"#fcfcfc\", colour = NA),\n      panel.background = element_rect(fill = \"#fcfcfc\", colour = NA),\n      legend.position = \"bottom\",\n      legend.key.width = unit(1.5, \"cm\")\n    )\n)\n\ncolors <- c(\"darkorange\",\"darkorchid\",\"cyan4\")\n```\n:::\n\n\nWe're ready to go!\n\n\n## `{showtext}`\n\nSource:[ https://github.com/yixuan/showtext](https://github.com/yixuan/showtext).\n\nThis package makes easy to use typography! Do you want some typography from https://fonts.google.com/? You want it? You got it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\n\nfont_add_google(\"IBM Plex Sans\", family = \"ibm\")\n\nshowtext_auto()\n\np2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.svg)\n:::\n:::\n\n\n\n## `{ggrepel}`\n\nSource: [https://ggrepel.slowkow.com/articles/examples.html](https://ggrepel.slowkow.com/articles/examples.html).\n\nThis package has been on CRAN/github for a while now. Package that in combination with the `data` argument can make simple and effective annotations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n\np_repel1 <- p1  +\n  geom_text_repel(color = \"gray40\", family  = \"ibm\")\n\np_repel1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n\n```{.r .cell-code}\np_repel2 <- p1 +\n  geom_text_repel(\n    data = ~ filter(.x, mpg > 30), \n    color = \"gray40\", \n    family  = \"ibm\",\n     force = 20\n    )\n\np_repel2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.svg)\n:::\n:::\n\n\n\n## `{gghighlight}`\n\nSource: [https://yutannihilation.github.io/gghighlight/articles/gghighlight.html](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html).\n\n- This package is plug and play if you have to highlight data with a specific filter. \n- Is important to know this package don't work like the usual `geom_*` + `aes()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gghighlight) \n\np1 +\n  gghighlight(\n    # interest subset\n    mpg > 30,\n    # additional parameters\n    label_key = name,\n    keep_scales = TRUE,\n    label_params = list(color = \"gray40\", label.r = 0, fill = \"gray95\"),\n    # can change previous parameters\n    unhighlighted_params = list(size = 1.5, color = \"darkorchid\")\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\n\n## `{ggforce}`\n\nSource: [https://ggforce.data-imaginist.com/](https://ggforce.data-imaginist.com/).\n\n- `{ggforce}` takes annotations to the next level.\n- A lot of other functionalities like new geoms, new facets!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggforce)\n\np1 +\n  geom_mark_hull(\n    aes(filter =  mpg > 30, label = \"Interesting\"),\n    description = \"Lightweight vehicles have high performance.\",\n    color = \"gray70\",\n    fill = \"gray90\",\n    concavity = 5,\n    # control width text\n    label.minwidth = unit(100, \"mm\"),\n    # how much distance before show legend\n    label.buffer = unit(2.5, \"mm\"),\n    label.colour = \"gray30\",\n    label.family = \"ibm\"\n  ) +\n  # use circle for points\n  geom_mark_circle(\n    aes(filter =  wt > 3.75, label = NULL, description = name),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 10,\n    label.family = \"ibm\"\n   )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\nAnd other `geom_mark_*` like  hull, circle, ellpse, rect.\n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\np2 + \n  geom_mark_ellipse(\n    aes(fill = species, label = species),\n    alpha = 0.1,\n    color = \"transparent\", # a nice touch sometimes! (imho)\n    label.colour = \"gray30\",\n    label.family = \"ibm\",\n    label.fontsize = 8,\n    # label.fontface = \"plain\",\n    # this is just for blogpost\n    expand = unit(-5, \"mm\"),\n    radius = unit(5, \"mm\")\n    ) +\n  geom_mark_circle(\n    aes(\n      filter = coalesce(bill_length_mm, 0) == max(bill_length_mm, na.rm = TRUE),\n      label = NULL, \n      description = \"A rare penguin!\"\n      ),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 8,\n    label.family = \"ibm\"\n   ) +\n  theme(legend.position = \"none\") +\n  labs(x = NULL, y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center'}\n:::\n:::\n\n\nNow imagine we used a $K$-means algorithm:\n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\ndcenters <- penguins |>\n  select(species, bill_length_mm, bill_depth_mm) |> \n  filter(!is.na(bill_length_mm)) |> \n  filter(!is.na(bill_depth_mm)) |> \n  group_by(species) |> \n  summarise(across(everything(), median)) |> \n  select(-species) |> \n  mutate(cluster = as.character(row_number()))\n\ndcenters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 3\n  bill_length_mm bill_depth_mm cluster\n           <dbl>         <dbl> <chr>  \n1           38.8          18.4 1      \n2           49.6          18.4 2      \n3           47.4          15   3      \n```\n\n\n:::\n\n```{.r .cell-code}\nbnd <- penguins |>\n  summarise(\n    min(bill_length_mm, na.rm = TRUE) - 1,\n    max(bill_length_mm, na.rm = TRUE) + 1,\n    min(bill_depth_mm, na.rm = TRUE)  - 1,\n    max(bill_depth_mm, na.rm = TRUE)  + 1\n  ) |> \n  as.list() |> \n  unlist() |> \n  as.vector()\n\np2 +\n  geom_voronoi_tile(\n    aes(fill = cluster, group = -1),\n    data = dcenters, alpha = 0.2, bound = bnd\n    ) +\n  geom_voronoi_segment(\n    aes(group = -1),\n    data = dcenters, color = \"gray90\", bound = bnd\n    ) +\n  xlim(bnd[1], bnd[2]) + \n  ylim(bnd[3], bnd[4]) +\n  scale_fill_viridis_d(direction = -1, option = \"C\") +\n  # its better put point over all layers\n  geom_point(\n    aes(color = species), \n    size = 2,\n    shape = 21, \n    color = \"gray90\"\n    ) +\n  theme(legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center'}\n:::\n:::\n\n\n## `{ggfittext}`\n\nSource: [https://github.com/wilkox/ggfittext](https://github.com/wilkox/ggfittext#bar-plots).\n\nThis package have a lot of features to work with strings in ggplot objects, particulary\nwhen you use treemaps.\n\nA love the simple and useful function `geom_bar_text()` + `geom_col()` combo.\n\n\n\n::: {.cell .column-page layout-ncol=\"3\"}\n\n```{.r .cell-code}\nlibrary(ggfittext)\n\np3 <- penguins |> \n  count(species) |> \n  mutate(n = 100 * n) |> \n  ggplot(aes(species, n)) +\n  geom_col(width = 0.35, fill = \"cyan4\") \n\np3 +\n  geom_bar_text()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.svg)\n:::\n\n```{.r .cell-code}\np3 +\n  geom_bar_text(\n    formatter = scales::comma_format(), \n    padding.y =  grid::unit(2.5, \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-2.svg)\n:::\n\n```{.r .cell-code}\np3 + \n  geom_bar_text(\n    formatter = scales::comma_format(), \n    place = \"bottom\",\n    padding.y =  grid::unit(2.5, \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.svg)\n:::\n:::\n\n\n\n## `{scales}`\n\nSource: [https://scales.r-lib.org/](https://scales.r-lib.org/).\n\n\nYou use this package using a `label_*` function in the `labels` argument of\n`scale_*` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales) # comma dollar label_comma\n\nx <- c(123, 456678, 100000)\n\nc(comma(x), dollar(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"123\"      \"456,678\"  \"100,000\"  \"$123\"     \"$456,678\" \"$100,000\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# I know the correct alternative is Mpg\nmiles_per_gallon <- label_comma(suffix = \" mi/gal\")\n\nwt_lbl <- label_comma(scale = 1000, suffix = \" lbs\")\n\np1 +\n  scale_y_continuous(\n    labels = miles_per_gallon, \n    name = \"fuel consumption\"\n    ) +\n  scale_x_continuous(\n    labels = wt_lbl, \n    name = \"weigth\"\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\n## `{ggparty}`\n\nSource: [https://github.com/martin-borkovec/ggparty](https://github.com/martin-borkovec/ggparty).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(partykit) # ctree\nlibrary(ggparty)\n\npenguinct <- ctree(\n  species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex,\n  data = penguins\n  )\n\nautoplot(penguinct)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.svg)\n:::\n:::\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\nggparty(penguinct) +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = splitvar),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      scale_color_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size = 5))), \n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = sprintf(\"Node %s (n = %s)\", id, nodesize)),\n    ids = \"terminal\",\n    size = 3,\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## `{parttree}`\n\nSource: [https://github.com/grantmcdermott/parttree](https://github.com/grantmcdermott/parttree).\n\nI use the {parttree} package when the model is simple, or when I want to explain the decision tree algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\"grantmcdermott/parttree\")\nlibrary(parttree)\n\n# 2 independent variables\npenguinct2 <- ctree(\n  species ~ bill_length_mm + bill_depth_mm,\n  data = penguins,\n  control = ctree_control(maxdepth = 3)\n  )\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_parttree(\n    data = penguinct2, \n    aes(fill = species),\n    alpha = 0.2, \n    color = \"gray60\",\n    ) + \n  geom_point(aes(col = species)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.svg)\n:::\n:::\n\n\n## `{ggparty}` + `{parttree}` \n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\ndpred_node <- penguins |>\n  select(species, bill_length_mm, bill_depth_mm) |>\n  mutate(\n    id = predict(penguinct2, type = \"node\", newdata = penguins),\n    species_pred = predict(penguinct2, newdata = penguins)\n    ) |>\n  group_by(id) |>\n  summarise(\n    species = unique(species_pred),\n    bill_length_mm = mean(bill_length_mm),\n    bill_depth_mm = mean(bill_depth_mm)\n  )\n\ndpred_node\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 4\n     id species   bill_length_mm bill_depth_mm\n  <int> <fct>              <dbl>         <dbl>\n1     3 Adelie              37.4          15.2\n2     4 Adelie              38.5          18.4\n3     6 Gentoo              47.4          14.9\n4     8 Adelie              43.0          18.2\n5     9 Chinstrap           49.5          18.4\n```\n\n\n:::\n\n```{.r .cell-code}\ndparttree <- parttree(penguinct2)\ndparttree <- dparttree |> \n  as_tibble() |> \n  rename(id = node) |> \n  select(-path)\n\nggp <- ggparty(penguinct2) \n\nggp$data <- ggp$data |> \n  as_tibble() |> \n  left_join(\n    dpred_node |> select(id, species),\n    by = join_by(id)\n    )\n\nggp +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = str_replace_all(splitvar, \"_\", \" \")),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      geom_parttree(\n        data = penguinct2, \n        aes(fill = species),\n        alpha = 0.1, \n        color = \"gray60\",\n        ),\n      \n      geom_point(\n        data = dpred_node, \n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 3\n        ),\n      \n      geom_rect(\n        data = dparttree, \n        aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = species),\n        alpha = 0.5, \n        color = \"gray40\",\n        ),\n      \n      scale_fill_manual(values = colors),\n      scale_color_manual(values = colors),\n      # scale_color_viridis_d(end = 0.9),\n      # scale_fill_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size=5))),\n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    # id = \"all\"\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = str_glue(\"{species} (#{id},  n = {nodesize})\")),\n    ids = \"terminal\",\n    size = 3,\n    family = \"ibm\",\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.svg){fig-align='center'}\n:::\n:::\n\n\n## `{patchwork}`\n\nSource: [https://patchwork.data-imaginist.com/articles/patchwork.html](https://patchwork.data-imaginist.com/articles/patchwork.html).\n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\np2 <- p2 +\n  scale_color_manual(values = colors) +\n  theme(legend.position = \"none\")\n\np3 <- p3 +\n  geom_col(aes(fill = species), width = 0.5) +\n  scale_fill_manual(values = colors, name = NULL)\n\npp <- ((p1 / p3) | p2) +\n  plot_layout(\n    widths = c(1, 2),\n    guides = \"collect\"\n    ) +\n  plot_annotation(\n    title = \"Some ggplot2 objects\",\n    subtitle = \"The plot (a) shows one aspect, while (b) presents additional data.\",\n    tag_levels = \"a\",\n    tag_prefix = \"(\",\n    tag_suffix = \")\"\n    )\n\npp\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.svg){fig-align='center'}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}