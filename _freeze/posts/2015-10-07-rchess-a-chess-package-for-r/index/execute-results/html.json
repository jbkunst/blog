{
  "hash": "26d4278e4d34eda230b5c8d4bcbecdb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"rchess a Chess Package for R\"\nsubtitle: Finally R have a chess package! Let's see what can it do.\ndate: 2015-10-07\ncategories: [package, htmlwidgets, chess]\nimage: images/preview.png  \neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nA long time ago I wonder for some R package for chess. Python, JS, Java, C have \nchess libraries, why R not? But then the [htmlwidgets](https://github.com/ramnathv/htmlwidgets) \nand [V8](https://github.com/jeroenooms/v8) packages were born and now possibilities \nare *almost* endless. Anyone can make a wrapper for a JS library :D. And this is\nhow [rchess](https://github.com/jbkunst/rchess) came out.\n\nThe [rchess](https://github.com/jbkunst/rchess) package is a chess move, \ngeneration, validator; piece placement, movement, and check/checkmate/stalemate\ndetection. All this powered by [V8](https://github.com/jeroenooms/v8) package \nand [chessjs](https://github.com/jhlywa/chess.js) javascript library.\n\nThe main parts about this package are:\n\n- [V8](https://github.com/jeroenooms/v8) package and [chessjs](https://github.com/jhlywa/chess.js) javascript library. So this\nis not about performance but have the things done (just like Just [@hrbrmstr](http://datadrivensecurity.info/blog/posts/2015/Oct/getting-into-the-zones-with-r-jsonlite/)\nsaids).\n- [R6](https://github.com/wch/R6/) package for the OO system.\n- [htmlwidgets](https://github.com/ramnathv/htmlwidgets) package and [chessboardjs](http://chessboardjs.com/) javascript library.\n\nNow let's take a look what this package can do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"rchess\")\n# remotes::install_github(\"jbkunst/rchess\")\nlibrary(rchess)\nchss <- Chess$new()\n\nplot(chss)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-9d45205ac8fcf94d15a0\" style=\"width:100%;height:650px;\" class=\"chessboardjs html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9d45205ac8fcf94d15a0\">{\"x\":{\"fen\":\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nWHOA chessboardjs have a nice look. Right?\n\nThe basic usage is the same as the [chessjs](https://github.com/jhlywa/chess.js) api. I'm just implemented only the calls to\nthis api. Anyway, to see the possibles moves you can use the *moves* method and if you make a move use the *move*\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchss$moves()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a3\"  \"a4\"  \"b3\"  \"b4\"  \"c3\"  \"c4\"  \"d3\"  \"d4\"  \"e3\"  \"e4\"  \"f3\"  \"f4\" \n[13] \"g3\"  \"g4\"  \"h3\"  \"h4\"  \"Na3\" \"Nc3\" \"Nf3\" \"Nh3\"\n```\n\n\n:::\n\n```{.r .cell-code}\nchss$moves(verbose = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 6\n   color from  to    flags piece san  \n   <chr> <chr> <chr> <chr> <chr> <chr>\n 1 w     a2    a3    n     p     a3   \n 2 w     a2    a4    b     p     a4   \n 3 w     b2    b3    n     p     b3   \n 4 w     b2    b4    b     p     b4   \n 5 w     c2    c3    n     p     c3   \n 6 w     c2    c4    b     p     c4   \n 7 w     d2    d3    n     p     d3   \n 8 w     d2    d4    b     p     d4   \n 9 w     e2    e3    n     p     e3   \n10 w     e2    e4    b     p     e4   \n11 w     f2    f3    n     p     f3   \n12 w     f2    f4    b     p     f4   \n13 w     g2    g3    n     p     g3   \n14 w     g2    g4    b     p     g4   \n15 w     h2    h3    n     p     h3   \n16 w     h2    h4    b     p     h4   \n17 w     b1    a3    n     n     Na3  \n18 w     b1    c3    n     n     Nc3  \n19 w     g1    f3    n     n     Nf3  \n20 w     g1    h3    n     n     Nh3  \n```\n\n\n:::\n\n```{.r .cell-code}\nchss$move(\"a3\")\n```\n:::\n\n\nWe can also concate  moves, see who plays in the next turn, see the history, etc.:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchss$move(\"e5\")$move(\"f4\")$move(\"Qe7\")$move(\"fxe5\")\n\nplot(chss)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-2a2bfff4bb98442e5bf3\" style=\"width:100%;height:650px;\" class=\"chessboardjs html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2a2bfff4bb98442e5bf3\">{\"x\":{\"fen\":\"rnb1kbnr/ppppqppp/8/4P3/8/P7/1PPPP1PP/RNBQKBNR b KQkq - 0 3\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchss$turn()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"b\"\n```\n\n\n:::\n\n```{.r .cell-code}\nchss$history(verbose = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  color from  to    flags piece san   captured number_move\n  <chr> <chr> <chr> <chr> <chr> <chr> <chr>          <int>\n1 w     a2    a3    n     p     a3    <NA>               1\n2 b     e7    e5    b     p     e5    <NA>               2\n3 w     f2    f4    b     p     f4    <NA>               3\n4 b     d8    e7    n     q     Qe7   <NA>               4\n5 w     f4    e5    c     p     fxe5  p                  5\n```\n\n\n:::\n\n```{.r .cell-code}\nchss$history()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a3\"   \"e5\"   \"f4\"   \"Qe7\"  \"fxe5\"\n```\n\n\n:::\n:::\n\n\nA must have funcionality is load games from PGN and FEN notations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchssfen <- Chess$new()\n \nfen <- \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2\"\n \nchssfen$load(fen)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n(Shh you can also plot the chesboard with ggplot. I know I need change that unicode style pieces ;) ). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(chssfen, type = \"ggplot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chssfen-1.svg)\n:::\n:::\n\n\nNow load PGN string:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npgn <- system.file(\"extdata/pgn/kasparov_vs_topalov.pgn\", package = \"rchess\")\npgn <- readLines(pgn, warn = FALSE)\npgn <- paste(pgn, collapse = \"\\n\")\n\nchsspgn <- Chess$new()\n\nchsspgn$load_pgn(pgn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(chsspgn$pgn())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[Event \"Hoogovens A Tournament\"]\n[Site \"Wijk aan Zee NED\"]\n[Date \"1999.01.20\"]\n[EventDate \"?\"]\n[Round \"4\"]\n[Result \"1-0\"]\n[White \"Garry Kasparov\"]\n[Black \"Veselin Topalov\"]\n[ECO \"B06\"]\n[WhiteElo \"2812\"]\n[BlackElo \"2700\"]\n[PlyCount \"87\"]\n\n1. e4 d6 2. d4 Nf6 3. Nc3 g6 4. Be3 Bg7 5. Qd2 c6 6. f3 b5\n7. Nge2 Nbd7 8. Bh6 Bxh6 9. Qxh6 Bb7 10. a3 e5 11. O-O-O Qe7\n12. Kb1 a6 13. Nc1 O-O-O 14. Nb3 exd4 15. Rxd4 c5 16. Rd1 Nb6\n17. g3 Kb8 18. Na5 Ba8 19. Bh3 d5 20. Qf4+ Ka7 21. Rhe1 d4\n22. Nd5 Nbxd5 23. exd5 Qd6 24. Rxd4 cxd4 25. Re7+ Kb6\n26. Qxd4+ Kxa5 27. b4+ Ka4 28. Qc3 Qxd5 29. Ra7 Bb7\n30. Rxb7 Qc4 31. Qxf6 Kxa3 32. Qxa6+ Kxb4 33. c3+ Kxc3\n34. Qa1+ Kd2 35. Qb2+ Kd1 36. Bf1 Rd2 37. Rd7 Rxd7\n38. Bxc4 bxc4 39. Qxh8 Rd3 40. Qa8 c3 41. Qa4+ Ke1 42. f4 f5\n43. Kc1 Rd2 44. Qa7 1-0\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(chsspgn$history(verbose = TRUE), 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 8\n   color from  to    flags piece san   captured number_move\n   <chr> <chr> <chr> <chr> <chr> <chr> <chr>          <int>\n 1 w     e2    e4    b     p     e4    <NA>               1\n 2 b     d7    d6    n     p     d6    <NA>               2\n 3 w     d2    d4    b     p     d4    <NA>               3\n 4 b     g8    f6    n     n     Nf6   <NA>               4\n 5 w     b1    c3    n     n     Nc3   <NA>               5\n 6 b     g7    g6    n     p     g6    <NA>               6\n 7 w     c1    e3    n     b     Be3   <NA>               7\n 8 b     f8    g7    n     b     Bg7   <NA>               8\n 9 w     d1    d2    n     q     Qd2   <NA>               9\n10 b     c7    c6    n     p     c6    <NA>              10\n11 w     f2    f3    n     p     f3    <NA>              11\n12 b     b7    b5    b     p     b5    <NA>              12\n13 w     g1    e2    n     n     Nge2  <NA>              13\n14 b     b8    d7    n     n     Nbd7  <NA>              14\n15 w     e3    h6    n     b     Bh6   <NA>              15\n16 b     g7    h6    c     b     Bxh6  b                 16\n17 w     d2    h6    c     q     Qxh6  b                 17\n18 b     c8    b7    n     b     Bb7   <NA>              18\n19 w     a2    a3    n     p     a3    <NA>              19\n20 b     e7    e5    b     p     e5    <NA>              20\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(chsspgn)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-614523e2ed86703a4cd7\" style=\"width:100%;height:650px;\" class=\"chessboardjs html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-614523e2ed86703a4cd7\">{\"x\":{\"fen\":\"8/Q6p/6p1/5p2/5P2/2p3P1/3r3P/2K1k3 b - - 3 44\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nAnd that's it. If you want to check more funcionalities check the\n[github repository](https://github.com/jbkunst/rchess) or \n[this](http://rpubs.com/jbkunst/rchess2) document.\n\nBye mate!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.11.0/jquery.min.js\"></script>\n<script src=\"../../site_libs/chessjs-0.9.1/chess.min.js\"></script>\n<link href=\"../../site_libs/chessboardjs-0.3.0/chessboard-0.3.0.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/chessboardjs-0.3.0/chessboard-0.3.0.min.js\"></script>\n<script src=\"../../site_libs/chessboardjs.themes-0.1/chessboardjs.themes.js\"></script>\n<script src=\"../../site_libs/chessboardjs.themes-0.1/chessboardjs.themes.data.js\"></script>\n<script src=\"../../site_libs/chessboardjs-binding-0.1/chessboardjs.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}