{
  "hash": "817fa584b8043f9c1cfa502eeabd6c5b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"#GOT Animating the Shifting of Affiliations\"\nsubtitle: My first steps using the gganimate package using Game of Thrones \ndate: 2019-04-23\ncategories: [data-visualization, ggplot2, animation]\nimage: images/preview.gif\n---\n\n\n\n\n<!-- ![preview](images/preview.gif) -->\n\n\n## Introduction\n\nWhy use GOT data? Because I was participating in #datosdemiercoles which is the\nspanish version of #tidytuesday. So the data is given and the purpouse is to learn new\npackages using that data and share with the community, you know this already, right?\n\nSecondly the package I want to learn beside {ggforce} is {gganimate} so a very first idea\nwas represent every character as a point and move according the actual affiliations. A kind of \n~~copy~~ inspiration from \nFlowingData's A Day in the Life of Americans^[https://flowingdata.com/2015/12/15/a-day-in-the-life-of-americans/]\n\n<aside>\nInspiration by Flowindata\n![Inspiration](https://i2.wp.com/flowingdata.com/wp-content/uploads/2016/08/floaty-bubbles-featured.gif?fit=720%2C449&ssl=1)\n</aside>\n\n## Disclaimers\n\n- I know the animation is not then best way to visualiza data! Don't judge me please! But is fun to play with.\n- I don't follow the series so I don't know if the results or animations makes any sense.\n\n## The data, the wrangling and the cleaning\n\nThe data come from [this post](https://medium.com/@matthewlunkes/a-game-of-data-visualizations-243c3d8ceb1e) \nwhere the shifting affiliations are visualized using an alluyvial diagram. It's a nice post by \n[Matthew Lunkes](https://medium.com/@matthewlunkes) where he tell all the process to get the final chart:\n\n![](https://cdn-images-1.medium.com/max/2560/1*gJxTRX_NmrKmHFxamJYvyg.png)\n\nIn this case the data can be downloaded from this repository https://github.com/MattLunkes/GoT_Affiliations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata <- read_csv(\"https://raw.githubusercontent.com/MattLunkes/GoT_Affiliations/master/got_char.csv\")\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 488 × 11\n   Name        Origin `Starting Affiliation` `End of S1` `End of S2` `End of S3`\n   <chr>       <chr>  <chr>                  <chr>       <chr>       <chr>      \n 1 Tyrion Lan… House… King Robert Baratheon  King Joffr… King Joffr… King Joffr…\n 2 Cersei Lan… House… King Robert Baratheon  King Joffr… King Joffr… King Joffr…\n 3 Daenerys T… House… Viserys Targaryen      Daenerys T… Daenerys T… Daenerys T…\n 4 Jon Snow    House… King Robert Baratheon  Night's Wa… Wildlings   Night's Wa…\n 5 Sansa Stark House… King Robert Baratheon  King Joffr… King Joffr… King Joffr…\n 6 Arya Stark  House… King Robert Baratheon  Other, Wes… Other, Wes… Other, Wes…\n 7 Jaime Lann… House… King Robert Baratheon  King Joffr… King Joffr… King Joffr…\n 8 Jorah Morm… House… Viserys Targaryen      Daenerys T… Daenerys T… Daenerys T…\n 9 Theon Grey… House… King Robert Baratheon  Robb Stark… Balon Grey… King Joffr…\n10 Samwell Ta… House… Night's Watch          Night's Wa… Night's Wa… Night's Wa…\n# ℹ 478 more rows\n# ℹ 5 more variables: `End of S4` <chr>, `End of S5` <chr>, `End of S6` <chr>,\n#   `End of S7` <chr>, Episodes <dbl>\n```\n\n\n:::\n:::\n\n\nAs we see, the data comes in a not tidy way so `gather` is our friend here.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_long <- data |>\n  janitor::clean_names() |> \n  rename(end_of_s0 = starting_affiliation) |>\n  select(-episodes, -origin) |> \n  gather(season, affiliation, -name) |> \n  mutate(\n    season = as.numeric(str_extract(season, \"\\\\d+\")),\n    affiliation = case_when(\n      affiliation == \"King Robert Baratheon\" ~ \"Baratheon\",\n      affiliation == \"Viserys Targaryen\" ~ \"Targaryen\",\n      affiliation == \"King Joffrey Baratheon\" ~ \"Lannister\",\n      affiliation == \"Daenerys Targaryen\" ~ \"Targaryen\",\n      affiliation == \"Night's Watch\" ~ \"Night's Watch\",\n      affiliation == \"Other, Westeros\" ~ \"Westeros\",\n      affiliation == \"Wildlings\" ~ \"Wildlings\",\n      affiliation == \"King Tommen Baratheon\" ~ \"Lannister\",\n      affiliation == \"Petyr Baelish, Lord Protector of the Vale\" ~ \"The Vale\",\n      affiliation == \"Other, Essos\" ~ \"Essos\",\n      affiliation == \"Roose Bolton, Lord Paramount of the North\" ~ \"Bolton\",\n      affiliation == \"Queen Cersei Lannister\" ~ \"Lannister\",\n      affiliation == \"Jon Snow, King in the North\" ~ \"Stark\",\n      TRUE ~ affiliation\n      )\n    )\n\n# there are some repeated characters?\ndata_long <- data_long |> \n  semi_join(count(data, Name) |> filter(n == 1), by = c(\"name\" = \"Name\")) |> \n  # importante for the ggrepel part\n  arrange(season, name, affiliation)\n\ndata_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,592 × 3\n   name            season affiliation  \n   <chr>            <dbl> <chr>        \n 1 Addam Marbrand       0 Baratheon    \n 2 Adrack Humble        0 Baratheon    \n 3 Aeron Greyjoy        0 Baratheon    \n 4 Aggo                 0 Khal Drogo   \n 5 Alliser Thorne       0 Night's Watch\n 6 Alton Lannister      0 Baratheon    \n 7 Alys Karstark        0 Baratheon    \n 8 Amory Lorch          0 Baratheon    \n 9 Anara                0 Essos        \n10 Anguy                0 Baratheon    \n# ℹ 3,582 more rows\n```\n\n\n:::\n:::\n\n\n\n## Affiliations Positions\n\nAt the beginning I think use a circular layout and see what happend but the result\nwas far for beign interesting, and as we can see I was a **failure** in my first attempt using\n{gganimate}.\n\n![](images/notsogood.gif)\n\n<!-- <iframe src=\"https://giphy.com/embed/cUVNl0if4WqLC\" width=\"452\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p class=\"caption\"><a href=\"https://giphy.com/gifs/game-of-thrones-gif-cUVNl0if4WqLC\">via GIPHY</a></p> -->\n\nWell, so the next idea and step was to get closer the affilations related. How can be two\naffiliations be related? An answer can be the the amount of characters which move from\none to another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts <- data_long |> \n  distinct(season) |> \n  pull() |> \n  head(-1)\n\nchange_season <- map_df(ts, function(t = 0){\n  \n  dout <- full_join(\n    data_long |> filter(season == t),\n    data_long |> filter(season == t + 1),\n    by = \"name\", \n    suffix = c(\"_before\", \"_actual\")\n  ) |> \n    count(from = affiliation_before, to = affiliation_actual)\n  \n  dout <- dout |> \n    filter(complete.cases(dout)) |> \n    mutate(season = t)\n  \n  dout\n  \n})\n\nchange_total <- change_season |> \n  group_by(from, to) |> \n  summarise(n = sum(n)) |> \n  ungroup()\n\nchange_total\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119 × 3\n   from                                    to                                  n\n   <chr>                                   <chr>                           <int>\n 1 Balon Greyjoy, King of the Iron Islands Balon Greyjoy, King of the Iro…    31\n 2 Balon Greyjoy, King of the Iron Islands Deceased                            7\n 3 Balon Greyjoy, King of the Iron Islands Euron Greyjoy, King of the Iro…     4\n 4 Balon Greyjoy, King of the Iron Islands Lannister                           1\n 5 Balon Greyjoy, King of the Iron Islands Targaryen                           3\n 6 Baratheon                               Balon Greyjoy, King of the Iro…     9\n 7 Baratheon                               Brotherhood Without Banners         5\n 8 Baratheon                               Deceased                           15\n 9 Baratheon                               Essos                               1\n10 Baratheon                               House Arryn (Neutral)              12\n# ℹ 109 more rows\n```\n\n\n:::\n:::\n\n\nNow, with this data we can use the {igraph} package and\nthe `graph_from_data_frame` function to get a graph from the previous \ndata frame and then get a layout.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n\ng <- graph_from_data_frame(change_total, directed = FALSE)\n\n# https://igraph.org/r/doc/strength.html\nE(g)$weight <- pull(change_total, n)\nV(g)$degree <- degree(g)\n\nV(g)$label.cex <- 0.5\n\nplot(g)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.svg)\n:::\n:::\n\n\nNice! but we need the positions instead of the image. So we'll use\nthe `layout_with_fr` to get some layout of our graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nlayout <- layout_with_fr(g)\n\naffiliations <- tibble(\n  affiliation = V(g)$name,\n  x = layout[, 2],\n  y = layout[, 1],\n  degree = degree(g)\n)\n\naffiliations <- data_long |> \n  count(affiliation) |> \n  left_join(affiliations, ., by = \"affiliation\")\n\naffiliations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 27 × 5\n   affiliation                                 n       x       y degree\n   <chr>                                   <int>   <dbl>   <dbl>  <dbl>\n 1 Balon Greyjoy, King of the Iron Islands    46 -1.50    0.178       9\n 2 Baratheon                                 200 -0.944   0.556      11\n 3 Bolton                                     18 -1.14    0.573       5\n 4 Brotherhood Without Banners                52 -0.0743  0.958       6\n 5 Deceased                                  826 -0.691  -0.123      26\n 6 Dothraki                                  100 -1.07   -1.35        6\n 7 Essos                                     262 -1.06   -0.541      16\n 8 Essos Slavers                             113 -0.146  -1.18        6\n 9 Euron Greyjoy, King of the Iron Islands     4 -2.33    0.533       2\n10 High Sparrow                                7  0.232  -0.0707      4\n# ℹ 17 more rows\n```\n\n\n:::\n:::\n\n\nAt this point we are ready to use ggplot and check!\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(affiliations, aes(x, y, color = affiliation, label = affiliation, size = degree)) +\n  geom_point() +\n  geom_text() +\n  scale_size(range = c(1, 4)) +\n  theme(legend.position = \"none\") +\n  labs(title = \"igraph laytout\")\np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\n\nThis is really an improvement from the the circular layout. The downside is the main\naffiliations are too close so the text is overlaping. A simple solution to this \nwas generate an *equidistant sequence* for every set of coordinates, $x$ and $y$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naffiliations <- affiliations |> \n  arrange(y) |> \n  mutate(y = seq(1:n())) |> \n  arrange(x) |> \n  mutate(x = seq(1:n())) |> \n  mutate_at(vars(x, y), ~ (.x - mean(.x))/sd(.x))\n```\n:::\n\n\nWe can compare the results:\n\n\n::: {.cell .column-body}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\nHappy with the effect of a simple fix for the overlaping text. And I think this\nchange keep the *spirit* of the original graph's shape.\n\n\n## Character positions\n\nTo get the character positions for every step/time/season we decided to put them\nin the corresponding affiliation making a circle around it and then adding a\nrandom noise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_reg_poly_coords <- function(sides = 5, radius = 1, x0 = 0, y0 = 0) {\n  # https://stackoverflow.com/a/7198179/829971\n  x <- radius * cos(2*pi*(1:sides)/sides) + x0\n  y <- radius * sin(2*pi*(1:sides)/sides) + y0\n  return(tibble(x, y))\n}\n\ncharacters <- data_long |> \n  count(season, affiliation) |>\n  mutate(coords = map2(n, 1/nrow(affiliations), get_reg_poly_coords)) |> \n  unnest(c(coords)) |> \n  select(-season, -affiliation)\n\ncharacters <- bind_cols(data_long, characters) |> \n  left_join(affiliations, by = c(\"affiliation\"),  suffix = c(\".character\", \".affiliation\")) |> \n  mutate(\n    x = x.character +  x.affiliation,\n    y = y.character +  y.affiliation\n  ) |> \n  mutate_at(vars(x, y), ~ .x + runif(length(.x), -1, 1)/nrow(affiliations))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot() +\n  geom_point(aes(x, y, color = affiliation), alpha = 0.5, data = characters) +\n  geom_text(aes(x, y, size = n, label = affiliation), alpha = 0.5, data = affiliations) +\n  scale_size_area() +\n  scale_color_viridis_d() +\n  theme(legend.position = \"none\")\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.svg)\n:::\n:::\n\n\nNice! We are almost there.\n\n## Some details before the magic\n\nTo get a very style GOT theme we need first the font, you can download\nfrom this link https://fontmeme.com/fonts/game-of-thrones-font/.^[Thanks to (violetrzn)[https://twitter.com/violetrzn], https://github.com/violetr/tidytuesday/blob/master/datosdem2.R#L8]\nand use it with the {extrafont} package.\n\nWe'll select some important characters to use with {ggrepel} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_characters <- data |>\n  select(name = Name, Episodes) |> \n  arrange(desc(Episodes)) |>\n  head(5)\n\nknitr::kable(main_characters)\n```\n\n::: {.cell-output-display}\n\n\n|name               | Episodes|\n|:------------------|--------:|\n|Tyrion Lannister   |       61|\n|Cersei Lannister   |       58|\n|Daenerys Targaryen |       56|\n|Jon Snow           |       56|\n|Sansa Stark        |       54|\n\n\n:::\n:::\n\n\n## Animation is HERE\n\nFirst we need some setup for the font and colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(extrafont)\nloadfonts(device = \"win\") # yeah, win! :/\n\nfont <- \"Game of Thrones\"\nfont2 <- \"Roboto Condensed\"\nbckground <- \"black\"\ncolor1 <- \"#959394\"\ncolor2 <- \"white\"\nseed <- 123\n\ntheme_set(theme_gray())\n```\n:::\n\n\nThen, the usual {ggplot2} syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot() +\n  # maint characters labels\n  ggrepel::geom_text_repel(\n  # geom_text(\n    aes(x, y, label = name),\n    seed = seed,\n    # box.padding = .5, force = 0.25,, max.iter = 5000,\n    color = color1,\n    size = 3,\n    family = font2,\n    vjust = \"inward\", hjust = \"inward\",\n    data = semi_join(characters, main_characters, by = \"name\")\n  ) +\n  # https://stackoverflow.com/a/34398935/829971\n  # maint characters points\n  geom_point(\n    aes(x, y),\n    size = 3,\n    alpha = 0.50,\n    color = color2,\n    stroke = 0,\n    shape = 16,\n    data = semi_join(characters, main_characters, by = \"name\")\n  ) +\n  # rest of points\n  geom_point(\n    aes(x, y),\n    size = 3,\n    alpha = 0.20,\n    color = color2,\n    stroke = 0,\n    shape = 16,\n    data = anti_join(characters, main_characters, by = \"name\") \n  ) +\n  # labels affiliations\n  geom_text(\n    aes(x, y + 3 / nrow(affiliations), label = affiliation, size = degree),\n    data = affiliations,\n    color = color1,\n    alpha = 0.80,\n    family = font\n  ) +\n  scale_size(range = c(2, 5)) +\n  labs(\n    title = \"#\",\n    caption = \"#DatosDeMiercoles por @jbkunst\\njkunst.com\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"none\",\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    rect = element_rect(fill = bckground, color = bckground),\n    text  = element_text(family = font, colour = color1, size = 15),\n    plot.title = element_text(family = font, colour = color1, size = 25),\n    plot.subtitle = element_text(family = font2, colour = color1, size = 13),\n    plot.caption = element_text(family = font2, colour = color1, size = 10),\n  )\n```\n:::\n\n\nFinally add the {gganimate} magic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\np <- p +\n  labs(subtitle = \"Affiliation changes in season {trunc(frame_time)}\") +\n  transition_time(season) +\n  shadow_wake(wake_length = 0.005, alpha = TRUE, exclude_layer = 1) +\n  ease_aes(\"exponential-in-out\")\n```\n:::\n\n\nFor test purposes I recommend reduce de `fps` to 10, and `duration`\nas much you can according how many frames you are using so you can \nto check if the output animation is what you want quickly, then \nfor the final output use at least 30 fps to get a smooth transition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimate(p, fps = 30, duration = 8*3, width = 1000, height = 800)\n```\n:::\n\n\n\n\nAnd voilà:\n\n![](images/got-shifting-gganimate.gif)\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}