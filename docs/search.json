[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data, Code and Visualization",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMy favorite ggplot2 packages with examples\n\n\n12 min\n\n\n\nminipost\n\n\nggplot2\n\n\ndont-forget\n\n\n\n\nJul 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualización en el Análisis de Datos\n\n\n19 min\n\n\n\nggplot2\n\n\ndata-visualization\n\n\nspanish\n\n\n\n\nJul 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulating and watching autoregressive processes\n\n\n12 min\n\n\n\nminipost\n\n\nstats\n\n\nhighcharts\n\n\nhighcharter\n\n\ntime-series\n\n\ndata-visualization\n\n\n\n\nJun 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegression, ANOVA, t-test are related…\n\n\n1 min\n\n\n\nminipost\n\n\nstats\n\n\ndont-forget\n\n\n\n\nJun 8, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing emoji with highcharter and highcharts\n\n\n3 min\n\n\n\ntwitter\n\n\nminipost\n\n\nhighcharts\n\n\nhighcharter\n\n\n\n\nJan 10, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMinimalistic toolptips with highcharter/highcharts\n\n\n2 min\n\n\n\nminipost\n\n\nhighcharts\n\n\nhighcharter\n\n\n\n\nJan 7, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFavorite and retweets counts from @year_progress account\n\n\n5 min\n\n\n\ntwitter\n\n\nminipost\n\n\nhighcharts\n\n\nhighcharter\n\n\n\n\nJan 6, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvalueBoxes and Sparklines\n\n\n16 min\n\n\n\nshiny\n\n\nhighcharts\n\n\nhighcharter\n\n\nhtmlwidgets\n\n\n\n\nJun 29, 2020\n\n\n\n\n\n\n\n\n\n\n\n\nThe tale of two charts combined\n\n\n9 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\n\n\nJun 24, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n30diasdegraficos Parte 3\n\n\n12 min\n\n\n\nspanish\n\n\nhighcharts\n\n\ndata-visualization\n\n\nggplot2\n\n\n\n\nJun 2, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n30diasdegraficos Parte 2\n\n\n27 min\n\n\n\nspanish\n\n\nhighcharts\n\n\ndata-visualization\n\n\nggplot2\n\n\n\n\nMay 22, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n30diasdegraficos Parte 1\n\n\n20 min\n\n\n\nspanish\n\n\nhighcharts\n\n\ndata-visualization\n\n\nggplot2\n\n\n\n\nMay 12, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGOT Animating the Shifting of Affiliations\n\n\n9 min\n\n\n\ndata-visualization\n\n\nggplot2\n\n\nanimation\n\n\n\n\nApr 23, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen charts are integrated in the web page\n\n\n3 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\n\n\nApr 8, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing tooltips in unexpected ways\n\n\n3 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\n\n\nFeb 4, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiving a Thematic Touch to your Interactive Chart\n\n\n7 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\n\n\nMar 3, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThematic Interactive Map\n\n\n4 min\n\n\n\nmaps\n\n\ndata-visualization\n\n\nhighcharts\n\n\nminipost\n\n\n\n\nJan 20, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive and Styled Middle Earth Map\n\n\n4 min\n\n\n\nmaps\n\n\nhighcharts\n\n\n\n\nDec 15, 2016\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReplicating NYT Weather App\n\n\n6 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\n\n\nDec 2, 2016\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding motion to choropleths\n\n\n2 min\n\n\n\nmaps\n\n\nhighcharts\n\n\nanimation\n\n\n\n\nApr 12, 2016\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to: Weather Radials\n\n\n4 min\n\n\n\ndata-visualization\n\n\nhighcharts\n\n\nggplot2\n\n\nminipost\n\n\n\n\nMar 24, 2016\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing Chess Data With ggplot\n\n\n13 min\n\n\n\ndata-visualization\n\n\nggplot2\n\n\nchess\n\n\n\n\nOct 30, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrchess a Chess Package for R\n\n\n2 min\n\n\n\npackage\n\n\nhtmlwidgets\n\n\nchess\n\n\n\n\nOct 7, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing sort algorithms with ggplot2\n\n\n5 min\n\n\n\nggplot2\n\n\ndata-visualization\n\n\n\n\nSep 25, 2015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto post example\n\n\n2 min\n\n\n\ntesting\n\n\ndont-forget\n\n\n\n\nJan 1, 2000\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2000-01-01-quarto-post-example/index.html",
    "href": "posts/2000-01-01-quarto-post-example/index.html",
    "title": "Quarto post example",
    "section": "",
    "text": "Titles in the main are with ##: Yes, the <h1> title is of the first/main title.\nThis is a link. Another link is https://github.com/quarto-dev/quarto-cli"
  },
  {
    "objectID": "posts/2000-01-01-quarto-post-example/index.html#testing-htmlwidgets",
    "href": "posts/2000-01-01-quarto-post-example/index.html#testing-htmlwidgets",
    "title": "Quarto post example",
    "section": "Testing htmlwidgets",
    "text": "Testing htmlwidgets\n\nCode```{r}\nlibrary(highcharter)\nlibrary(palmerpenguins)\n\nhc <- hchart(\n  penguins, \n  \"point\", \n  hcaes(bill_length_mm, bill_depth_mm, group = species)\n  )\n\nhc\n```"
  },
  {
    "objectID": "posts/2000-01-01-quarto-post-example/index.html#types-of-column",
    "href": "posts/2000-01-01-quarto-post-example/index.html#types-of-column",
    "title": "Quarto post example",
    "section": "Types of column",
    "text": "Types of column\nMore info in https://quarto.org/docs/authoring/article-layout.html\nHow to use: In the chunk specify with column argument.\n#| column: page\nNow, list of main column types.\n\n.column-body\n\n\n.column-body-outset\n\n\n.column-page\n\n\n.column-page-inset\n\n\n.column-screen\n\n\n.column-screen-inset\n\n\n.column-screen-inset-shaded"
  },
  {
    "objectID": "posts/2000-01-01-quarto-post-example/index.html#figures",
    "href": "posts/2000-01-01-quarto-post-example/index.html#figures",
    "title": "Quarto post example",
    "section": "Figures",
    "text": "Figures\nAccording to https://r4ds.hadley.nz/quarto.html#sec-figures:\n\nCode```{r}\nlibrary(ggplot2)\nlibrary(ggforce)\n\np <- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  # geom_smooth(aes(color = species), method = \"lm\") +\n  geom_mark_hull(\n    aes(filter = species == \"Gentoo\", label = species),\n    description = \"A species with long flippers\",\n    color = \"gray95\",\n    fill = \"gray80\",\n    concavity = 4,\n    size = 20\n  ) +\n  geom_point(aes(fill = species), color = \"gray80\", size = 3, shape = 21) +\n  scale_fill_viridis_d(option = \"B\", begin = 0.1, end = 0.9) +\n  # scale_color_viridis_d(option = \"B\", begin = 0.1, end = 0.9) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\",\n    y = \"Bill length (mm)\",\n    fill = \"Penguin species\",\n    captions = \"Source: https://allisonhorst.github.io/palmerpenguins/\" \n  )\n\np\n```\n\n\n\n\n\nCode```{r}\n#| fig-width: 6\n#| out-width: \"100%\"\n#| fig-asp: 0.618\n#| column: body-outset\np\n```\n\n\n\n\n\nCode```{r}\n#| out-width: \"100%\"\n#| fig-align: \"center\"\n#| column: body-outset\np\n```\n\n\n\n\n\n\n\n\nCode```{r}\n#| out-width: \"100%\"\n#| fig-align: \"center\"\n#| column: page\np + theme_minimal(base_size = 7)\n```"
  },
  {
    "objectID": "posts/2000-01-01-quarto-post-example/index.html#marging-content",
    "href": "posts/2000-01-01-quarto-post-example/index.html#marging-content",
    "title": "Quarto post example",
    "section": "Marging content",
    "text": "Marging content\nContent in the right:\n\nCode```{r, out.height=300}\n#| column: margin\n# This will be in margin so make points smaller\n# #| column: margin\n# out.height=300\nhc |> \n  hc_plotOptions(\n   scatter = list(showInLegend = FALSE, marker = list(radius = 2)) \n  )\n```\n\n\n\n\n\n\n\n\n\n\n.column-margin"
  },
  {
    "objectID": "posts/2015-09-25-visualizing-sort-algorithms-with-ggplot2/index.html",
    "href": "posts/2015-09-25-visualizing-sort-algorithms-with-ggplot2/index.html",
    "title": "Visualizing sort algorithms with ggplot2",
    "section": "",
    "text": "Have you read Visualizing Algorithms by Mike Bostock? It’s a pure gold post. In that post Mike show a static representation of a sort algorithm and obvious it will fun to replicate that image with ggplot2 so here we go.\nWe need some sorts algorithms. In this link you can see some algorithms.\nWe start with Insertion sort:\n\nCodelibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(viridis)\n\ntheme_set(theme_void())\n\ninsertion_sort_steps <- function(x  = sample(1:15)){\n  \n  msteps <- matrix(data = x, ncol = length(x))\n  \n  for (i in 2:length(x)) {\n    \n    j <- i\n    \n    while ((j > 1) && (x[j] < x[j - 1])) {\n      \n      temp <- x[j]\n      x[j] <- x[j - 1]\n      x[j - 1] <- temp\n      j <- j - 1\n      \n      msteps <- rbind(msteps, as.vector(x))\n      \n    }\n  }\n  \n  msteps\n  \n}\n\n\nNow to test it and see what the function do:\n\nCodeset.seed(12345)\n\nx <- sample(seq(4))\n\nx\n\n[1] 2 3 4 1\n\nCodemsteps <- insertion_sort_steps(x)\n\nas.data.frame(msteps)\n\n  V1 V2 V3 V4\n1  2  3  4  1\n2  2  3  1  4\n3  2  1  3  4\n4  1  2  3  4\n\n\nEvery row is a step in sort the algorithm (a partial sort). This matrix is a hard to plot so we need a nicer structure. We can transform the matrix to a data_frame with the information of every position of every element in each step.\n\nCodesort_matix_to_df <- function(msteps){\n  \n  df <- as.data.frame(msteps, row.names = NULL)\n  \n  names(df) <- seq(ncol(msteps))\n  \n  df_steps <- df %>%\n    tbl_df() %>% \n    mutate(step = seq(nrow(.))) %>% \n    gather(position, element, -step) %>%\n    arrange(step)\n  \n  df_steps\n  \n}\n\n\nAnd we apply this function to the previous steps matrix.\n\nCodedf_steps <- sort_matix_to_df(msteps)\n\nhead(df_steps, 10)\n\n# A tibble: 10 × 3\n    step position element\n   <int> <chr>      <int>\n 1     1 1              2\n 2     1 2              3\n 3     1 3              4\n 4     1 4              1\n 5     2 1              2\n 6     2 2              3\n 7     2 3              1\n 8     2 4              4\n 9     3 1              2\n10     3 2              1\n\n\nThe next step will be plot the data frame.\n\nCodeplot_sort <- function(df_steps, size = 5, color.low = \"#D1F0E1\", color.high = \"#524BB4\"){\n  \n  ggplot(df_steps,\n         aes(step, position, group = element, color = element, label = element)) +  \n    geom_path(size = size, alpha = 1, lineend = \"round\") +\n    scale_colour_gradient(low = color.low, high = color.high) +\n    coord_flip() + \n    scale_x_reverse() + \n    theme(legend.position = \"none\")\n  \n}\n\n\nNow compare this:\n\nCodeas.data.frame(msteps)\n\n  V1 V2 V3 V4\n1  2  3  4  1\n2  2  3  1  4\n3  2  1  3  4\n4  1  2  3  4\n\n\nWith:\n\nCodeplot_sort(df_steps, size = 6) + \n  geom_text(color = \"white\", size = 4)\n\n\n\n\nIt works, so we can now scroll!\n\nCodesample(seq(50)) %>% \n  insertion_sort_steps() %>% \n  sort_matix_to_df() %>% \n  plot_sort(size = 2.0)\n\n\n\n\nNow try with other sort algorithms:\nBubble sort:\n\nCodebubble_sort_steps <- function(x = sample(1:15)){\n  \n  msteps <- matrix(data = x, ncol = length(x))\n  \n  for (i in 1:(length(x) - 1)) {\n    \n    for (j in 1:(length(x) - 1)) {\n      \n      if (x[j] > x[j + 1]) {\n        temp <- x[j]\n        x[j] <- x[j + 1]\n        x[j + 1] <- temp\n      }\n      \n      msteps <- rbind(msteps, as.vector(x))\n      \n    }\n  }\n  \n  msteps\n  \n}\n\n\nSelection sort:\n\nCodeselection_sort_steps <- function(x = sample(1:15)){\n  \n  msteps <- matrix(data = x, ncol = length(x))\n  \n  for (i in 1:(length(x) - 1)) {\n    \n    smallsub <- i\n    \n    for (j in (i + 1):(length(x) - 0)) { # Is not '- 1' like website\n      \n      if (x[j] < x[smallsub]) {\n        smallsub <- j\n      }\n    }\n    \n    temp <- x[i]\n    x[i] <- x[smallsub]\n    x[smallsub] <- temp\n    \n    msteps <- rbind(msteps, as.vector(x))\n    \n  }\n  \n  msteps\n  \n}\n\n\nNow test with a longer vector:\n\nCoden <- 50\nx <- sample(seq(n))\n\nbig_df <- rbind(\n  x %>% selection_sort_steps() %>% sort_matix_to_df() %>% mutate(sort = \"Selection Sort\"),  \n  x %>% insertion_sort_steps() %>% sort_matix_to_df() %>% mutate(sort = \"Insertion Sort\"),\n  x %>% bubble_sort_steps() %>% sort_matix_to_df() %>% mutate(sort = \"Bubble Sort\")\n)\n\nhead(big_df)\n\n# A tibble: 6 × 4\n   step position element sort          \n  <int> <chr>      <int> <chr>         \n1     1 1             10 Selection Sort\n2     1 2             43 Selection Sort\n3     1 3             27 Selection Sort\n4     1 4             34 Selection Sort\n5     1 5             44 Selection Sort\n6     1 6             35 Selection Sort\n\nCodebig_df %>%\n  group_by(sort) %>% \n  summarise(steps = n())\n\n# A tibble: 3 × 2\n  sort            steps\n  <chr>           <int>\n1 Bubble Sort    120100\n2 Insertion Sort  32100\n3 Selection Sort   2500\n\n\n\nCodeggplot(\n  big_df,\n  aes(step, position, group = element, color = element, label = element)\n  ) +  \n  geom_path(size = 0.8, alpha = 1, lineend = \"round\") +\n  scale_colour_gradient(low = \"#c21500\", high = \"#ffc500\") + # http://uigradients.com/#Kyoto\n  facet_wrap(~sort, scales = \"free_x\", ncol = 1) +\n  theme(\n    legend.position = \"none\",\n    strip.background = element_rect(fill = \"transparent\", linetype = 0),\n    strip.text = element_text(size = 8)\n    )\n\n\n\n\nOr we can plot vertically using the viridis palette from the viridis package :\n\nCodeggplot(\n  big_df,\n  aes(position, step, group = element, color = element, label = element)\n  ) +  \n  geom_path(size = 1, alpha = 1, lineend = \"round\") +\n  scale_colour_gradientn(colours = viridis_pal()(n)) +\n  facet_wrap(~sort, scales = \"free_y\", nrow = 1) +\n  scale_y_reverse() +\n  theme(\n    legend.position = \"none\",\n    strip.background = element_rect(fill = \"transparent\", linetype = 0),\n    strip.text = element_text(size = 8)\n    )\n\n\n\n\nAnd that’s it. If you write/implement another sort algorithm in this way let me know to view it ;).\nReferences:\n\nhttp://bost.ocks.org/mike/algorithms/\nhttp://faculty.cs.niu.edu/~hutchins/csci230/sorting.htm\nhttp://corte.si/posts/code/visualisingsorting/\nhttp://uigradients.com/#Kyoto\nhttp://algs4.cs.princeton.edu/21elementary/\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{kunstfuentes2015,\n  author = {Joshua Kunst Fuentes},\n  title = {Visualizing Sort Algorithms with Ggplot2},\n  date = {2015-09-25},\n  url = {https://jkunst.com/blog/posts/2015-09-25-visualizing-sort-algorithms-with-ggplot2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nJoshua Kunst Fuentes. 2015. “Visualizing Sort Algorithms with\nGgplot2.” September 25, 2015. https://jkunst.com/blog/posts/2015-09-25-visualizing-sort-algorithms-with-ggplot2."
  },
  {
    "objectID": "posts/2015-10-07-rchess-a-chess-package-for-r/index.html",
    "href": "posts/2015-10-07-rchess-a-chess-package-for-r/index.html",
    "title": "rchess a Chess Package for R",
    "section": "",
    "text": "A long time ago I wonder for some R package for chess. Python, JS, Java, C have chess libraries, why R not? But then the htmlwidgets and V8 packages were born and now possibilities are almost endless. Anyone can make a wrapper for a JS library :D. And this is how rchess came out.\nThe rchess package is a chess move, generation, validator; piece placement, movement, and check/checkmate/stalemate detection. All this powered by V8 package and chessjs javascript library.\nThe main parts about this package are:\n\nV8 package and chessjs javascript library. So this is not about performance but have the things done (just like Just @hrbrmstr saids).\nR6 package for the OO system.\nhtmlwidgets package and chessboardjs javascript library.\n\nNow let’s take a look what this package can do.\n\n\nCode\n# install.packages(\"rchess\")\n# remotes::install_github(\"jbkunst/rchess\")\nlibrary(rchess)\nchss &lt;- Chess$new()\n\nplot(chss)\n\n\n\n\n\n\nWHOA chessboardjs have a nice look. Right?\nThe basic usage is the same as the chessjs api. I’m just implemented only the calls to this api. Anyway, to see the possibles moves you can use the moves method and if you make a move use the move function.\n\n\nCode\nchss$moves()\n\n\n [1] \"a3\"  \"a4\"  \"b3\"  \"b4\"  \"c3\"  \"c4\"  \"d3\"  \"d4\"  \"e3\"  \"e4\"  \"f3\"  \"f4\" \n[13] \"g3\"  \"g4\"  \"h3\"  \"h4\"  \"Na3\" \"Nc3\" \"Nf3\" \"Nh3\"\n\n\nCode\nchss$moves(verbose = TRUE)\n\n\n# A tibble: 20 × 6\n   color from  to    flags piece san  \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 w     a2    a3    n     p     a3   \n 2 w     a2    a4    b     p     a4   \n 3 w     b2    b3    n     p     b3   \n 4 w     b2    b4    b     p     b4   \n 5 w     c2    c3    n     p     c3   \n 6 w     c2    c4    b     p     c4   \n 7 w     d2    d3    n     p     d3   \n 8 w     d2    d4    b     p     d4   \n 9 w     e2    e3    n     p     e3   \n10 w     e2    e4    b     p     e4   \n11 w     f2    f3    n     p     f3   \n12 w     f2    f4    b     p     f4   \n13 w     g2    g3    n     p     g3   \n14 w     g2    g4    b     p     g4   \n15 w     h2    h3    n     p     h3   \n16 w     h2    h4    b     p     h4   \n17 w     b1    a3    n     n     Na3  \n18 w     b1    c3    n     n     Nc3  \n19 w     g1    f3    n     n     Nf3  \n20 w     g1    h3    n     n     Nh3  \n\n\nCode\nchss$move(\"a3\")\n\n\nWe can also concate moves, see who plays in the next turn, see the history, etc.:\n\n\nCode\nchss$move(\"e5\")$move(\"f4\")$move(\"Qe7\")$move(\"fxe5\")\n\nplot(chss)\n\n\n\n\n\n\n\n\nCode\nchss$turn()\n\n\n[1] \"b\"\n\n\nCode\nchss$history(verbose = TRUE)\n\n\n# A tibble: 5 × 8\n  color from  to    flags piece san   captured number_move\n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;int&gt;\n1 w     a2    a3    n     p     a3    &lt;NA&gt;               1\n2 b     e7    e5    b     p     e5    &lt;NA&gt;               2\n3 w     f2    f4    b     p     f4    &lt;NA&gt;               3\n4 b     d8    e7    n     q     Qe7   &lt;NA&gt;               4\n5 w     f4    e5    c     p     fxe5  p                  5\n\n\nCode\nchss$history()\n\n\n[1] \"a3\"   \"e5\"   \"f4\"   \"Qe7\"  \"fxe5\"\n\n\nA must have funcionality is load games from PGN and FEN notations:\n\n\nCode\nchssfen &lt;- Chess$new()\n \nfen &lt;- \"rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2\"\n \nchssfen$load(fen)\n\n\n[1] TRUE\n\n\n(Shh you can also plot the chesboard with ggplot. I know I need change that unicode style pieces ;) ).\n\n\nCode\nplot(chssfen, type = \"ggplot\")\n\n\n\n\n\n\n\n\n\nNow load PGN string:\n\n\nCode\npgn &lt;- system.file(\"extdata/pgn/kasparov_vs_topalov.pgn\", package = \"rchess\")\npgn &lt;- readLines(pgn, warn = FALSE)\npgn &lt;- paste(pgn, collapse = \"\\n\")\n\nchsspgn &lt;- Chess$new()\n\nchsspgn$load_pgn(pgn)\n\n\n[1] TRUE\n\n\nCode\ncat(chsspgn$pgn())\n\n\n[Event \"Hoogovens A Tournament\"]\n[Site \"Wijk aan Zee NED\"]\n[Date \"1999.01.20\"]\n[EventDate \"?\"]\n[Round \"4\"]\n[Result \"1-0\"]\n[White \"Garry Kasparov\"]\n[Black \"Veselin Topalov\"]\n[ECO \"B06\"]\n[WhiteElo \"2812\"]\n[BlackElo \"2700\"]\n[PlyCount \"87\"]\n\n1. e4 d6 2. d4 Nf6 3. Nc3 g6 4. Be3 Bg7 5. Qd2 c6 6. f3 b5\n7. Nge2 Nbd7 8. Bh6 Bxh6 9. Qxh6 Bb7 10. a3 e5 11. O-O-O Qe7\n12. Kb1 a6 13. Nc1 O-O-O 14. Nb3 exd4 15. Rxd4 c5 16. Rd1 Nb6\n17. g3 Kb8 18. Na5 Ba8 19. Bh3 d5 20. Qf4+ Ka7 21. Rhe1 d4\n22. Nd5 Nbxd5 23. exd5 Qd6 24. Rxd4 cxd4 25. Re7+ Kb6\n26. Qxd4+ Kxa5 27. b4+ Ka4 28. Qc3 Qxd5 29. Ra7 Bb7\n30. Rxb7 Qc4 31. Qxf6 Kxa3 32. Qxa6+ Kxb4 33. c3+ Kxc3\n34. Qa1+ Kd2 35. Qb2+ Kd1 36. Bf1 Rd2 37. Rd7 Rxd7\n38. Bxc4 bxc4 39. Qxh8 Rd3 40. Qa8 c3 41. Qa4+ Ke1 42. f4 f5\n43. Kc1 Rd2 44. Qa7 1-0\n\n\nCode\nhead(chsspgn$history(verbose = TRUE), 20)\n\n\n# A tibble: 20 × 8\n   color from  to    flags piece san   captured number_move\n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;int&gt;\n 1 w     e2    e4    b     p     e4    &lt;NA&gt;               1\n 2 b     d7    d6    n     p     d6    &lt;NA&gt;               2\n 3 w     d2    d4    b     p     d4    &lt;NA&gt;               3\n 4 b     g8    f6    n     n     Nf6   &lt;NA&gt;               4\n 5 w     b1    c3    n     n     Nc3   &lt;NA&gt;               5\n 6 b     g7    g6    n     p     g6    &lt;NA&gt;               6\n 7 w     c1    e3    n     b     Be3   &lt;NA&gt;               7\n 8 b     f8    g7    n     b     Bg7   &lt;NA&gt;               8\n 9 w     d1    d2    n     q     Qd2   &lt;NA&gt;               9\n10 b     c7    c6    n     p     c6    &lt;NA&gt;              10\n11 w     f2    f3    n     p     f3    &lt;NA&gt;              11\n12 b     b7    b5    b     p     b5    &lt;NA&gt;              12\n13 w     g1    e2    n     n     Nge2  &lt;NA&gt;              13\n14 b     b8    d7    n     n     Nbd7  &lt;NA&gt;              14\n15 w     e3    h6    n     b     Bh6   &lt;NA&gt;              15\n16 b     g7    h6    c     b     Bxh6  b                 16\n17 w     d2    h6    c     q     Qxh6  b                 17\n18 b     c8    b7    n     b     Bb7   &lt;NA&gt;              18\n19 w     a2    a3    n     p     a3    &lt;NA&gt;              19\n20 b     e7    e5    b     p     e5    &lt;NA&gt;              20\n\n\nCode\nplot(chsspgn)\n\n\n\n\n\n\nAnd that’s it. If you want to check more funcionalities check the github repository or this document.\nBye mate!\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{kunst fuentes2015,\n  author = {Kunst Fuentes, Joshua},\n  title = {Rchess a {Chess} {Package} for {R}},\n  date = {2015-10-07},\n  url = {https://jkunst.com/blog/posts/2015-10-07-rchess-a-chess-package-for-r},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nKunst Fuentes, Joshua. 2015. “Rchess a Chess Package for\nR.” October 7, 2015. https://jkunst.com/blog/posts/2015-10-07-rchess-a-chess-package-for-r."
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html",
    "title": "Visualizing Chess Data With ggplot",
    "section": "",
    "text": "There are nice visualizations from chess data: piece movement, piece survaviliy, square usage by player, etc. Sadly not always the authors shows the code/data for replicate the final result. So I wrote some code to show how to do some this great visualizations entirely in R. Just for fun."
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#the-data",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#the-data",
    "title": "Visualizing Chess Data With ggplot",
    "section": "The Data",
    "text": "The Data\nThe original data come from here which was parsed and stored in the rchess package.\n\nCodelibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(rchess)\n\ntheme_set(\n  theme_void(base_family = \"Segoe UI\") + \n    theme(legend.position = \"none\")\n  )\n\ndata(chesswc)\n\nchesswc\n\n# A tibble: 1,266 × 11\n   event   site  date       round white black result white…¹ black…² eco   pgn  \n   <chr>   <chr> <date>     <dbl> <chr> <chr> <chr>    <int>   <int> <chr> <chr>\n 1 FIDE W… Khan… 2011-08-28   1.1 Kaab… Karj… 0-1       2344    2788 D15   1. d…\n 2 FIDE W… Khan… 2011-08-28   1.1 Ivan… Stee… 1-0       2768    2362 E68   1. c…\n 3 FIDE W… Khan… 2011-08-28   1.1 Ibra… Mame… 0-1       2402    2765 E67   1. N…\n 4 FIDE W… Khan… 2011-08-28   1.1 Pono… Gwaz… 1-0       2764    2434 B40   1. e…\n 5 FIDE W… Khan… 2011-08-28   1.1 Hans… Gash… 0-1       2449    2760 A61   1. d…\n 6 FIDE W… Khan… 2011-08-28   1.1 Gris… Genb… 1-0       2746    2452 D37   1. d…\n 7 FIDE W… Khan… 2011-08-28   1.1 De L… Radj… 0-1       2477    2744 B30   1. e…\n 8 FIDE W… Khan… 2011-08-28   1.1 Kams… Di B… 1-0       2741    2480 B90   1. e…\n 9 FIDE W… Khan… 2011-08-28   1.1 Lima… Svid… 1/2-1…    2493    2739 D85   1. d…\n10 FIDE W… Khan… 2011-08-28   1.1 Jako… Sale… 1-0       2736    2493 B69   1. e…\n# … with 1,256 more rows, and abbreviated variable names ¹​whiteelo, ²​blackelo\n\nCodechesswc %>% \n  count(event)\n\n# A tibble: 3 × 2\n  event                   n\n  <chr>               <int>\n1 FIDE World Cup 2011   398\n2 FIDE World Cup 2013   435\n3 FIDE World Cup 2015   433\n\nCodechesswc <- chesswc %>% \n  filter(event == \"FIDE World Cup 2015\")\n\n\nThe most important variable here is the pgn game. This pgn is a long string which represent the game. However this format is not so visualization friendly. That’s why I implemented the history_detail() method for a Chess object. Let’s check.\n\nCodeset.seed(123)\npgn <- sample(chesswc$pgn, size = 1)\nstr_sub(pgn, 0, 50)\n\n[1] \"1. d4 Nf6 2. c4 e6 3. Nc3 Bb4 4. Nf3 b6 5. g3 Bb7 \"\n\n\nCompare the previous string with the first 10 rows of the history_detail()\n\nCodechss <- Chess$new()\nchss$load_pgn(pgn)\n\n[1] TRUE\n\nCodechss$history_detail() %>%\n  arrange(number_move)\n\n# A tibble: 178 × 8\n   piece     from  to    number_move piece_number_move status    numbe…¹ captu…²\n   <chr>     <chr> <chr>       <int>             <int> <chr>       <int> <chr>  \n 1 d2 Pawn   d2    d4              1                 1 <NA>           NA <NA>   \n 2 g8 Knight g8    f6              2                 1 <NA>           NA <NA>   \n 3 c2 Pawn   c2    c4              3                 1 game over      NA <NA>   \n 4 e7 Pawn   e7    e6              4                 1 <NA>           NA <NA>   \n 5 b1 Knight b1    c3              5                 1 captured       12 f8 Bis…\n 6 f8 Bishop f8    b4              6                 1 <NA>           NA <NA>   \n 7 g1 Knight g1    f3              7                 1 <NA>           NA <NA>   \n 8 b7 Pawn   b7    b6              8                 1 game over      NA <NA>   \n 9 g2 Pawn   g2    g3              9                 1 <NA>           NA <NA>   \n10 c8 Bishop c8    b7             10                 1 <NA>           NA <NA>   \n# … with 168 more rows, and abbreviated variable names ¹​number_move_capture,\n#   ²​captured_by\n\n\nThe result is a dataframe where each row is a piece’s movement showing explicitly the cells where the travel in a particular number move. Now we apply this function over the 433 games in the FIDE World Cup 2015.\n\nCodechesswc <- chesswc %>%\n  mutate(game_id = row_number())\n\nlibrary(furrr)\nplan(multisession, workers = 4)\n\ndfmoves <- chesswc %>% \n  select(game_id, pgn) %>% \n  mutate(\n    data = future_map(pgn, function(p) {\n      chss <- Chess$new()\n      chss$load_pgn(p)\n      chss$history_detail()\n    })\n  ) %>% select(-pgn) %>% \n  unnest()\n\n# library(doParallel)\n# workers <- makeCluster(parallel::detectCores())\n# registerDoParallel(workers)\n# moves <- plyr::llply(chesswc %>% pull(pgn), function(p) {\n#   chss <- Chess$new()\n#   chss$load_pgn(p)\n#   chss$history_detail()\n#   },  .parallel = TRUE, .paropts = list(.packages = c(\"rchess\")))\n\ndfmoves\n\n# A tibble: 41,731 × 9\n   game_id piece     from  to    number_move piece_numb…¹ status numbe…² captu…³\n     <int> <chr>     <chr> <chr>       <int>        <int> <chr>    <int> <chr>  \n 1       1 a1 Rook   a1    c1             57            1 <NA>        NA <NA>   \n 2       1 a1 Rook   c1    h1             65            2 <NA>        NA <NA>   \n 3       1 a1 Rook   h1    h5             73            3 <NA>        NA <NA>   \n 4       1 a1 Rook   h5    h7             89            4 <NA>        NA <NA>   \n 5       1 a1 Rook   h7    e7             95            5 captu…      96 Black …\n 6       1 b1 Knight b1    d2             13            1 <NA>        NA <NA>   \n 7       1 b1 Knight d2    f1             69            2 <NA>        NA <NA>   \n 8       1 b1 Knight f1    e3             75            3 captu…      76 g8 Kni…\n 9       1 c1 Bishop c1    b2             31            1 <NA>        NA <NA>   \n10       1 c1 Bishop b2    c1             87            2 game …      NA <NA>   \n# … with 41,721 more rows, and abbreviated variable names ¹​piece_number_move,\n#   ²​number_move_capture, ³​captured_by\n\n\nThe dfmoves data frame will be the heart from all these plots due have a lot of information and it is easy to consume."
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#piece-movements",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#piece-movements",
    "title": "Visualizing Chess Data With ggplot",
    "section": "Piece Movements",
    "text": "Piece Movements\nTo try replicate the result it’s necessary the data to represent (and then plot) the board. In the rchess package there are some helper functions like chessboardata().\n\nCodedfboard <- rchess:::.chessboarddata() %>%\n  select(cell, col, row, x, y, cc)\n\ndfboard\n\n# A tibble: 64 × 6\n   cell  col     row     x     y cc   \n   <chr> <chr> <int> <int> <int> <chr>\n 1 a1    a         1     1     1 b    \n 2 b1    b         1     2     1 w    \n 3 c1    c         1     3     1 b    \n 4 d1    d         1     4     1 w    \n 5 e1    e         1     5     1 b    \n 6 f1    f         1     6     1 w    \n 7 g1    g         1     7     1 b    \n 8 h1    h         1     8     1 w    \n 9 a2    a         2     1     2 w    \n10 b2    b         2     2     2 b    \n# … with 54 more rows\n\n\nNow we add this information to the dfmoves data frame and calculates some field to to know how to draw the curves (see here for more details).\n\nCodedfpaths <- dfmoves %>%\n  left_join(\n    dfboard %>% rename(from = cell, x.from = x, y.from = y),\n    by = \"from\"\n    ) %>%\n  left_join(\n    dfboard %>% rename(to = cell, x.to = x, y.to = y) %>% select(-cc, -col, -row),\n    by = \"to\"\n    ) %>%\n  mutate(\n    x_gt_y = abs(x.to - x.from) > abs(y.to - y.from),\n    xy_sign = sign((x.to - x.from)*(y.to - y.from)) == 1,\n    x_gt_y_equal_xy_sign = x_gt_y == xy_sign)\n\n\nThe data is ready! So we need now some ggplot, geom_tile for the board, the new geom_curve to represent the piece’s path and some jitter to make this more artistic. Let’s plot the f1 Bishop’s movements.\n\nCodepieces <- \"f1 Bishop\"\n\ndfpaths_piece <- dfpaths %>% \n  filter(piece == pieces)\n\nggplot() +\n  geom_tile(data = dfboard, aes(x, y, fill = cc)) +\n  geom_curve(\n    data = dfpaths_piece %>% filter(x_gt_y_equal_xy_sign),\n    aes(\n      x = x.from,\n      y = y.from,\n      xend = x.to,\n      yend = y.to\n    ),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = 0.50,\n    angle = -45,\n    alpha = 0.02,\n    color = \"white\",\n    size = 1.05\n  ) +\n  geom_curve(\n    data = dfpaths_piece %>% filter(!x_gt_y_equal_xy_sign),\n    aes(\n      x = x.from,\n      y = y.from,\n      xend = x.to,\n      yend = y.to\n    ),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = -0.50,\n    angle = 45,\n    alpha = 0.02,\n    color = \"white\",\n    size = 1.05\n  ) +\n  scale_fill_manual(values =  c(\"gray10\", \"gray20\")) +\n  ggtitle(\"f1 Bishop\") +\n  coord_equal()\n\n\n\n\nIn the same way we can plot every piece.\n\nCodepieces <- c(\"White Queen\",\n            \"h1 Rook\",\n            \"b8 Knight\",\n            \"g2 Pawn\",\n            \"c1 Bishop\",\n            \"f7 Pawn\")\n\ndfpaths_pieces <- dfpaths %>% \n  filter(piece %in% pieces)\n\nggplot() +\n  geom_tile(data = dfboard, aes(x, y, fill = cc)) +\n  geom_curve(\n    data = dfpaths_pieces %>% filter(x_gt_y_equal_xy_sign),\n    aes(\n      x = x.from,\n      y = y.from,\n      xend = x.to,\n      yend = y.to\n    ),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = 0.50,\n    angle = -45,\n    alpha = 0.02,\n    color = \"white\",\n    size = 1.05\n  ) +\n  geom_curve(\n    data = dfpaths_pieces %>% filter(!x_gt_y_equal_xy_sign),\n    aes(\n      x = x.from,\n      y = y.from,\n      xend = x.to,\n      yend = y.to\n    ),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = -0.50,\n    angle = 45,\n    alpha = 0.02,\n    color = \"white\",\n    size = 1.05\n  ) +\n  scale_fill_manual(values =  c(\"gray10\", \"gray20\")) +\n  coord_equal() +\n  facet_wrap(vars(piece), ncol = 3)\n\n\n\n\nI think it’s look very nice and similar to the original work made by Steve Tung."
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#survival-rates",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#survival-rates",
    "title": "Visualizing Chess Data With ggplot",
    "section": "Survival Rates",
    "text": "Survival Rates\nIn this plot we need filter dfmoves by !is.na(status) so we can know what happend with every piece in at the end of the game: if a piece was caputered of or not. Then get summary across all the games.\n\nCodedfsurvrates <- dfmoves %>%\n  filter(!is.na(status)) %>%\n  group_by(piece) %>%\n  summarize(\n    games = n(),\n    was_captured = sum(status == \"captured\")\n    ) %>%\n  mutate(surv_rate = 1 - was_captured/games)\n\ndfsurvrates %>%\n  arrange(desc(surv_rate))\n\n# A tibble: 32 × 4\n   piece      games was_captured surv_rate\n   <chr>      <int>        <int>     <dbl>\n 1 Black King   433            0     1    \n 2 White King   433            0     1    \n 3 h2 Pawn      433          121     0.721\n 4 h7 Pawn      433          148     0.658\n 5 g2 Pawn      433          150     0.654\n 6 g7 Pawn      433          160     0.630\n 7 f2 Pawn      433          178     0.589\n 8 a2 Pawn      433          183     0.577\n 9 a7 Pawn      433          185     0.573\n10 f7 Pawn      433          185     0.573\n# … with 22 more rows\n\n\nThis helps as validation because the kings are never captured. Now we use a helper function in the rchess package rchess:::.chesspiecedata() to get the start position for every piece and then plot the survival rates in the cell where the piece start in the game.\n\nCodedfsurvrates <- dfsurvrates %>%\n  left_join(rchess:::.chesspiecedata() %>% select(start_position, piece = name, color, unicode),\n            by = \"piece\") %>%\n  full_join(dfboard %>% rename(start_position = cell),\n            by = \"start_position\")\n\n# Auxiliar data to plot the board\ndfboard2 <- data_frame(x = 0:8 + 0.5, y = 0 + 0.5, xend = 0:8 + 0.5, yend = 8 + 0.5)\n\nggplot(dfsurvrates) +\n  geom_tile(data = dfsurvrates %>% filter(!is.na(surv_rate)),\n            aes(x, y, fill = surv_rate)) +\n  scale_fill_gradient(low = \"darkred\",  high = \"white\") +\n  geom_text(data = dfsurvrates %>% filter(!is.na(surv_rate)),\n            aes(x, y, label = scales::percent(surv_rate)),\n            color = \"gray70\", size = 3) +\n  scale_x_continuous(breaks = 1:8, labels = letters[1:8]) +\n  scale_y_continuous(breaks = 1:8, labels = 1:8)  +\n  geom_segment(data = dfboard2, aes(x, y, xend = xend, yend = yend), color = \"gray70\") +\n  geom_segment(data = dfboard2, aes(y, x, xend = yend, yend = xend), color = \"gray70\") +\n  ggtitle(\"Survival Rates for each piece\") + \n  coord_equal() + \n  theme(legend.position = \"none\")\n\n\n\n\nObviously the plot show same data in text and color, and there a lot of space without information but the idea is use the chess board to represent the initial position in a chess game.\nWe can replace the texts with the piece’s icons:\n\nCodeggplot(dfsurvrates) +\n  geom_tile(data = dfsurvrates %>% filter(!is.na(surv_rate)),\n            aes(x, y, fill = 100*surv_rate)) +\n  scale_fill_gradient(NULL, low = \"darkred\",  high = \"white\") +\n  geom_text(data = dfsurvrates %>% filter(!is.na(surv_rate)),\n            aes(x, y, label = unicode), size = 11, color = \"gray20\", alpha = 0.7) +\n  scale_x_continuous(breaks = 1:8, labels = letters[1:8]) +\n  scale_y_continuous(breaks = 1:8, labels = 1:8)  +\n  geom_segment(data = dfboard2, aes(x, y, xend = xend, yend = yend), color = \"gray70\") +\n  geom_segment(data = dfboard2, aes(y, x, xend = yend, yend = xend), color = \"gray70\") +\n  ggtitle(\"Survival Rates for each piece\") + \n  coord_equal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#square-usage-by-player",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#square-usage-by-player",
    "title": "Visualizing Chess Data With ggplot",
    "section": "Square Usage By Player",
    "text": "Square Usage By Player\nFor this visualization we will use the to variable. First of all we select the player who have more games in the table chesswc. Then for each of them get the to counts.\n\nCodeplayers <- chesswc %>% \n  count(white) %>% \n  arrange(desc(n)) %>%\n  pull(white) %>% \n  head(4)\n\nplayers\n\n[1] \"Karjakin, Sergey\" \"Svidler, Peter\"   \"Wei, Yi\"          \"Adams, Michael\"  \n\nCodedfmov_players <- map_df(players, function(p){ # p <- sample(players, size = 1)\n  games <- chesswc %>% filter(white == p) %>% .$game_id\n  dfres <- dfmoves %>%\n    filter(game_id %in% games, !is.na(to)) %>%\n    count(to) %>%\n    mutate(player = p,\n           p = n/length(games))\n  dfres\n})\n\ndfmov_players <- dfmov_players %>%\n  rename(cell = to) %>%\n  left_join(dfboard, by = \"cell\")\n\nggplot(dfmov_players) +\n  geom_tile(aes(x, row, fill = p)) +\n  scale_fill_gradient(\"Movements to every cell\\n(normalized by number of games)\",\n                      low = \"white\",  high = \"darkblue\") +\n  geom_text(aes(x, row, label = round(p, 1)), size = 2, color = \"white\", alpha = 0.5) +\n  facet_wrap(~player) +\n  scale_x_continuous(breaks = 1:8, labels = letters[1:8]) +\n  scale_y_continuous(breaks = 1:8, labels = 1:8)  +\n  geom_segment(data = dfboard2, aes(x, y, xend = xend, yend = yend), color = \"gray70\") +\n  geom_segment(data = dfboard2, aes(y, x, xend = yend, yend = xend), color = \"gray70\") +\n  coord_equal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#distributions-for-the-first-movement",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#distributions-for-the-first-movement",
    "title": "Visualizing Chess Data With ggplot",
    "section": "Distributions For The First Movement",
    "text": "Distributions For The First Movement\nNow, with the same data and using the piece_number_move and number_move we can obtain the distribution for the first movement for each piece.\n\nCodepiece_lvls <- rchess:::.chesspiecedata() %>%\n  mutate(col = str_extract(start_position, \"\\\\w{1}\"),\n         row = str_extract(start_position, \"\\\\d{1}\")) %>%\n  arrange(desc(row), col) %>%\n  pull(name)\n\ndfmoves_first_mvm <- dfmoves %>%\n  mutate(piece = factor(piece, levels = piece_lvls),\n         number_move_2 = ifelse(number_move %% 2 == 0, number_move/2, (number_move + 1)/2 )) %>%\n  filter(piece_number_move == 1)\n\nggplot(dfmoves_first_mvm) +\n  geom_density(aes(number_move_2), fill = \"#B71C1C\", alpha = 0.8, color = NA) +\n  scale_y_continuous(breaks = NULL) +\n  scale_x_continuous(breaks = c(0, 20, 40), limits = c(0, 40)) + \n  facet_wrap(~piece, nrow = 4, ncol = 8, scales = \"free_y\")  +\n  labs(x = \"Number Move\", y = \"Density\") +\n  theme_minimal(base_size = 7) +\n  theme(strip.text = element_text(hjust = 0))\n\n\n\n\nNotice the similarities between the White King and h1 Rook due the castling, the same effect is present between the Black King and the h8 Rook."
  },
  {
    "objectID": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#who-captures-whom",
    "href": "posts/2015-10-30-visualizing-chess-data-with-ggplot/index.html#who-captures-whom",
    "title": "Visualizing Chess Data With ggplot",
    "section": "Who Captures Whom",
    "text": "Who Captures Whom\nFor this plot we’ll use the igraph package and ForceAtlas2 package an R implementation by Adolfo Alvarez of the Force Atlas 2 graph layout designed for Gephi.\nWe get the rows with status == \"captured\" and summarize by piece and captured_by variables. The result data frame will be the edges in our igraph object using the graph.data.frame function.\n\nCodelibrary(igraph)\n\n# devtools::install_github(\"analyxcompany/ForceAtlas2\")\nlibrary(ForceAtlas2)\n\ndfcaputures <- dfmoves %>%\n  filter(status == \"captured\") %>%\n  count(captured_by, piece) %>%\n  ungroup() %>% \n  arrange(desc(n))\n\ndfvertices <- rchess:::.chesspiecedata() %>%\n  select(-fen, -start_position) %>%\n  mutate(name2 = str_replace(name, \" \\\\w+$\", unicode),\n         name2 = str_replace(name2, \"White|Black\", \"\"))\n\ng <- graph.data.frame(dfcaputures %>% select(captured_by, piece, weight = n),\n                      directed = TRUE,\n                      vertices = dfvertices)\n\nset.seed(123)\n# lout <- layout.kamada.kawai(g)\nlout <- layout.forceatlas2(g, iterations = 10000, plotstep = 0)\n\ndfvertices <- dfvertices %>%\n  mutate(x = lout[, 1], y = lout[, 2])\n\ndfedges <- as_data_frame(g, \"edges\") %>%\n  tbl_df() %>%\n  left_join(dfvertices %>% select(from = name, x, y), by = \"from\") %>%\n  left_join(dfvertices %>% select(to = name, xend = x, yend = y), by = \"to\")\n\n\nTo plot the the network I prefer use ggplot2 instead igraph just you get more control in the style and colors.\n\nCodeggplot() +\n  geom_curve(data = dfedges %>%\n               filter((str_extract(from, \"\\\\d+\") %in% c(1, 2) |\n                         str_detect(from, \"White\"))),\n             aes(x, y, xend = xend, yend = yend, alpha = weight, size = weight),\n             curvature = 0.1, color = \"red\") +\n  geom_curve(data = dfedges %>%\n               filter(!(str_extract(from, \"\\\\d+\") %in% c(1, 2) |\n                          str_detect(from, \"White\"))),\n             aes(x, y, xend = xend, yend = yend, alpha = weight, size = weight),\n             curvature = 0.1, color = \"blue\") +\n  scale_alpha(range = c(0.01, 0.5)) +\n  scale_size(range = c(0.01, 2)) +\n  geom_point(data = dfvertices, aes(x, y, color = color), size = 13, alpha = 0.9) +\n  scale_color_manual(values = c(\"gray10\", \"gray90\")) +\n  geom_text(data = dfvertices %>% filter(str_length(name2) != 1),\n            aes(x, y, label = name2), size = 5, color = \"gray50\") +\n  geom_text(data = dfvertices %>% filter(str_length(name2) == 1),\n            aes(x, y, label = name2), size = 5, color = \"gray50\") +\n  ggtitle(\"Red: white captures black | Blue: black captures white\") +\n  theme(legend.position = \"none\")\n\n\n\n\nIt’s know we usually exchange pieces with the same values: queen by queen, knight by bishop, etc. The interesting fact we see here is the d2 pawn/c7 pawn/g1 knight relationship because d2 pawn/c7 pawn is not so symmetrical and it’s explained by the popular use the Sicilian Opening in a master level (1.e4 c5 2.Nf3 d6 3.d4 cxd4 4.Nxd4).\nI hope you enjoyed this post in the same way I enjoyed doing it :D. If you notice a mistake please let me know."
  },
  {
    "objectID": "posts/2016-03-24-how-to-weather-radials/index.html",
    "href": "posts/2016-03-24-how-to-weather-radials/index.html",
    "title": "How to: Weather Radials",
    "section": "",
    "text": "I was surfing by the deep seas of the web and I found the Brice Pierre de la Briere’s blocks and I saw the weather radials which originally are a poster collection. Brice uses D3 and he used D3 very well and I love D3 but I’m in a rookie level to do something like him. D3 is not for everybody and surely not for me, I would love to lear more but family, work and R has priority over D3 so how can I do something like that. Well… We have R & highcharter. So let’s try.\nWe’ll use the same data as Brice https://www.wunderground.com/."
  },
  {
    "objectID": "posts/2016-03-24-how-to-weather-radials/index.html#first-try",
    "href": "posts/2016-03-24-how-to-weather-radials/index.html#first-try",
    "title": "How to: Weather Radials",
    "section": "First try",
    "text": "First try\nHere we test and chart the data in the most simple way. A line time.\n\nCodehighchart() %>%\n  hc_chart(type = \"line\") %>%\n  hc_xAxis(\n    type = \"datetime\",\n    tickInterval = 30 * 24 * 3600 * 1000,\n    labels = list(format = \"{value: %b}\")\n  ) %>%\n  hc_yAxis(min = 0,\n           labels = list(format = \"{value} C\")) %>%\n  hc_add_series(dsmax,\n                type = \"line\",\n                hcaes(tmstmp, max_temperaturec),\n                name = \"max\") %>%\n  hc_add_series(dsmin,\n                type = \"line\",\n                hcaes(tmstmp, min_temperaturec),\n                name = \"min\")\n\n\n\n\n\n\nEverything seems fine. We now a little bit about the data"
  },
  {
    "objectID": "posts/2016-03-24-how-to-weather-radials/index.html#to-polar-coordinates-and-columnrange",
    "href": "posts/2016-03-24-how-to-weather-radials/index.html#to-polar-coordinates-and-columnrange",
    "title": "How to: Weather Radials",
    "section": "To polar coordinates and columnrange!",
    "text": "To polar coordinates and columnrange!\nNow, we need to change to polar cordinates to get the “radial” part, this is get using the polar = TRUE argument in the hc_chart function. Then add the data in the columnrange type.\n\nCode# Some tooltips to make it a little *intercative*\nx <- c(\"Min\", \"Mean\", \"Max\")\ny <- sprintf(\"{point.%s} ºC\", c(\"min_temperaturec\", \"mean_temperaturec\", \"max_temperaturec\"))\ntltip <- tooltip_table(x, y)\n\nhchart(\n  df,\n  type = \"columnrange\",\n  hcaes(x = date2, low = min_temperaturec, high = max_temperaturec, color = mean_temperaturec),\n  showInLegend = FALSE\n  ) %>% \n  hc_chart(\n    polar = TRUE\n  ) %>%  \n  hc_xAxis(\n    gridLineWidth = 0.5,\n    type = \"datetime\",\n    tickInterval = 30 * 24 * 3600 * 1000,\n    labels = list(format = \"{value: %b}\")\n  ) %>% \n  hc_yAxis(\n    max = 30,\n    min = -10,\n    labels = list(format = \"{value} ºC\"),\n    showFirstLabel = FALSE\n    ) %>% \n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = as.character(tags$small(\"{point.x:%d %B, %Y}\")),\n    pointFormat = tltip\n  )\n\n\n\n\n\n\nYay :D! A beautiful chart same as the d3 version and only using R. So sweet! I’m happy with the result. This is not a standar chart but is a king of artistic. What do you think? Any other examples to test this type of chart?"
  },
  {
    "objectID": "posts/2016-03-24-how-to-weather-radials/index.html#bonus-track-ggplot2-version",
    "href": "posts/2016-03-24-how-to-weather-radials/index.html#bonus-track-ggplot2-version",
    "title": "How to: Weather Radials",
    "section": "Bonus Track: {ggplot2} version",
    "text": "Bonus Track: {ggplot2} version\nIt’s really really easy to do this type of chart in ggplot2 using geom_linerange and geom_polar:\n\nCodelibrary(scales)\n\nggplot(\n  df,\n  aes(\n    date2,\n    ymin = min_temperaturec,\n    ymax = max_temperaturec,\n    color = mean_temperaturec\n  )\n) +\n  geom_linerange(size = 1.3, alpha = 0.75) +\n  scale_color_viridis_c(NULL, option = \"A\") +\n  scale_x_date(labels = date_format(\"%b\"), breaks = date_breaks(\"month\")) +\n  ylim(-10, 35) +\n  labs(\n    title = \"San Francisco Wather Radial\",\n    subtitle = \"It would be nice if someone do this with the animation package\",\n    caption = \"Other example for ggplot2 vs base #boring but #fun\",\n    x = NULL,\n    y = NULL\n  ) +\n  coord_polar() +\n  theme(legend.position = \"bottom\")\n\n\n\n\nNice!\nSearching I found someone do this:\n\nAlways exist someone who did what you did before you."
  },
  {
    "objectID": "posts/2016-04-12-adding-motion-to-choropleths/index.html",
    "href": "posts/2016-04-12-adding-motion-to-choropleths/index.html",
    "title": "Adding motion to choropleths",
    "section": "",
    "text": "Time ago hrbrmstr show how to replicate a visualization made by New York Times with R.\nThe result we hope is like this:\n\nI really like small multiples and this is a good example of usage. However if the multiples means a lot mini plots maybe you can try add animation.\nLet’s start using the script made by Bob:\n\n\nCode\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(highcharter)\n\nURL &lt;- \"http://graphics8.nytimes.com/newsgraphics/2016/01/15/drug-deaths/c23ba79c9c9599a103a8d60e2329be1a9b7d6994/data.json\"\n\ndata(\"uscountygeojson\")\ndata(\"unemployment\")\n\ndata &lt;-  fromJSON(URL) %&gt;% \n  as_tibble() %&gt;% \n  gather(year, value, -fips) %&gt;% \n  mutate(year = sub(\"^y\", \"\", year),\n         value = ifelse(is.na(value), 0, value))\n\ndata\n\n\n# A tibble: 40,833 × 3\n   fips  year  value\n   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 01001 2002      1\n 2 01003 2002      2\n 3 01005 2002      0\n 4 01007 2002      1\n 5 01009 2002      2\n 6 01011 2002      0\n 7 01013 2002      0\n 8 01015 2002      1\n 9 01017 2002      1\n10 01019 2002      1\n# ℹ 40,823 more rows\n\n\nNow we’ll prepare the data as the motion plugin require the data.\n\n\nCode\nds &lt;- data %&gt;% \n  group_by(fips) %&gt;% \n  do(item = list(\n    fips = first(.$fips),\n    sequence = .$value,\n    value = first(.$value))) %&gt;% \n  .$item\n\nhc &lt;- highchart(type = \"map\") %&gt;% \n  hc_add_series(\n    data = ds,\n    name = \"drug deaths per 100,000\",\n    mapData = uscountygeojson,\n    joinBy = \"fips\",\n    borderWidth = 0.01\n    ) %&gt;% \n  hc_colorAxis(stops = color_stops()) %&gt;%  \n  hc_title(text = \"How the Epidemic of Drug Overdose Deaths Ripples\") %&gt;% \n  hc_subtitle(text = \"Overdose deaths per 100,000\") %&gt;% \n  hc_legend(\n    layout = \"horizontal\",\n    reversed = TRUE,\n    floating = TRUE,\n    align = \"right\"\n    ) %&gt;% \n  hc_motion(\n    enabled = TRUE,\n    axisLabel = \"year\",\n    labels = sort(unique(data$year)),\n    series = 0,\n    updateIterval = 50,\n    magnet = list(\n      round = \"floor\",\n      step = 0.1\n    )\n  ) %&gt;% \n  hc_chart(marginBottom  = 100)\n\n\nAnd the result:\n\n\nCode\nhc\n\n\n\n\n\n\n\n\n\nReuseCC BY 4.0CitationBibTeX citation:@online{kunst fuentes2016,\n  author = {Kunst Fuentes, Joshua},\n  title = {Adding Motion to Choropleths},\n  date = {2016-04-12},\n  url = {https://jkunst.com/blog/posts/2016-04-12-adding-motion-to-choropleths},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nKunst Fuentes, Joshua. 2016. “Adding Motion to\nChoropleths.” April 12, 2016. https://jkunst.com/blog/posts/2016-04-12-adding-motion-to-choropleths."
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html",
    "title": "Replicating NYT Weather App",
    "section": "",
    "text": "So much time since my last post so I want to post something, no matter what it is, but I hope this will be somehow helpfull\nIn this post I will show some new features for the next version of highcharter package. The main feature added is hc_add_series now is a generic function! This mean you can add the data argument can be numeric, data frame, time series (ts, xts, ohlc) amonth others so the syntaxis will be a little cleaner.\nWhat we’ll do here? We’ll make an interactive version of the well-well-know-and-a-little-repeated Tufte weather chart.\nThere are good ggplot versions if you can start https://rpubs.com/tyshynsk/133318 and https://rpubs.com/bradleyboehmke/weather_graphic.\nBut our focus will be replicate the New York Time App: How Much Warmer Was Your City in 2015? where you can choose among over 3K cities!. So let’s start. So we need a interactive charting library and shiny."
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#data",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#data",
    "title": "Replicating NYT Weather App",
    "section": "Data",
    "text": "Data\nIf you search/explore in the devTools in the previous link you can know where is the path of the used data. So to be clear:\n\nAll the data used in this post is from http://www.nytimes.com – Me.\n\nWe’ll load the tidyverse, download the data, and create an auxiliar variable dt to store the date time in numeric format.\n\nCodelibrary(tidyverse)\nlibrary(highcharter)\nlibrary(lubridate)\n\nurl_base <- \"http://graphics8.nytimes.com/newsgraphics/2016/01/01/weather/assets\"\nfile <- \"new-york_ny.csv\" # \"san-francisco_ca.csv\"\nurl_file <- file.path(url_base, file)\n\ndata <- read_csv(url_file)\ndata <- mutate(data, dt = datetime_to_timestamp(date))\n\ndata\n\n# A tibble: 365 × 20\n   date       month temp_max temp_min temp_rec…¹ temp_…² temp_…³ temp_…⁴ temp_…⁵\n   <date>     <dbl>    <dbl>    <dbl>      <dbl>   <dbl>   <dbl>   <dbl> <chr>  \n 1 2015-01-01     1       39       27         62      -4      39      28 NULL   \n 2 2015-01-02     1       42       35         68       2      39      28 NULL   \n 3 2015-01-03     1       42       33         64      -4      39      28 NULL   \n 4 2015-01-04     1       56       41         66      -3      39      27 NULL   \n 5 2015-01-05     1       49       21         64      -4      38      27 NULL   \n 6 2015-01-06     1       22       19         72      -2      38      27 NULL   \n 7 2015-01-07     1       23        9         64       4      38      27 NULL   \n 8 2015-01-08     1       21        8         65       2      38      27 NULL   \n 9 2015-01-09     1       33       19         64      -1      38      27 NULL   \n10 2015-01-10     1       23       16         60      -6      38      27 NULL   \n# … with 355 more rows, 11 more variables: temp_rec_low <chr>,\n#   precip_value <dbl>, precip_actual <dbl>, precip_normal <dbl>,\n#   precip_rec <chr>, snow_rec <chr>, annual_average_temperature <dbl>,\n#   departure_from_normal <dbl>, total_precipitation <dbl>,\n#   precipitation_departure_from_normal <dbl>, dt <dbl>, and abbreviated\n#   variable names ¹​temp_rec_max, ²​temp_rec_min, ³​temp_avg_max, ⁴​temp_avg_min,\n#   ⁵​temp_rec_high"
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#setup",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#setup",
    "title": "Replicating NYT Weather App",
    "section": "Setup",
    "text": "Setup\nDue the data is ready we’ll start to create the chart (a highchart object):\n\nCodehc <- highchart() %>%\n  hc_xAxis(\n    type = \"datetime\",\n    showLastLabel = FALSE,\n    dateTimeLabelFormats = list(month = \"%B\")\n  ) %>%\n  hc_tooltip(\n    shared = TRUE,\n    useHTML = TRUE,\n    headerFormat = as.character(tags$small(\"{point.x: %b %d}\", tags$br()))\n  ) %>%\n  hc_plotOptions(series = list(borderWidth = 0, pointWidth = 4))\n\nhc\n\n\n\n\n\n\n\nNothing. All acording to the plan XD."
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#temperatures",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#temperatures",
    "title": "Replicating NYT Weather App",
    "section": "Temperatures",
    "text": "Temperatures\nWe’ll select the temperature columns from the data and do some wrangling, gather, spread, separate and recodes to get a nice tidy data frame.\n\nCodedtempgather <- data %>%\n  select(dt, starts_with(\"temp\")) %>%\n  select(-temp_rec_high,-temp_rec_low) %>%\n  rename(temp_actual_max = temp_max,\n         temp_actual_min = temp_min) %>%\n  gather(key, value,-dt) %>%\n  mutate(key = str_replace(key, \"temp_\", \"\"))\n\ndtempspread <- dtempgather %>%\n  separate(key, c(\"serie\", \"type\"), sep = \"_\") %>%\n  spread(type, value)\n\ntemps <- dtempspread %>%\n  mutate(\n    serie = factor(serie, levels = c(\"rec\", \"avg\", \"actual\")),\n    serie = fct_recode(\n      serie,\n      Record = \"rec\",\n      Normal = \"avg\",\n      Observed = \"actual\"\n    )\n  )\n\ntemps\n\n# A tibble: 1,095 × 4\n              dt serie      max   min\n           <dbl> <fct>    <dbl> <dbl>\n 1 1420070400000 Observed    39    27\n 2 1420070400000 Normal      39    28\n 3 1420070400000 Record      62    -4\n 4 1420156800000 Observed    42    35\n 5 1420156800000 Normal      39    28\n 6 1420156800000 Record      68     2\n 7 1420243200000 Observed    42    33\n 8 1420243200000 Normal      39    28\n 9 1420243200000 Record      64    -4\n10 1420329600000 Observed    56    41\n# … with 1,085 more rows\n\n\nNow whe can add this data to the highchart object using hc_add_series:\n\nCodehc <- hc %>%\n  hc_add_series(\n    temps,\n    type = \"columnrange\",\n    hcaes(dt, low = min, high = max, group = serie),\n    color = c(\"#ECEBE3\", \"#C8B8B9\", \"#A90048\")\n  )\n\nhc\n\n\n\n\n\n\nA really similar chart of what we want!\nThe original chart show records of temprerature. So we need to filter the days with temperature records using the columns temp_rec_high and temp_rec_low, then some gathers and tweaks. Then set some options to show the points, like use fill color and some longer radius.\n\nCoderecords <- data %>%\n  select(dt, temp_rec_high, temp_rec_low) %>%\n  filter(temp_rec_high != \"NULL\" | temp_rec_low != \"NULL\") %>%\n  mutate_if(is.character, str_extract, \"\\\\d+\") %>%\n  mutate_if(is.character, as.numeric) %>%\n  gather(type, value,-dt) %>%\n  filter(!is.na(value)) %>%\n  mutate(type = str_replace(type, \"temp_rec_\", \"\"),\n         type = paste(\"This year record\", type))\n\npointsyles <- list(\n  symbol = \"circle\",\n  lineWidth = 1,\n  radius = 4,\n  fillColor = \"#FFFFFF\",\n  lineColor = NULL\n)\n\nrecords\n\n# A tibble: 9 × 3\n             dt type                  value\n          <dbl> <chr>                 <dbl>\n1 1439769600000 This year record high    95\n2 1441670400000 This year record high    97\n3 1446768000000 This year record high    74\n4 1449964800000 This year record high    67\n5 1450051200000 This year record high    67\n6 1450137600000 This year record high    68\n7 1450915200000 This year record high    72\n8 1451001600000 This year record high    66\n9 1424390400000 This year record low      2\n\nCodehc <- hc %>%\n  hc_add_series(records, \"point\", hcaes(x = dt, y = value, group = type),\n                marker = pointsyles)\n\nhc\n\n\n\n\n\n\nWe’re good."
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#precipitation",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#precipitation",
    "title": "Replicating NYT Weather App",
    "section": "Precipitation",
    "text": "Precipitation\nA nice feture of the NYTs app is and the chart is show the precipitaion by month. This data is in other axis. So we need to create a list with 2 axis using the create_yaxis helper and the adding this axis to the chart.\n\nCodeaxis <- create_yaxis(\n  naxis = 2,\n  heights = c(3, 1),\n  sep = 0.05,\n  turnopposite = FALSE,\n  showLastLabel = FALSE,\n  startOnTick = FALSE\n)\n\n\nManually add titles (I know this can be more elegant) and options.\n\nCodeaxis[[1]]$title <- list(text = \"Temperature\")\naxis[[1]]$labels <- list(format = \"{value}ºF\")\n\naxis[[2]]$title <- list(text = \"Precipitation\")\naxis[[2]]$min <- 0\n\nhc <- hc_yAxis_multiples(hc, axis)\n\nhc\n\n\n\n\n\n\nThe 2 axis are ready, now we need add the data. We will add 12 series -one for each month- but we want to asociate 1 legend for all these 12 series, so we need to use id and linkedTo parameters and obviously. That’s why the id will be a 'p' for the firt element and then NA to the other 11. And then linked this 11 to the first series (id = 'p').\n\nCodeprecip <- select(data, dt, precip_value, month)\n\nhc <- hc %>%\n  hc_add_series(\n    precip,\n    type = \"area\",\n    hcaes(dt, precip_value, group = month),\n    name = \"Precipitation\",\n    color = \"#008ED0\",\n    lineWidth = 1,\n    yAxis = 1,\n    fillColor = \"#EBEAE2\",\n    id = c(\"p\", rep(NA, 11)),\n    linkedTo = c(NA, rep(\"p\", 11))\n  )\n\n\nThe same way we’ll add the normal precipitations by month.\n\nCodeprecipnormal <- data %>%\n  select(dt, precip_normal, month) %>%\n  group_by(month) %>%\n  filter(row_number() %in% c(1, n())) %>%\n  ungroup() %>%\n  fill(precip_normal)\n\nhc <- hc %>%\n  hc_add_series(\n    precipnormal,\n    \"line\",\n    hcaes(x = dt, y = precip_normal, group = month),\n    name = \"Normal Precipitation\",\n    color = \"#008ED0\",\n    yAxis = 1,\n    id = c(\"np\", rep(NA, 11)),\n    linkedTo = c(NA, rep(\"np\", 11)),\n    lineWidth = 1\n  )"
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#final-result",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#final-result",
    "title": "Replicating NYT Weather App",
    "section": "Final Result",
    "text": "Final Result\nCurious how the chart looks? Me too! Nah, I saw the chart before this post.\n\nCodehc"
  },
  {
    "objectID": "posts/2016-12-02-replicating-nyt-weather-app/index.html#shiny-app",
    "href": "posts/2016-12-02-replicating-nyt-weather-app/index.html#shiny-app",
    "title": "Replicating NYT Weather App",
    "section": "Shiny App",
    "text": "Shiny App\nWith R you can create a press style chart with some wrangling and charting. Now with a little of love we can make the code resuable to make a shiny app.\n\n\n\n\nSomeone put the grid lines for the 2 axis as the original NYT app please to these charts! I will grateful if someone code that details.\nSee you :B!"
  },
  {
    "objectID": "posts/2017-01-05-thematic-interactive-map/index.html",
    "href": "posts/2017-01-05-thematic-interactive-map/index.html",
    "title": "Thematic Interactive Map",
    "section": "",
    "text": "The last month, yep, the past year I’ve working on create maps easily with highcharter, so when I saw this chart I took as challege!"
  },
  {
    "objectID": "posts/2017-01-05-thematic-interactive-map/index.html#packages-and-data",
    "href": "posts/2017-01-05-thematic-interactive-map/index.html#packages-and-data",
    "title": "Thematic Interactive Map",
    "section": "Packages and Data",
    "text": "Packages and Data\nThe data used for this chart is the same using by Timo. But the workflow was slightly modified:\n\nRead the shapefile with maptools::readShapeSpatial.\nSimplify the shapefile (optional step) using rmapshaper::ms_simplify.\nThen transform the map data to geojson using geojsonio::geojson_list.\n\n\nCodelibrary(tidyverse)\nlibrary(rmapshaper)\nlibrary(maptools)\nlibrary(highcharter)\nlibrary(geojsonio)\nlibrary(viridis)\n\nshape <- here::here(\"posts\", \"2017-01-05-thematic-interactive-map\", \"data\", \"gde-1-1-15.shp\")\nmap <- readShapeSpatial(shape)\nmap <- ms_simplify(map, keep = 1) # because ms_simplify fix the ü's\nmap <- geojson_list(map)\n\n# this was to put the name on the tooltip\nmap$features <- map(map$features, function(x) {\n  x$properties$name <- x$properties[[\"Secondary_\"]] \n  x\n})\n\ndata <- read_csv(here::here(\"posts\", \"2017-01-05-thematic-interactive-map\", \"data\", \"avg_age_15.csv\"))\ndata <- select(data, -1)\ndata <- rename(data, value = avg_age_15)\n\n# colors\nno_classes <- 6\n\ncolors <- magma(no_classes + 2) %>% \n  rev() %>% \n  head(-1) %>% \n  tail(-1) %>% \n  gsub(\"FF$\", \"\", .)\n\nbrks <- c(min(data$value), c(40,42,44,46,48), max(data$value))\nbrks <- ifelse(1:(no_classes + 1) < no_classes, floor(brks), ceiling(brks))"
  },
  {
    "objectID": "posts/2017-01-05-thematic-interactive-map/index.html#map",
    "href": "posts/2017-01-05-thematic-interactive-map/index.html#map",
    "title": "Thematic Interactive Map",
    "section": "Map",
    "text": "Map\nCreate the raw map is straightforward. The main challege was replicate the relief feature of the orignal map. This took some days to figure how add the backgound image. I did almost lost the hope but you know, new year, so I tried a little more and it was possible :):\n\nFirst I searched a way to transform the tif image to geojson. I wrote a mail @frzambra a geoRexpert :D. and he kindly said me that I was wrong. And he was right. NEXT!\nI tried with use divBackgroundImage but with this the image use all the container… so… NEXT.\nFinally surfing in the web I met plotBackgroundImage argument in highcharts which is uesd to put and image only in plot container (inside de axis) and it works nicely. It was necessary hack the image using the preserveAspectRatio (html world) to center the image but nothing magical.\n\n\nCodeurlimage <- \"https://raw.githubusercontent.com/jbkunst/r-posts/master/061-beautiful-thematic-maps-with-ggplot2-highcharter-version\n/02-relief-georef-clipped-resampled.jpg\"\n\nhc <- highchart(type = \"map\") %>% \n  # data part\n  hc_add_series(\n    mapData = map, data = data, type = \"map\",\n    joinBy = c(\"BFS_ID\", \"bfs_id\"), value = \"value\",\n    borderWidth = 0\n    ) %>% \n  hc_colorAxis(dataClasses = color_classes(brks, colors)) %>% \n  # functionality\n  hc_tooltip(\n    headerFormat = \"\",\n    pointFormat = \"{point.name}: {point.value}\",\n    valueDecimals = 2\n    ) %>% \n  hc_legend(\n    align = \"right\",\n    verticalAlign = \"bottom\",\n    layout = \"vertical\",\n    floating = TRUE\n    ) %>%\n  hc_mapNavigation(enabled = FALSE) %>% # if TRUE to zoom the relief image dont zoom.\n  # info\n  hc_title(text = \"Switzerland's regional demographics\") %>% \n  hc_subtitle(text = \"Average age in Swiss municipalities, 2015\") %>% \n  hc_credits(\n    enabled = TRUE,\n    text = \"Map CC-BY-SA; Author: Joshua Kunst (@jbkunst) based mostly on Timo Grossenbacher (@grssnbchr) work, Geometries: ThemaKart, BFS; Data: BFS, 2016; Relief: swisstopo, 2016\"\n    ) %>% \n  # style\n  hc_chart(\n    plotBackgroundImage = urlimage,\n    backgroundColor = \"transparent\",\n    events = list(\n      load = JS(\"function(){ $(\\\"image\\\")[0].setAttribute('preserveAspectRatio', 'xMidYMid') }\")\n      )\n    )\n\nhc\n\n\n\n\n\n\n\nDARY! Legendary. – Me.\n\nSame as the original/ggplot2 version but interactive! I’m very happy with the result. But anyway, there are some details:\n\nThe image/relief need to be accesible in web. I don’t know how to add images as dependencies yet. I tried econding the image but didn’t work.\nI could not do the legend same as the original. So I used dataClasses instead of stops in hc_colorAxis."
  },
  {
    "objectID": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html",
    "href": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html",
    "title": "Giving a Thematic Touch to your Interactive Chart",
    "section": "",
    "text": "Usually (mainly at work) I made a chart and when I present it nobody cares about the style, if the chart comes from an excel spreadsheet, paint or intercative chart, or colors, labels, font, or things I like to care. That’s sad for me but it’s fine: the data/history behind and how you present it is what matters. And surely I’m overreacting.\nBut hey! That’s not implies you only must do always clean chart or tufte style plots. Sometimes you can play with the topic of your chart and give some thematic touch.\nThe first example that come to my mind is the Iraq’s bloody toll visualization:\n\n\nIraq’s bloody toll\n\n\nSo. We’ll use some resources to try:\n\nAdd some context of the topic before the viewer read something.\nHopefully keep in the viewer’s memory :) in a gooood way.\n\nKeeping the message intact, ie, don’t abuse adding many element so the user don’t lose the main point of the chart."
  },
  {
    "objectID": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html#example-i-oil-spills",
    "href": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html#example-i-oil-spills",
    "title": "Giving a Thematic Touch to your Interactive Chart",
    "section": "Example I: Oil Spills",
    "text": "Example I: Oil Spills\nWe can reuse the bloody toll effect, using with Oil Spills data.\nThe ourworldindata.org website have a descriptive study Max Roser.\n\nMax Roser (2016) - ‘Oil Spills’. Published online at OurWorldInData.org. Retrieved from: https://ourworldindata.org/oil-spills/ [Online Resource]\n\nThey start with:\n\nOver the past 4 decades - the time for which we have data - oil spills decreased dramatically. Although oil spills also happen on land, marine oil spills are considered more serious as the spilled oil is less containable\n\nLet’s load the data and make the basic chart.\n\nCodelibrary(tidyverse) \nlibrary(jsonlite)\n\njson <- read_lines(\"https://ourworldindata.org/wp-content/uploads/nvd3/nvd3_multiBarChart_Oil/multiBarChart_Oil.html\")\njson <- json[seq(\n  which(str_detect(json, \"var xxx\")),\n  first(which(str_detect(json, \"\\\\}\\\\]\\\\;\")))\n)]\n\njson <- fromJSON(str_replace_all(json, \"var xxx = |;$\", \"\"))\njson <- transpose(json)\n\nstr(json)\n\nList of 2\n $ :List of 2\n  ..$ values:'data.frame':  43 obs. of  2 variables:\n  .. ..$ x: num [1:43] 0.00 3.16e+10 6.31e+10 9.47e+10 1.26e+11 ...\n  .. ..$ y: int [1:43] 30 14 27 31 27 20 26 16 23 32 ...\n  ..$ key   : chr \">700 Tonnes\"\n $ :List of 2\n  ..$ values:'data.frame':  43 obs. of  2 variables:\n  .. ..$ x: num [1:43] 0.00 3.16e+10 6.31e+10 9.47e+10 1.26e+11 ...\n  .. ..$ y: int [1:43] 7 18 48 28 90 96 67 69 59 60 ...\n  ..$ key   : chr \"7-700 Tonnes\"\n\nCodedspills <- map_df(json, function(x) {\n  df <- as.data.frame(x[[\"values\"]])\n  df$key <- x[[\"key\"]]\n  tbl_df(df)\n  df\n})\n\nglimpse(dspills)\n\nRows: 86\nColumns: 3\n$ x   <dbl> 0.00000e+00, 3.15569e+10, 6.31138e+10, 9.46707e+10, 1.26228e+11, 1…\n$ y   <int> 30, 14, 27, 31, 27, 20, 26, 16, 23, 32, 13, 7, 4, 13, 8, 8, 7, 10,…\n$ key <chr> \">700 Tonnes\", \">700 Tonnes\", \">700 Tonnes\", \">700 Tonnes\", \">700 …\n\n\nThe data is ready. So we can make an staked area chart. I used areaspline here to make a liquid effect.\n\nCodelibrary(highcharter)\n\nhcspills <- hchart(dspills, \"areaspline\", hcaes(x, y, group = \"key\")) %>% \n  hc_plotOptions(series = list(stacking = \"normal\")) %>% \n  hc_xAxis(type = \"datetime\") %>% \n  hc_title(text = \"Number of Oil Spills Over the Past 4 Decades\")\n\nhcspills\n\n\n\n\n\n\nYay, the spills are decreasing over time. So we can do:\n\nAdd a deep sea background.\nReverse the yAxis to the give the fall effect.\nAdd a dark colors to simulate the oil.\nAdd the credits for give the serious (? ;) ) touch.\n\n\nCodehcspills2 <- hcspills %>% \n  hc_colors(c(\"#000000\", \"#222222\")) %>% \n  hc_title(align = \"left\", style = list(color = \"black\")) %>% \n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_tooltip(sort = TRUE, table = TRUE) %>% \n  hc_legend(align = \"right\", verticalAlign = \"top\", layout = \"horizontal\") %>% \n  hc_credits(\n    enabled = TRUE,\n    text = \"Data from ITOPF.com\",\n    href = \"http://www.itopf.com/knowledge-resources/data-statistics/statistics/\"\n  ) %>% \n  hc_chart(\n    divBackgroundImage = \"https://images-na.ssl-images-amazon.com/images/I/71EUEG8orVL._SL1500_.jpg\",\n    backgroundColor = hex_to_rgba(\"white\", 0.50)\n  ) %>% \n  hc_xAxis(\n    opposite = TRUE,\n    gridLineWidth = 0,\n    title = list(text = \"Time\", style = list(color = \"black\")),\n    lineColor = \"black\", tickColor = \"black\",\n    labels = list(style = list(color = \"black\"))\n    ) %>% \n  hc_yAxis(\n    reversed = TRUE, \n    gridLineWidth = 0, \n    lineWidth = 1,\n    lineColor = \"black\",\n    tickWidth = 1,\n    tickLength = 10, \n    tickColor = \"black\",\n    title = list(text = \"Oil Spills\", style = list(color = \"black\")),\n    labels = list(style = list(color = \"black\"))\n    ) %>% \n  hc_add_theme(hc_theme_elementary())\n\n\n\nCodehcspills2"
  },
  {
    "objectID": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html#example-ii-winter-olympic-games",
    "href": "posts/2017-03-03-giving-a-thematic-touch-to-your-interactive-chart/index.html#example-ii-winter-olympic-games",
    "title": "Giving a Thematic Touch to your Interactive Chart",
    "section": "Example II: Winter Olympic Games",
    "text": "Example II: Winter Olympic Games\nHere we will take the data and chart the participating nations over the years.\n\nCodelibrary(rvest)\n\ntables <- read_html(\"https://en.wikipedia.org/wiki/Winter_Olympic_Games\") %>% \n  html_table(fill = TRUE)\n\n# dgames <- tables[[6]]\ndgames <- tables[[5]]\ndgames <- janitor::clean_names(dgames)\ndgames <- tbl_df(dgames)\n\ndgames <- mutate_if(dgames, is.character, str_trim)\n\ndgames <- filter(dgames, !no %in% c(\"1940\", \"1944\"))\ndgames <- filter(dgames, !year %in% seq(2018, by = 4, length.out = 4))\ndgames <- filter(dgames, row_number() != 1)\n\ndgames <- dgames |> \n  mutate(year = as.numeric(str_extract(year, \"[0-9]{4}\"))) |> \n  filter(!is.na(year))\n\n\nNot sure how re-read data to get the right column types. So a dirty trick.\n\nCodetf <- tempfile(fileext = \".csv\")\n\nwrite_csv(dgames, tf)\n\ndgames <- read_csv(tf)\n\ndgames <- mutate(dgames,\n                 # nations = n,\n                 nations = str_extract(nations, \"\\\\d+\"),\n                 nations = as.numeric(nations))\n\nglimpse(dgames)\n\nRows: 27\nColumns: 11\n$ year                  <dbl> 1924, 1928, 1932, 1936, 1940, 1944, 1948, 1952, …\n$ no                    <chr> \"I\", \"II\", \"III\", \"IV\", \"[C]\", \"[C]\", \"V\", \"VI\",…\n$ host                  <chr> \"Chamonix\", \"St. Moritz\", \"Lake Placid\", \"Garmis…\n$ games_dates_opened_by <chr> \"25 January – 5 February 1924Gaston Vidal\", \"11–…\n$ sports_disciplines    <chr> \"6 (9)\", \"4 (8)\", \"4 (7)\", \"4 (8)\", \"Awarded to …\n$ competitors           <chr> \"258\", \"464\", \"252\", \"646\", \"Awarded to Japan (S…\n$ competitors_2         <chr> \"247\", \"438\", \"231\", \"566\", \"Awarded to Japan (S…\n$ competitors_3         <chr> \"11\", \"26\", \"21\", \"80\", \"Awarded to Japan (Sappo…\n$ events                <chr> \"16\", \"14\", \"14\", \"17\", \"Awarded to Japan (Sappo…\n$ nations               <dbl> 16, 25, 17, 28, NA, NA, 28, 30, 32, 30, 36, 37, …\n$ top_nation            <chr> \"Norway (NOR)\", \"Norway (NOR)\", \"United States (…\n\n\nLet’s see the first chart:\n\nCodehcgames <- hchart(dgames, \"areaspline\", hcaes(year, nations, name = host), name = \"Nations\") %>% \n  hc_title(text = \"Number of Participating Nations in every Winter Olympic Games\") %>%\n  hc_xAxis(title = list(text = \"Time\")) %>% \n  hc_yAxis(title = list(text = \"Nations\"))\n\nhcgames\n\n\n\n\n\n\nWith that increase of nations in 1980 we can:\n\nUse a white color to simulate a big snowed mountain.\nPut a relevant background.\nPut some flags for each host.\nAnd work on the tooltip to show more information.\n\n\nCodelibrary(countrycode)\n\nurlico <- \"url(https://raw.githubusercontent.com/tugmaks/flags/2d15d1870266cf5baefb912378ecfba418826a79/flags/flags-iso/flat/24/%s.png)\"\n\n# dgames <- dgames %>% \n#   mutate(country = tn,\n#     country = str_extract(host, \", .*$\"),\n#          country = str_replace(country, \", \", \"\"),\n#          country = str_trim(country)) %>% \n#   mutate(countrycode = countrycode(country, origin = \"country.name\", destination = \"iso2c\")) %>% \n#   mutate(marker = sprintf(urlico, countrycode),\n#          marker = map(marker, function(x) list(symbol = x)),\n#          flagicon = sprintf(urlico, countrycode),\n#          flagicon = str_replace_all(flagicon, \"url\\\\(|\\\\)\", \"\")) %>% \n#   rename(men = c_2, women = c_3)\n\nglimpse(dgames)\n\nRows: 27\nColumns: 11\n$ year                  <dbl> 1924, 1928, 1932, 1936, 1940, 1944, 1948, 1952, …\n$ no                    <chr> \"I\", \"II\", \"III\", \"IV\", \"[C]\", \"[C]\", \"V\", \"VI\",…\n$ host                  <chr> \"Chamonix\", \"St. Moritz\", \"Lake Placid\", \"Garmis…\n$ games_dates_opened_by <chr> \"25 January – 5 February 1924Gaston Vidal\", \"11–…\n$ sports_disciplines    <chr> \"6 (9)\", \"4 (8)\", \"4 (7)\", \"4 (8)\", \"Awarded to …\n$ competitors           <chr> \"258\", \"464\", \"252\", \"646\", \"Awarded to Japan (S…\n$ competitors_2         <chr> \"247\", \"438\", \"231\", \"566\", \"Awarded to Japan (S…\n$ competitors_3         <chr> \"11\", \"26\", \"21\", \"80\", \"Awarded to Japan (Sappo…\n$ events                <chr> \"16\", \"14\", \"14\", \"17\", \"Awarded to Japan (Sappo…\n$ nations               <dbl> 16, 25, 17, 28, NA, NA, 28, 30, 32, 30, 36, 37, …\n$ top_nation            <chr> \"Norway (NOR)\", \"Norway (NOR)\", \"United States (…\n\nCodeurlimg <- \"https://i.pinimg.com/originals/1a/ad/f5/1aadf58a23d4928945e1dd793f129261.jpg\"\nttvars <- c(\"year\", \"nations\", \"sports\", \"competitors\", \"women\", \"men\", \"events\")\ntt <- tooltip_table(\n  ttvars,\n  sprintf(\"{point.%s}\", ttvars), img = tags$img(src=\"{point.flagicon}\", style = \"text-align: center;\")\n)\n\nhcgames2 <- hchart(dgames, \"areaspline\", hcaes(year, nations, name = host), name = \"Nations\") %>% \n  hc_colors(hex_to_rgba(\"white\", 0.8)) %>% \n  hc_title(\n    text = \"Number of Participating Nations in every Winter Olympic Games\",\n    align = \"left\",\n    style = list(color = \"white\")\n  ) %>% \n  hc_credits(\n    enabled = TRUE,\n    text = \"Data from Wipiedia\",\n    href = \"https://en.wikipedia.org/wiki/Winter_Olympic_Games\"\n  ) %>% \n  hc_xAxis(\n    title = list(text = \"Time\", style = list(color = \"white\")),\n    gridLineWidth = 0,\n    labels = list(style = list(color = \"white\"))\n  ) %>% \n  hc_yAxis(\n    lineWidth = 1,\n    tickWidth = 1,\n    tickLength = 10,\n    title = list(text = \"Nations\", style = list(color = \"white\")),\n    gridLineWidth = 0,\n    labels = list(style = list(color = \"white\"))\n  ) %>% \n  hc_chart(\n    divBackgroundImage = urlimg,\n    backgroundColor = hex_to_rgba(\"black\", 0.10)\n    ) %>% \n  hc_tooltip(\n    headerFormat = as.character(tags$h4(\"{point.key}\", tags$br())),\n    pointFormat = tt,\n    useHTML = TRUE,\n    backgroundColor = \"transparent\",\n    borderColor = \"transparent\",\n    shadow = FALSE,\n    style = list(color = \"white\", fontSize = \"0.8em\", fontWeight = \"normal\"),\n    positioner = JS(\"function () { return { x: this.chart.plotLeft + 15, y: this.chart.plotTop + 0 }; }\"),\n    shape = \"square\"\n  ) %>% \n  hc_plotOptions(\n    series = list(\n      states = list(hover = list(halo = list(size  = 30)))\n    )\n  ) %>% \n  hc_add_theme(hc_theme_elementary())\n\n\n\nCodehcgames2\n\n\n\n\n\n\nWhat do you think? I had fun, so for me this worth every background I used."
  },
  {
    "objectID": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html",
    "href": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html",
    "title": "Using tooltips in unexpected ways",
    "section": "",
    "text": "In highcharter R package there is highcharter::tooltip_chart helper function to put charts in the tooltip. Sadly the function is not that easy to use but is not impossible :)."
  },
  {
    "objectID": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html#documentation-example",
    "href": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html#documentation-example",
    "title": "Using tooltips in unexpected ways",
    "section": "Documentation example",
    "text": "Documentation example\nThe example in the documentation is:\n\nCodelibrary(tidyverse)\nlibrary(gapminder)\nlibrary(highcharter)\n\ndata(gapminder, package = \"gapminder\")\n\ngp <- gapminder |>\n  arrange(desc(year)) |>\n  distinct(country, .keep_all = TRUE)\n\ngp2 <- gapminder |>\n  select(country, year, pop) |> \n  group_nest(country) |>\n  mutate(\n    data = map(data, mutate, x = year, y = pop, drop = TRUE),\n    data = map(data, list_parse)\n    ) |>\n  rename(ttdata = data)\n\ngptot <- left_join(gp, gp2, by = \"country\")\n\ngptot\n\n# A tibble: 142 × 7\n   country     continent  year lifeExp       pop gdpPercap ttdata     \n   <fct>       <fct>     <int>   <dbl>     <int>     <dbl> <list>     \n 1 Afghanistan Asia       2007    43.8  31889923      975. <list [12]>\n 2 Albania     Europe     2007    76.4   3600523     5937. <list [12]>\n 3 Algeria     Africa     2007    72.3  33333216     6223. <list [12]>\n 4 Angola      Africa     2007    42.7  12420476     4797. <list [12]>\n 5 Argentina   Americas   2007    75.3  40301927    12779. <list [12]>\n 6 Australia   Oceania    2007    81.2  20434176    34435. <list [12]>\n 7 Austria     Europe     2007    79.8   8199783    36126. <list [12]>\n 8 Bahrain     Asia       2007    75.6    708573    29796. <list [12]>\n 9 Bangladesh  Asia       2007    64.1 150448339     1391. <list [12]>\n10 Belgium     Europe     2007    79.4  10392226    33693. <list [12]>\n# … with 132 more rows\n\n\nThe data is ready! Now go to chart:\n\nCodehchart(\n  gptot,\n  \"point\",\n  hcaes(lifeExp, gdpPercap, name = country, size = pop, group = continent, name = country)\n  ) |>\n  hc_yAxis(type = \"logarithmic\") |> \n  # here is the magic (inside the function)\n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"<b>{point.key}</b>\",\n    pointFormatter = tooltip_chart(accesor = \"ttdata\")\n    )"
  },
  {
    "objectID": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html#donut-example",
    "href": "posts/2019-02-04-using-tooltips-in-unexpected-ways/index.html#donut-example",
    "title": "Using tooltips in unexpected ways",
    "section": "Donut example",
    "text": "Donut example\nNow we’ll use a donut chart and try to place the tooltip inside to give it importance:\n\nCodedonutdata <- gp |> \n  group_by(continent) |> \n  summarise(pop = sum(pop/1e6)*1e6)\n\nhchart(donutdata, \"pie\", hcaes(name = continent, y = pop), innerSize = 300)\n\n\n\n\n\n\n\nJust according to keikaku.\n\nThe donut is ready. So now we need a detailed data from each continent to show in the tooltip.\n\nCodedonutdata2 <- gp |> \n  select(continent, lifeExp, gdpPercap) |> \n  group_nest(continent) |> \n  mutate(\n    data = map(data, mutate, x = lifeExp, y = gdpPercap, drop = TRUE),\n    data = map(data, list_parse)\n    ) |>\n  rename(ttdata = data) |> \n  left_join(donutdata, by = \"continent\")\n\ndonutdata2\n\n# A tibble: 5 × 3\n  continent ttdata             pop\n  <fct>     <list>           <dbl>\n1 Africa    <list [52]>  929539692\n2 Americas  <list [25]>  898871184\n3 Asia      <list [33]> 3811953827\n4 Europe    <list [30]>  586098529\n5 Oceania   <list [2]>    24549947\n\n\nAnd the chart:\n\nCodehc <- hchart(\n  donutdata2,\n  \"pie\",\n  hcaes(name = continent, y = pop),\n  innerSize = 375\n  )\n\nhc |> \n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"<b>{point.key}</b>\",\n    pointFormatter = tooltip_chart(\n      accesor = \"ttdata\",\n      hc_opts = list(\n        chart = list(type = \"scatter\"),\n        credits = list(enabled = FALSE),\n        plotOptions = list(scatter = list(marker = list(radius = 2)))\n        ),\n      height = 225\n      ),\n    positioner = JS(\n      \"function () {\n      \n        /* one of the most important parts! */\n        xp =  this.chart.chartWidth/2 - this.label.width/2\n        yp =  this.chart.chartHeight/2 - this.label.height/2\n      \n        return { x: xp, y: yp };\n      \n      }\"),\n    shadow = FALSE,\n    borderWidth = 0,\n    backgroundColor = \"transparent\",\n    hideDelay = 1000\n    )\n\n\n\n\n\n\nWhat do you think? Maybe it’s a kind of overkill, but hey, it’s up to you to (ab)use it or not! Another more subtle alternative can be put text, i.e, the normal tooltip but with a bigger size, like a knob chart."
  },
  {
    "objectID": "posts/2019-04-08-when-charts-are-integrated-in-the-web-page/index.html",
    "href": "posts/2019-04-08-when-charts-are-integrated-in-the-web-page/index.html",
    "title": "When charts are integrated in the web page",
    "section": "",
    "text": "I was searching for a CDN at jsdelivr.com and I noticed a chart showing download per days:\n\n\n\nWhy I like this chart? Because is a chart integrated with the web site using all space and soft colors to not call the attention. A very special chart.\nNow we’ll try to replicate :). That’s why we’re are here. Let’s download the data:\n\nCodelibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(lubridate)\n\ndata <- jsonlite::read_json(\"https://data.jsdelivr.com/v1/package/npm/highcharts/stats/month\")\n\n# str(data)\n\ndata <- data$versions %>%\n  map( ~ .x$dates) %>%\n  enframe() %>%\n  mutate(value = map(value, enframe)) %>%\n  unnest() %>%\n  mutate(\n    value = map_dbl(value, identity),\n    name1 = ymd(name1)\n    )\n\ndata\n\n# A tibble: 2,550 × 3\n   name   name1      value\n   <chr>  <date>     <dbl>\n 1 0.0.11 2022-11-22     0\n 2 0.0.11 2022-11-23     0\n 3 0.0.11 2022-11-24     0\n 4 0.0.11 2022-11-25     0\n 5 0.0.11 2022-11-26     0\n 6 0.0.11 2022-11-27     0\n 7 0.0.11 2022-11-28     0\n 8 0.0.11 2022-11-29     0\n 9 0.0.11 2022-11-30     0\n10 0.0.11 2022-12-01     0\n# … with 2,540 more rows\n\n\nWe’ll group the data by day:\n\nCodedatag <- data %>%\n  group_by(name1) %>%\n  summarise(value = sum(value)) %>% \n  rename(\n    date = name1,\n    downloads = value\n  )\n\ndatag\n\n# A tibble: 30 × 2\n   date       downloads\n   <date>         <dbl>\n 1 2022-11-22    477614\n 2 2022-11-23    434546\n 3 2022-11-24    448489\n 4 2022-11-25    440718\n 5 2022-11-26    360753\n 6 2022-11-27    369302\n 7 2022-11-28    482625\n 8 2022-11-29    448668\n 9 2022-11-30    449497\n10 2022-12-01    472186\n# … with 20 more rows\n\n\nAnd we’re ready to our first try:\n\nCodehc <- hchart(datag, \"line\", hcaes(date, downloads))\nhc\n\n\n\n\n\n\n\nJust According to Keikaku\n\nNow, there are some changes we need to do:\n\nChange line to area spline.\nPut every axis in the opposite side.\nClean the axis and use a bigger font size.\nRemove the lables and reduce number of axis ticks.\nA lot of tweaks!\nAnd the most important step in this chart: use all the space, reducing the margins and move the x-axis labels to the inner side. Using the l-screen option in distill package.\n\n\nCodecolor_theme <- \"#E76235\" # extracted with chrome extension\n\nhchart(datag, \"areaspline\", hcaes(date, downloads), name = \"Downloads\") %>% \n  hc_xAxis(\n    title = list(text = NULL),\n    opposite = TRUE,\n    gridLineWidth = 1,\n    gridLineColor = color_theme, # vertical lines\n    tickColor = color_theme,\n    lineColor = \"transparent\",  # horizontal line,\n    labels = list(style = list(color = color_theme, fontSize = \"16px\")),\n    tickInterval = 8 * 24 * 3600 * 1000 # interval of 1 day (in your case = 60)\n    ) %>%\n  hc_yAxis(\n    title = list(text = \"\"),\n    opposite = TRUE,\n    gridLineColor = \"transparent\",\n    showFirstLabel = FALSE,\n    labels = list(\n      style = list(color = color_theme, fontSize = \"16px\"),\n      align = \"left\",\n      x = -100\n    )\n  ) %>%\n  hc_plotOptions(\n    series = list(\n      color = color_theme,\n      fillColor = hex_to_rgba(color_theme, 0.20),\n      marker = list(enabled = FALSE)\n    )\n  ) %>%\n  hc_chart(\n    spacingBottom =  0,\n    spacingLeft =  -6,\n    spacingRight =  -55 # just plying to get these numbers\n  ) %>% \n  hc_size(height = 300)\n\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{kunstfuentes2019,\n  author = {Joshua Kunst Fuentes},\n  title = {When Charts Are Integrated in the Web Page},\n  date = {2019-04-08},\n  url = {https://jkunst.com/blog/posts/2019-04-08-when-charts-are-integrated-in-the-web-page},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nJoshua Kunst Fuentes. 2019. “When Charts Are Integrated in the Web\nPage.” April 8, 2019. https://jkunst.com/blog/posts/2019-04-08-when-charts-are-integrated-in-the-web-page."
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html",
    "title": "#30diasdegraficos Parte 1",
    "section": "",
    "text": "Agradecer por la iniciativa a la comunidad de R4DS_es <3:\n\n\n\n30dias\n\n\n\n\n\n\n\nEste post es muy espacial pues cumpl(e|irá|iría) muchas características.\n\nSerá el primero en español en este blog!\nHaré la mayoría de gráficos con el paquete {highcharter}, intentando ser lo más claro posible con el fin de que sirva también como introducción, casos de usos y ejemplos para el paquete. Partiremos de menos a más: desde las funciones básicas, complementando luego con mejores práctivas y agregando funcionalidades desde le mundo Javascript y HTML.\nTambién comentaremos usos y cuidados de cada uno de los tipos de gráficos para que esto también sea termine siendo una ayuda al comenzar este viaje en el mundo de la visualización. Dicho lo anterior intentaré ir siempre dando link de material de ayuda a buenas fuentes de información.\n\nAsí que sin más, vamos a cargar los paquetes necesarios que en este caso serán {datos} para los data frames, {highcharter} y {ggplot2} para graficar y {dplyr} para la manipulación de datos. Eventualmente utilizaremos otros paquetes como {lubridate} o {forcats} a medida que necesitemos de ellos.\n\nCodelibrary(datos)       # datos\nlibrary(highcharter) # gráficos\nlibrary(ggplot2)     # más gráficos  \nlibrary(dplyr)       # manipulación de datos\nlibrary(tidyr)       # más manipulación de datos"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-1-barrascolumnas",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-1-barrascolumnas",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 1: barras/columnas",
    "text": "Día 1: barras/columnas\nEl gráfico más popular, quizás el más fácil de leer. Algunas consideraciones:\n\nGeneralmente se utliza para visualizar conteos o cantidades agrupadas.\nNo es recomendable usar muchas categorías. Obviamente dependerá del espacio pero la idea es no generar tantas barras para seguir viendo las categorías\n\n\nCodeconteo_clases <- count(millas, clase)\nconteo_clases\n\n# A tibble: 7 × 2\n  clase           n\n  <chr>       <int>\n1 2asientos       5\n2 compacto       47\n3 mediano        41\n4 minivan        11\n5 pickup         33\n6 subcompacto    35\n7 suv            62\n\n\nAhora teniendo listo del data frame, usaremos la función hchart del paquete highcharter. La forma de utilizarlo es hchart(dataframe, tipografico, hcaes(mapeo))\nDe esta forma obtenemos nuestro gráfico interactivo con {highcharter}:\n\nCodehchart(conteo_clases, \"column\", hcaes(x = clase, y = n))\n\n\n\n\n\n\nEn un gráfico de barras usualmente se ordenan los conteos y siempre es bueno dar más contexto a la visualización con un título y/o súbtítulo. Para lo primero reordenaremos los registros de forma descente con la función y convertiremos la variable clase en un factor cuyos niveles estén ordenados según cantidad de vehículos. Para agregar el título usaremos la función hc_title usando el argumento text:\n\nCodelibrary(forcats) # para usar la función fct_inorder\n\nconteo_clases <- conteo_clases %>% \n  arrange(-n) %>% \n  mutate(clase = fct_inorder(clase))\n\nhc01 <- hchart(conteo_clases, \"column\", hcaes(x = clase, y = n), name = \"Conteo\") %>% \n  hc_title(text = \"Conteo de tipos de automóviles en los datos 'millas'\")\n\nhc01"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-2-líneas",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-2-líneas",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 2: líneas",
    "text": "Día 2: líneas\nOtro clásico. El gráfico de lineas se utiliza generalmente cuando existe una variable temporal en nuestros datos. También tiene sus variaciones como los slopecharts o bumpcharts.\nLos datos que utilizaremos corresponden de paises del paquete {datos}, que orignalmente pertencen al {gapminder}. Para simplificar la información agrouparemos por continente y año para obtener un promedio ponderado por la población de cada país.\n\nCodecontinentes <- paises %>% \n  group_by(anio, continente) %>% \n  summarise(\n    pib_per_capita_pond = weighted.mean(pib_per_capita, poblacion),\n    esperanza_de_vida_pond = weighted.mean(esperanza_de_vida, poblacion)\n  )\n\ncontinentes\n\n# A tibble: 60 × 4\n# Groups:   anio [12]\n    anio continente pib_per_capita_pond esperanza_de_vida_pond\n   <int> <fct>                    <dbl>                  <dbl>\n 1  1952 África                   1311.                   38.8\n 2  1952 Américas                 8528.                   60.2\n 3  1952 Asia                      806.                   42.9\n 4  1952 Europa                   6097.                   64.9\n 5  1952 Oceanía                 10136.                   69.2\n 6  1957 África                   1445.                   40.9\n 7  1957 Américas                 9098.                   62.0\n 8  1957 Asia                      998.                   47.3\n 9  1957 Europa                   7535.                   66.9\n10  1957 Oceanía                 11192.                   70.3\n# … with 50 more rows\n\n\nEn esta oportunidad utilizaremos group = continente al realizar el mapeo para separar los datos según esta variable.\n\nCodehchart(continentes, \"line\", hcaes(anio, esperanza_de_vida_pond, group = continente))\n\n\n\n\n\n\n¿Qué podemos mejora? ¡Mucho! Por ejemplo es dificil comparar para un mismo año, los valores aparecen con muchos decimales, podemos mejorar las leyendas para que sea más fácil asociar las líneas, colores y continentes, para eso usaremos la funciòn hc_tooltip para modificar el tooltip y hc_legend para mejorar las leyendas\n\nCodehc02 <- hchart(continentes, \"line\", hcaes(anio, esperanza_de_vida_pond, group = continente)) %>% \n  hc_tooltip(table = TRUE, valueDecimals = 2) %>% \n  hc_legend(layout = \"proximate\")\n\nhc02"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-3-puntosburbujas",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-3-puntosburbujas",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 3: puntos/burbujas",
    "text": "Día 3: puntos/burbujas\nSeguimos con los gráficos tradicionales. El gráfico de puntos o scatter plot se utiliza generelamente para observa la relación entre dos variables continuas. Luego el gráfico se puede complementar/complejizar agregando tamaño, forma, colores a los puntos para agregar más información.\n\nCodepaises_2007 <- filter(paises, anio == 2007)\npaises_2007\n\n# A tibble: 142 × 6\n   pais       continente  anio esperanza_de_vida poblacion pib_per_capita\n   <fct>      <fct>      <int>             <dbl>     <int>          <dbl>\n 1 Afganistán Asia        2007              43.8  31889923           975.\n 2 Albania    Europa      2007              76.4   3600523          5937.\n 3 Argelia    África      2007              72.3  33333216          6223.\n 4 Angola     África      2007              42.7  12420476          4797.\n 5 Argentina  Américas    2007              75.3  40301927         12779.\n 6 Australia  Oceanía     2007              81.2  20434176         34435.\n 7 Austria    Europa      2007              79.8   8199783         36126.\n 8 Baréin     Asia        2007              75.6    708573         29796.\n 9 Bangladesh Asia        2007              64.1 150448339          1391.\n10 Bélgica    Europa      2007              79.4  10392226         33693.\n# … with 132 more rows\n\n\nDe la forma usual, utilizaremos la función hchart:\n\nCodehchart(paises_2007, \"scatter\", hcaes(pib_per_capita, esperanza_de_vida, group = continente))\n\n\n\n\n\n\nEs un buen gráfico para patir ¿no? Ahora intentaremos:\n\nAgregar información de la población a través del tamaño del punto (mapeo!).\nUtilizar captions para dar contexto o una explicación de lo que se puede observar. Utilizaremos código HTML, esto es tags como: <b></b> para negrita <i></i> para itálicas, <br/> para salto de línea, etc. existen muchos y nunca están de más conocerlos.\nSimplificar el tooltip indicando solamente el nombre del país, para esto utilizaremos el argumento pointFormat en la función hc_tooltip dando como valor \"{point.pais}\": {} indica que será un valor dinámico (bien simplificado este comentario), point siempre va pues se refiere al punto que el tooltip se está refiriendo, finalmente pais para señalar que utilizaremos esta columna del data frame.\nFinalmente, cuando existen variables que son asimétricas -están cargadas hacia un lado- es bueno probar cambiando la escala del eje, en nuestro caso el PIB. Acá será útil nuevamente el caption para recordar que se está usando escala logarítmica. Esto se hace con simplemente hc_xAxis(type = \"logarithmic\").\n\n\nCodetexto_explicativo <- \"El gráfico nos muestra la relación entre el \n<b>PIB percápita</b> y la <b>Esperanza de vida</b> para países en el año 2007.\nSe observa que la gran cantidad de paise con baja esperanza de vida pertenecen\nal continente Africano de los cuales la mayoría posee bajo PIB per cápita.<br/>\nPara <b>PIB percápita</b> se está utlizando una escala <i>logarítmica</i> debido\na la asimetría de esta variable.\"\n\nhc03 <- hchart(\n  paises_2007, \n  \"scatter\",\n  hcaes(pib_per_capita, esperanza_de_vida, group = continente, z = poblacion),\n  maxSize = 30 # para fijar y setar el tamaño máximo\n  ) %>% \n  hc_tooltip(pointFormat = \"{point.pais}\") %>% \n  hc_caption(text = texto_explicativo) %>% \n  hc_title(text = \"Relación entre PIB y Esperanza de vida\") %>% \n  hc_xAxis(type = \"logarithmic\")\n\nhc03"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-4-gráficos-con-facetas",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-4-gráficos-con-facetas",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 4: gráficos con facetas",
    "text": "Día 4: gráficos con facetas\nLas facetas son una buena forma de desaturar un gráfico con mucha información visual creando pequeños graficos particionando los datos. En este caso, no son muchos los paquetes o librerías que manejan tan bien esta característica o funcionalidad como {ggplot2}. En el caso de {highcharter} esta funcionalidad es limitada además manual, teniendo como solución realizar gráficos por separado y luego mostrándolos todos juntos.\nSiguiendo con {ggplot2}, esta se realiza automágicamente con la función facet_wrap (existe también ?facet_grid) indicando por que variable partcionar los datos. Un tip que veces se utiliza es plotear todos los datos en cada faceta con un color suave con el fin de comparar la distribución o forma de los datos particulares de la faceta con el total. Esto se hace agregando una capa (geom) del mismo tipo con unos datos que no posean la variable para realizar las facetas; que en nuestro ejemplo es Especie:\n\nCodeflores_auxiliar <- flores %>% \n  select(Largo.Sepalo, Ancho.Sepalo)\n\nggplot(flores) +\n  geom_point(aes(Largo.Sepalo, Ancho.Sepalo), color = \"gray90\", data = flores_auxiliar, size = 1) +\n  geom_point(aes(Largo.Sepalo, Ancho.Sepalo, color = Especie), size = 1.5) +\n  scale_color_viridis_d(end = 0.8) +\n  facet_wrap(vars(Especie)) +\n  labs(title = \"Distribución de Largo y Ancho de Sépalo según Especie\")\n\n\n\n\nMedio/Avanzado. Si quisiéramos realizar de todas formas con {highcharter}, una solución sería la siguiente: crear ejes 3 ejes, una para cada Especie/grupo y luego asignar para cada grupo un eje.\n\nCodehc04 <- hchart(\n  flores, \n  \"scatter\",\n  hcaes(Largo.Sepalo, Ancho.Sepalo, group = Especie),\n  yAxis = c(0, 1, 2) # parte clave para asignar cada grupo a cada eje Y\n  ) %>% \n  # esta es la parte donde se crean *manualmente* 3 ejes.\n  hc_yAxis_multiples(\n    create_yaxis(\n      naxis = 3,\n      lineWidth = 2,\n      title = purrr::map(0:2, ~list(text = \"Ancho.Sepalo\"))\n      )\n  ) %>% \n  hc_title(text = \"Distribución de Largo y Ancho de Sépalo según Especie\")\n\nhc04"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-5-diagrama-de-arcos",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-5-diagrama-de-arcos",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 5: diagrama de arcos",
    "text": "Día 5: diagrama de arcos\nLos diagrama de arcos son un caso de especial de layout al graficar redes. Layout se refiere a la distribución visual de nodos (o vertices) y aristas. Las redes muestran relacion entre pares de observaciones en los datos.\nEn lo personal el layout no me agrada mucho pues no lo considero algo que aporte. De todas formas existe mucha documentación para realizar este tipo de gráficos con {ggplot2} con ayuda de la librería {ggraph} cuya documentación está acá."
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-6-donut",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-6-donut",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 6: donut",
    "text": "Día 6: donut\n¿A quien no le gustan las donas? Los gráficos de donut son un caso especial de los gráficos de pie en el cual se remueve parte del centro el cual reduce la distorción (visual) al percibir las cantidades. Este gráfico, al igual que el pie, se utiliza generalmente para demostrar la distribución de un total.\nPara realizar un gráfico de donut con {highcharter} se debe considerar lo siguiente:\n\nHace un gráfico de tipo “pie” utilizando los argumentos name e y en el mapeo para la categoría y cantidad respectivamente.\nUsar el argumeno innerSize con algún porcentaje para cuanta área remover y así obtener un gráfico de donut.\nEn este caso particular, calcularemos el porcentaje como valor y luego con el paquete {scales} transformaremos ese número en formato procentaje.\nCon el valor anterior lo utilizaremos para crear etiquetas (labels) con más información usando el argumento dataLabels con el valor \"{point.name}<br>({point.porcentaje})\" esto escribirá algo del tipo: “categoría (porcentaje%)” para cada punto.\n\n\nCodelibrary(scales)\n\ndiamantes_cortes <- count(diamantes, corte)\ndiamantes_cortes <- mutate(diamantes_cortes, porcentaje = percent(n/sum(n)))\n\ndiamantes_cortes\n\n# A tibble: 5 × 3\n  corte         n porcentaje\n  <ord>     <int> <chr>     \n1 Regular    1610 3.0%      \n2 Bueno      4906 9.1%      \n3 Muy bueno 12082 22.4%     \n4 Premium   13791 25.6%     \n5 Ideal     21551 40.0%     \n\nCode# para un pie remover la parte de \"innerSize\"\nhc06 <- hchart(\n  diamantes_cortes, \"pie\", hcaes(name = corte, y = n),\n  name = \"Corte\",\n  innerSize = \"80%\",\n  dataLabels = list(format = \"{point.name}<br>({point.porcentaje})\")\n  )\n\nhc06\n\n\n\n\n\n\nMedio/Avanzado. Ahora intentaremos utilizar el espacio interior para colocar un tooltip más grande y más textual (como un knob chart). Otra parte importante es utilizar el argumento positioner en highcharts con el fin de que independiente del valor en el cual el cursor está, éste siempre este al medio del gráfico.\n\nCodehc06 %>% \n  # con la siguiente opción desactivamos los 'dataLabels' para que no \n  # exista infomración redundante\n  hc_plotOptions(\n    series = list(dataLabels = list(enabled = FALSE))\n  ) %>% \n  hc_tooltip(\n    useHTML = TRUE,\n    style = list(fontSize = \"30px\"),\n    headerFormat = \"\",\n    pointFormat = \"<div style='text-align: center;'>Corte <b>{point.name}</b><br>{point.y} casos<br>{point.porcentaje} del total</div>\",\n    positioner = JS(\n      \"function () {\n      \n        /* one of the most important parts! */\n        xp =  this.chart.chartWidth/2 - this.label.width/2\n        yp =  this.chart.chartHeight/2 - this.label.height/2\n      \n        return { x: xp, y: yp };\n      \n      }\"),\n    shadow = FALSE,\n    borderWidth = 0,\n    backgroundColor = \"transparent\",\n    hideDelay = 1000\n    )"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-7-ridgeline",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-7-ridgeline",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 7: ridgeline",
    "text": "Día 7: ridgeline\nEl gráfico de tipo ridgeline viene a solucionar la superposición de muchas densidades (o histogramas) haciendo distintos ejes x dependiendo de una variable. Trabajarlo con {ggplot2} es muy sencillo dada la extensión {ggridges} por Claus Wilke.\n\nCode# install.packages(\"ggridges\")\nlibrary(ggridges)\nlibrary(lubridate)\n\nclima <- clima %>% \n  mutate(\n    fecha = ymd(paste(anio, mes, dia, paste = \"-\")),\n    mes_fecha = fct_inorder(months(fecha))\n  )\n\ngg07 <- ggplot(clima, aes(x = temperatura, y = mes_fecha, fill = stat(x))) +\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\", option = \"C\")\n\ngg07\n\n\n\n\nDirecto y sin mucha complicación.\nAvanzado. HighchartsJS -por tanto {highcharter}- no soporta este tipo de gráfico… Pero, pero, peeero podemos todavía crearlo con ayuda del gráfico anterior. ¡¿Cómo?! Cuando uno grafica una densidad, como el caso anterior todo la información es traducida a posiciones, colores y otras características, las cuales {ggplot2} emplea para realizar finalmente grafico. Gracias a la funcion ggplot_build se puede acceder a dichos datos por lo que se pueden emplear para graficar con {highcharter}.\nNos ayudaremos con los tags de {htmltools} para que sea más facil definir la tabla en HTML en el argumento pointFormat.\n\nCodelibrary(htmltools)\n\ndd07 <- as_tibble(ggplot_build(gg07)$data[[1]])\n\nglimpse(dd07)\n\nRows: 6,144\nColumns: 22\n$ fill           <chr> \"#0D0887\", \"#0F0887\", \"#110888\", \"#130888\", \"#150888\", …\n$ height         <dbl> 4.025610e-06, 6.009589e-06, 8.838627e-06, 1.281201e-05,…\n$ x              <dbl> 6.208682, 6.401564, 6.594446, 6.787328, 6.980209, 7.173…\n$ density        <dbl> 4.025610e-06, 6.009589e-06, 8.838627e-06, 1.281201e-05,…\n$ ndensity       <dbl> 0.0001013047, 0.0001512317, 0.0002224246, 0.0003224150,…\n$ datatype       <chr> \"ridgeline\", \"ridgeline\", \"ridgeline\", \"ridgeline\", \"ri…\n$ y              <mppd_dsc> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ PANEL          <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ group          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ iscale         <dbl> 12.13373, 12.13373, 12.13373, 12.13373, 12.13373, 12.13…\n$ scale          <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ rel_min_height <dbl> 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0…\n$ ymin           <mppd_dsc> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ymax           <mppd_dsc> 1.000147, 1.000219, 1.000322, 1.000466, 1.000667, …\n$ min_height     <dbl> 0.000824149, 0.000824149, 0.000824149, 0.000824149, 0.0…\n$ colour         <chr> \"black\", \"black\", \"black\", \"black\", \"black\", \"black\", \"…\n$ size           <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, …\n$ linetype       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ alpha          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ point_shape    <dbl> 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,…\n$ point_size     <dbl> 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, …\n$ point_stroke   <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, …\n\nCodedd07_02 <- dd07 %>% \n  filter(y != ymax) %>%\n  filter(abs(y - ymax) >= 0.01) %>%\n  select(x, y, ymax, group, density) %>% \n  mutate_all(round, 3) %>%\n  arrange(group, x) %>% \n  rename(l = y, h = ymax) \n\n# transformar el grupo al mes\ndd07_02 <- dd07_02 %>% \n  mutate(\n    fecha = ymd(paste(\"2003\", group, 1, paste = \"-\")),\n    mes_fecha = fct_inorder(months(fecha))\n  )\n\ndd07_02\n\n# A tibble: 3,031 × 7\n       x l          h          group density fecha      mes_fecha\n   <dbl> <mppd_dsc> <mppd_dsc> <dbl>   <dbl> <date>     <fct>    \n 1  8.91 1          1.012          1   0     2003-01-01 enero    \n 2  9.10 1          1.016          1   0     2003-01-01 enero    \n 3  9.30 1          1.020          1   0.001 2003-01-01 enero    \n 4  9.49 1          1.024          1   0.001 2003-01-01 enero    \n 5  9.68 1          1.030          1   0.001 2003-01-01 enero    \n 6  9.87 1          1.036          1   0.001 2003-01-01 enero    \n 7 10.1  1          1.044          1   0.001 2003-01-01 enero    \n 8 10.3  1          1.052          1   0.001 2003-01-01 enero    \n 9 10.5  1          1.062          1   0.002 2003-01-01 enero    \n10 10.6  1          1.072          1   0.002 2003-01-01 enero    \n# … with 3,021 more rows\n\nCodehc07 <- hchart(\n  dd07_02, \n  \"arearange\",\n  hcaes(x = x, low = l - 1, high = h - 1, group = mes_fecha),\n  zIndex = 12:1,\n  lineWidth = 3\n  ) %>% \n  hc_colors(viridis_pal()(12)) %>% \n  # tabla para distribución de datos\n  hc_tooltip(\n    shared = TRUE,\n    useHTML = TRUE,\n    headerFormat = \"<b>Densidad estimada en {point.x} ºF</b><table>\",\n    # pointFormat = '<tr><td><span style=\"color:{point.color}\">●</span> {series.name}</td><td><b>{point.density}</b></td></tr>',\n    pointFormat = as.character(tags$tr(\n      tags$td(\n        tags$span(style = \"color:{point.color}\", \"●\"),\n        \"{series.name}\"\n      ),\n      tags$td(tags$strong(\"{point.density}\"))\n    )),\n    footerFormat = \"</table>\",\n    crosshairs = TRUE\n    ) %>% \n\n  # todo esto es para limpiar los markers y halos\n  hc_plotOptions(\n    series = list(\n      marker = list(\n        radius = 0,\n        enabled = FALSE\n        ),\n      states = list(\n        hover = list(\n          halo = list(\n            size = 0\n          )\n        )\n      )\n    )\n  ) %>% \n  hc_legend(layout = \"proximate\") %>% \n  hc_yAxis(visible = FALSE, min = 0.5) %>% \n  hc_xAxis(title = list(text = \"Temperatura ºF\")) %>% \n  hc_title(text = \"Distribución de temperaturas por mes\") %>% \n  hc_subtitle(text = \"Datos obtenidos del data frame <pre>clima</pre> del\n              paquete datos\")\n\nhc07"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#dia-8-contorno",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#dia-8-contorno",
    "title": "#30diasdegraficos Parte 1",
    "section": "Dia 8: contorno",
    "text": "Dia 8: contorno\n¡Contornos! Este gráfico no es muy estándar, usualmente está asociado a información (geo)espacial, topográfica, o información bivariada cunado las dos variables son continuas.\nUsaremos los datos volcano que está en formato matriz, la cual usando la función melt del paquete reshape lo pasaremos a formato data frame. Luego con la función geom_contour de {ggplot2} dibujaremos los contornos de nivel del volcan. Notar que el data set de entrada son puntos x e y y un valor z, el cual se generan los contornos en función de estas tres variables; graficaremos el grid de puntos para recordar que estos son los valores de entrada.\n\nCodevolcano3d <- as_tibble(reshape2::melt(volcano))\nnames(volcano3d) <- c(\"x\", \"y\", \"z\")\n\nvolcano3d\n\n# A tibble: 5,307 × 3\n       x     y     z\n   <int> <int> <dbl>\n 1     1     1   100\n 2     2     1   101\n 3     3     1   102\n 4     4     1   103\n 5     5     1   104\n 6     6     1   105\n 7     7     1   105\n 8     8     1   106\n 9     9     1   107\n10    10     1   108\n# … with 5,297 more rows\n\nCodegg08 <- ggplot(volcano3d, aes(x, y, z = z)) +\n  geom_contour(aes(color =  ..level..), bins = 20, size = 1) +\n  geom_point(alpha = 0.1, size = 1, fill = \"black\", color = \"black\", shape = 16) +\n  scale_color_viridis_c() +\n  coord_cartesian(expand = FALSE) \n\ngg08\n\n\n\n\nIntermedio/Anvanzado. Ahora, para realizar el mismo gráfico con {highcharter} usamos la función layer_data del paquete {ggplot2} para extraer la información de la capa geom_contour a renderizar.\nOtra cosa no tan directa es colorear de acuerdo al nivel de cada linea del contorno. Para ello nos ayudaremos de la funcion colorize del paquete {highcharter} que toma un vector numérico y un set de colores e internamente utiliza la función colorRampPalette para crear una paleta de colores. Con lo anterior asociamos cada color a un nivel y extraemos los colores los cuales utilizaremos con la función hc_colors.\n\nCode# Usamos i = 1 pues la primera capa es la de los contornos (la 2d son los puntos)\ndd08 <- as_tibble(layer_data(gg08, i = 1)) \n\n# me gusta redondear para enviar menos información al objeto highcharter\ndd08 <- dd08 %>% \n  select(x, y, level, piece) %>% \n  mutate_all(round, 2)\n\ndd08 <- dd08 %>% \n  mutate(col = colorize(level, viridis_pal(option = \"B\", end = 0.9)(50)))\n\ncols <- dd08 %>% \n  distinct(level, piece, col) %>% \n  pull(col)\n\ndd08 <- dd08 %>%\n  select(-col)\n\n\nCon los datos listo solo falta crear la función con hchart y agregar detalles como:\n\nRemover los ejes con hc_xAxis(visible = FALSE) para tener un gráfico más limpio.\nEvitar que cada línea aparezca en la leyenda con showInLegend = FALSE.\nTambién cambiar el default de poner el resto de series con trasnparencia cuando una está siendo selccionada con el cursor. Esto se hace con la parte hc_plotOptions(...\n\n\nCodehc08 <- hchart(\n  dd08,\n  \"line\",\n  hcaes(x, y, group = piece),\n  showInLegend = FALSE, \n  enableMouseTracking = TRUE,\n  lineWidth = 0.5\n  ) %>%  \n  hc_colors(cols) %>% \n  hc_xAxis(visible = FALSE, max = 87, min = 1)  %>% \n  hc_yAxis(visible = FALSE, max = 61, min = 1) %>% \n  hc_tooltip(\n    headerFormat = \"\", \n    pointFormat = \"Nivel: <b>{point.level}</b><br>(x: {point.x}; y: {point.y})\"\n    ) %>% \n  hc_plotOptions(\n    series = list(\n      states = list(\n        inactive = list(\n          opacity = 0.7\n        )\n      )\n    )\n  ) %>% \n  hc_title(text = \"Información topográfica del volcán Maunga Whay en Auckland\") %>% \n  hc_subtitle(text = \"Maunga Whau es uno de los 50 volcanees en el área volcánica de Auckland. Estos \ndatos proveen informción topográfica para Maunga Whau en un grid de 10 por 10 metros.\") %>% \n  hc_caption(text = \"Datos digitalizados a partir de un mapa topográfico por <b>Ross Ihaka</b>. Estos datos no deben considerarse precisos.\")\n\nhc08"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-9-áreas-apiladas",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-9-áreas-apiladas",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 9: áreas apiladas",
    "text": "Día 9: áreas apiladas\nEl gráfico de áreas apiladas, o el apilamiento en general (stacking en inglés) se utiliza para representar el total diferenciando por otra variable. A veces este gráfico acompaña bien a conteos por tiempo incluyendo una variable categórica.\n\nCode# install.packages(\"ggplot2movies\")\ndata(movies, package = \"ggplot2movies\")\n\ncolores <- viridis_pal(option = \"B\", end = 0.8)(7)\n\npeliculas <- movies %>% \n  select(anio = year, Action:Short) %>% \n  gather(categoria, cantidad, -anio) %>% \n  group_by(anio, categoria) %>% \n  summarise(cantidad = sum(cantidad)) %>% \n  mutate(\n    categoria = case_when(\n      categoria == \"Action\" ~ \"Acción\",\n      categoria == \"Animation\" ~ \"Animación\",\n      categoria == \"Comedy\" ~ \"Comedia\",\n      categoria == \"Documentary\" ~ \"Documental\",\n      categoria == \"Drama\" ~ \"Drama\",\n      categoria == \"Romance\" ~ \"Romance\",\n      categoria == \"Short\" ~ \"Cortometraje\",\n      TRUE ~ NA_character_\n    )\n  )\n\npeliculas\n\n# A tibble: 791 × 3\n# Groups:   anio [113]\n    anio categoria    cantidad\n   <int> <chr>           <int>\n 1  1893 Acción              0\n 2  1893 Animación           0\n 3  1893 Comedia             0\n 4  1893 Documental          0\n 5  1893 Drama               0\n 6  1893 Romance             0\n 7  1893 Cortometraje        1\n 8  1894 Acción              0\n 9  1894 Animación           0\n10  1894 Comedia             0\n# … with 781 more rows\n\nCodehc09 <- hchart(peliculas, \"area\", hcaes(anio, cantidad, group = categoria)) %>% \n  # stacking! apilamiento!\n  hc_plotOptions(\n    series = list(\n      stacking = list(enbled = TRUE),\n      marker = list(symbol = \"circle\")\n      )\n  ) %>%\n  hc_colors(colores) %>% \n  hc_tooltip(table = TRUE, sort = TRUE)\n\nhc09\n\n\n\n\n\n\nMedio. Crearemos un data frame de eventos temporales, los cuales pasando a listas en un formato reconocido por highchartsJS agregaremos al gráfico como plotLines (existen también las plotBands).\n\nCodeeventos <- tibble(\n  anio = c(1930, 1941, 1990),\n  texto = c(\n    \"Comienzo era dorada en Hollywood.\",\n    \"Aparición de la televisión.\",\n    \"Comienzo aumento<br>del cine independiente.\")\n)\n\ndata_plotLine <- eventos %>% \n  transmute(\n    value = anio,\n    label = purrr::map(texto, ~ list(text = .x))\n  ) %>% \n  mutate(color = \"#666\", width = 2, zIndex = 5)\n\nhc09 <- hc09 %>% \n  hc_xAxis(\n    plotLines = list_parse(data_plotLine)\n  ) %>% \n  hc_title(\n    text = \"Cantidad de películas por Género\"\n  ) %>% \n  hc_caption(\n    text = \"Datos provenientes de <b>IMDB</b> a través del paquete ggplot2movies.<br>\n    La Mayoria de eventos fueron obtenidos a partir de lectura flash en <b>Wikipedia</b>.\"\n  )\n\nhc09\n\n\n\n\n\n\nComo segundo ejercicio ilustrativo, podemos agregar más detalles al gráfico obtenido en en los gráficos de columnas.\n\nCodeconteo_clases_millas <- count(millas, clase, cilindros) %>% \n  arrange(-n) %>% \n  mutate(\n    clase = fct_inorder(clase),\n    clase_n = as.numeric(clase) - 1,\n    cilindros = factor(cilindros, c(4,5,6,8))\n  )\n\nhc09_2 <- hchart(conteo_clases_millas, \"column\", hcaes(x = clase_n, y = n, group = cilindros)) %>% \n  hc_xAxis(categories = levels(pull(conteo_clases_millas, clase))) %>% \n  hc_title(\n    text = \"Conteo de tipos de automóviles en los datos 'millas' diferenciando \n    por cantidad de cilindros\"\n    ) %>% \n  hc_plotOptions(\n    series = list(\n      stacking = list(enabled = TRUE)  \n      )\n    ) %>% \n  hc_tooltip(shared = TRUE)\n\nhc09_2"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-10-paletas-de-colores",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#día-10-paletas-de-colores",
    "title": "#30diasdegraficos Parte 1",
    "section": "Día 10: paletas de colores",
    "text": "Día 10: paletas de colores\nMás que graficar con ciertas paletas de colores tengo las ganas de mostrar algunas funciones útiltes para manejar colores en R.\nLa primera que se me viene a la mente es la funcion show_col del paquete {scales}. Esta función permite ver los colores de un vector de colores (duh!).\n\nCodelibrary(scales)\n\n# la sintaxis que no te engañe. hue_pal() retorna una funcion por lo que\n# luego le pasamos el argumento 9\ncolores_ggplot2_default <- hue_pal()(9)\ncolores_ggplot2_default\n\n[1] \"#F8766D\" \"#D39200\" \"#93AA00\" \"#00BA38\" \"#00C19F\" \"#00B9E3\" \"#619CFF\"\n[8] \"#DB72FB\" \"#FF61C3\"\n\nCodeshow_col(colores_ggplot2_default, borders = FALSE)\n\n\n\n\n\nCodecolores_viridis <- viridis_pal(option = \"B\", begin = 0.1, end = 0.9)(16)\n\nshow_col(colores_viridis, labels = FALSE, borders = NA)\n\n\n\n\nOtro paquete que recolecta muchas paletas de muuuchoas paquetes es el paquete {paleteer} de Emil Hvitfeldt, su sitio web https://www.hvitfeldt.me. Este paquete tiene la función paletteer_c que además de retornar los colores de la paleta los imprime en consola.{paletter} tiene además la familia de funciones scale_(color|fill)_paletteer_(d|c|binned) para integrar las paletas con gráficos de {ggplot2}.\n\nCode# install.packages(\"paletteer\")\nlibrary(paletteer)\n\npaleta_scico <- paletteer_c(\"scico::tokyo\", n = 9)\n\nshow_col(paleta_scico, borders = NA)\n\n\n\n\nOtra función de utilidad es colorRampPalette del paquete {grDevices} la cual dada un vector de colores puede generar una paleta de una cantidad dada de colores intermpolanto los colores intermedios. Por ejemplo, paleta_scico es un vector de 9 colores, podemos generar una paleta de 3 colores de la siguente manera:\n\nCodecolores <- grDevices::colorRampPalette(paleta_scico)(3)\ncolores\n\n[1] \"#190D33\" \"#908B86\" \"#FFFFD8\"\n\n\nLa integración con {highcharter} no es tan complicada. Basta con darle los colores con la función hc_colors.\n\nCodehchart(\n  flores, \"scatter\", \n  hcaes(Largo.Sepalo, Ancho.Sepalo, group = Especie),\n  marker = list(radius = 5)\n  ) %>% \n  hc_colors(colores) %>% \n  hc_add_theme(hc_theme_flatdark()) %>% \n  hc_title(text = \"Usando la paleta tokyo del paquete scico a través de paletteer\")\n\n\n\n\n\n\nEso ha sido todo en esta primera parte, ya estoy ansioso por partir la segunda!"
  },
  {
    "objectID": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#anexos",
    "href": "posts/2020-05-12-30diasdegraficos-parte-1/index.html#anexos",
    "title": "#30diasdegraficos Parte 1",
    "section": "Anexos",
    "text": "Anexos\nMapeo (mapping)\nMapeo o mapping se refiere a asociar una columna de una tabla a una característica visual de un objeto. Por ejemplo para realizar un diagrama de puntos, uno debe asociar la posiciòn vertical a una columna, y la posición horizontal a otra columna. Quizás también asociar el tamaño en otra e incluso el color o forma. Más detalles en https://www.sharpsightlabs.com/blog/r-package-think-about-visualization/."
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html",
    "title": "#30diasdegraficos Parte 2",
    "section": "",
    "text": "Seguiremos utilizando los mismos paquetes que la parte anterior.\n\n\nCode\n# ejecutar estas líneas para poder instalar {datos}\n# install.packages(\"remotes\")\n# remotes::install_github(\"cienciadedatos/datos\")\n\nlibrary(datos)       # datos\nlibrary(highcharter) # gráficos\nlibrary(ggplot2)     # más gráficos  \nlibrary(dplyr)       # manipulación de datos\nlibrary(tidyr)       # más manipulación de datos\n\n\nCambiando configuración para el español.\n\n\nCode\nnewlang_opts &lt;- getOption(\"highcharter.lang\")\n\nf &lt;- Sys.Date()\ndias &lt;- weekdays((f - lubridate::days(lubridate::wday(f) - 1)) + lubridate::days(0:6))\n\nnewlang_opts$weekdays &lt;- dias\nnewlang_opts$months &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = FALSE))\nnewlang_opts$shortMonths &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))\nnewlang_opts$thousandsSep &lt;- \",\"\n\noptions(highcharter.lang = newlang_opts)"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-11-mapas-de-calor",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-11-mapas-de-calor",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 11: mapas de calor",
    "text": "Día 11: mapas de calor\nMapa de calor. Usualmente se utiliza para visualizar relaciones entre dos variables categorícas (o 2 contínuas categorizandolas). En este ejemplo utilizaremos día y hora como una variables “numericas discretas”.\nCaso de heatmaps son los visualizar distancia entre observaciones/individuos.\n\n\nCode\nmtautos2 &lt;- mtautos[1:20, ]\nmatriz_distancias &lt;- dist(mtautos2)\n\nhchart(matriz_distancias) %&gt;% \n  hc_title(text = \"Distancia entre características de los vehículos\")\n\n\n\n\n\n\nY también explorar correlaciones:\n\n\nCode\nhchart(cor(mtautos))\n\n\n\n\n\n\nMedio/Avanzado. Es la implementación de este ejemplo https://www.highcharts.com/demo/heatmap-canvas. Notar la relación de opciones en HighchartsJS y {highcharter}.\n\n\nCode\n# install.packages(\"aimsir17\")\nlibrary(lubridate)\n\ndata(observations, package = \"aimsir17\")\n\ntemperaturas &lt;- observations %&gt;% \n  filter(station == \"KNOCK AIRPORT\") %&gt;% \n  select(fecha = date, hora = hour, temperatura = temp) %&gt;% \n  mutate(fecha = as.Date(fecha))\n\n# temperaturas %&gt;% \n#   count(fecha, hora) %&gt;% \n#   count(n)\n\nhc11 &lt;- hchart(\n  temperaturas,\n  \"heatmap\",\n  hcaes(datetime_to_timestamp(fecha), hora, value = temperatura),\n  colsize =  36e5 * 24 # 1 hour * 24 = 1 day\n  ) %&gt;%\n  hc_title(text = \"Temperaturas del aeropuerto Knock\") %&gt;%\n  hc_subtitle(text = \"Datos obtenidos del paquete {aimsir17}.\") %&gt;%\n  hc_chart(zoomType = \"x\") %&gt;%\n  hc_xAxis(\n    type = \"datetime\",\n    title = list(text = FALSE),\n    showLastLabel = FALSE\n    ) %&gt;%\n  hc_yAxis(\n    minPadding = 0,\n    maxPadding = 0,\n    startOnTick = FALSE,\n    endOnTick = FALSE,\n    tickPositions = list(0, 6, 12, 18, 24),\n    tickWidth = 1,\n    min = 0,\n    max = 23,\n    reversed = TRUE,\n    labels = list(format = \"{value}:00\"),\n    title = list(text = FALSE)\n  ) %&gt;%\n  hc_tooltip(\n    headerFormat = \"Temperatura&lt;br/&gt;\",\n    pointFormat =  \"{point.x:%e %b, %Y} {point.y}:00: &lt;b&gt;{point.value} ℃&lt;/b&gt;\"\n  ) %&gt;%\n  hc_colorAxis(\n    stops = color_stops(10, colors = scales::viridis_pal(option = \"B\")(10)),\n    # fuerza a utilzar mejor el espectro de colores para que HJS no amplie el\n    # eje para tener numero \"redondos\n    startOnTick = FALSE,\n    endOnTick =  FALSE\n  ) %&gt;%\n  hc_legend(\n    align = \"right\",\n    layout = \"vertical\",\n    verticalAlign = \"top\"\n   )\n\nhc11"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-12-paleta-lollipop",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-12-paleta-lollipop",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 12: paleta (lollipop)",
    "text": "Día 12: paleta (lollipop)\nGráfico que se utiliza en forma general para describir una variable numérica para un set de individuos/registros (a diferencia de gráfico de barra que usualmente se utiliza sumando cantidades por categoría).\nLos datos a utilizar son mtautos del paquete {datos} pero pasando algunas variables a las métricas que usualemente utilizamos: libras a kilos, pulgadas cúbicas a centímeotrs cúbicos, etc.\n\n\nCode\nmtautos2 &lt;- as_tibble(mtautos) %&gt;% \n  mutate(auto = rownames(mtautos)) %&gt;% \n  arrange(desc(caballos)) %&gt;% \n  mutate(\n    auto = forcats::fct_inorder(factor(auto)),\n    peso_kg = round(0.4535923 * peso * 1000),\n    cilindrada_cc = round(16.387 * cilindrada)\n    ) \n  \nmtautos2\n\n\n# A tibble: 32 × 14\n   millas cilindros cilindrada caballos   eje  peso velocidad forma transmision\n    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n 1   15           8       301       335  3.54  3.57      14.6     0           1\n 2   15.8         8       351       264  4.22  3.17      14.5     0           1\n 3   14.3         8       360       245  3.21  3.57      15.8     0           0\n 4   13.3         8       350       245  3.73  3.84      15.4     0           0\n 5   14.7         8       440       230  3.23  5.34      17.4     0           0\n 6   10.4         8       460       215  3     5.42      17.8     0           0\n 7   10.4         8       472       205  2.93  5.25      18.0     0           0\n 8   16.4         8       276.      180  3.07  4.07      17.4     0           0\n 9   17.3         8       276.      180  3.07  3.73      17.6     0           0\n10   15.2         8       276.      180  3.07  3.78      18       0           0\n# ℹ 22 more rows\n# ℹ 5 more variables: cambios &lt;dbl&gt;, carburadores &lt;dbl&gt;, auto &lt;fct&gt;,\n#   peso_kg &lt;dbl&gt;, cilindrada_cc &lt;dbl&gt;\n\n\nLa implementación en {highcharter} es directa, solamente usar el mapeo de name para la variable categórica y low para la numérica (low dado que esta es una modificación del gráfico de dumbbell que utiliza además high).\nBasico/Medio. En esta oportunidad haremos un tooltip de tipo tabla con el fin de mostrar más información que los HP de cada vehículo. Para esto usaremos la función auxiliar tooltip_table en el argumento pointFormat.\n\n\nCode\nx &lt;- c(\"Caballos:\", \"Peso\", \"Cilindrada\")\ny &lt;- c(\n  \"{point.y} HP\",\n  \"{point.peso_kg} kg\",\n  \"{point.cilindrada_cc} cc\"\n)\n\nhc12 &lt;- hchart(mtautos2, \"lollipop\", hcaes(name = auto, low = caballos), name = \"caballos (HP)\") %&gt;% \n  hc_xAxis(type = \"category\") %&gt;% \n  hc_yAxis(labels = list(format = \"{value} HP\")) %&gt;% \n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = tooltip_table(x, y)\n    ) %&gt;% \n  hc_title(\n    text = \"Caballos de fuerza para autómóviles de Motor Trend\"\n  ) %&gt;% \n  hc_subtitle(\n    text = \"Los datos fueron extraídos de la revista Motor Trend de Estados \n    Unidos de 1974, y tiene datos de consumo de combustible y 10 aspectos de diseño \n    y rendimiento para 32 automóviles (modelos de 1973-1974).\"\n  )\n\nhc12"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-13-visualizar-datos-temporales",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-13-visualizar-datos-temporales",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 13: visualizar datos temporales",
    "text": "Día 13: visualizar datos temporales\nNotar que el último gráfico del día 11 es un caso particular de de visualizar datos temporales.\nUsualmente en R los datos temporales o serie de tiempo vienen en un objecto de clase ts (time series) que básicamente son valores numéricos asociado a una fecha (o índice). Notar que también datos temporales pueden perfectamente almacenarse en un data.frame, nota los datos observations del día 11.\nPara grafica objectos de clase ts en {highcharter} es bastante directo dado que hchart es una función genérica. Esto significa que la función dependiendo de la clase del objeto la interpretará/graficará de la forma que corresponde. Por ejemplo ts y data.frame son clases que la función hchart reconoce, y existen muuuchas más clases que hchart puede interpretar, intenta correr methods(\"hchart\") para listar todas las clases que actualmente esta función soporta.\nVolviendo a nuestro gráfico en R existe los datos co2 que son una serie de tiempo (clase ts).\n\n\nCode\ndata(co2)\n\nstr(co2)\n\n\n Time-Series [1:468] from 1959 to 1998: 315 316 316 318 318 ...\n\n\nCode\nhc13 &lt;- hchart(co2, name = \"Concentración\") %&gt;% \n  hc_title(\n    # para poder usar el tag html \"sub\" para subindices\n    useHTML = TRUE,\n    text = \"Concentración atomsférica de CO&lt;sub&gt;2&lt;/sub&gt; en Mauna Loa\"\n  ) %&gt;% \n  hc_subtitle(\n    text = \"Las concentraciones atmosféricas de CO2 se expresan en partes por \n    millón (ppm) y se informan en la escala preliminar de fracción molar\n    manométrica SIO de 1997.\"\n  )\n\nhc13\n\n\n\n\n\n\nAprovechando que estamos revisando series de tiempo, podemos hacer una descomposición usando Loess (suavizamiento). La función stl toma un serie de tiempo descomponiéndola en tendencia, componente estacional y ruido.\nComo veremos, el gráfico se realiza simplemente como hchart(descomposicion):\n\n\nCode\ndescomposicion &lt;- stl(co2, \"per\")\n\nhc132 &lt;- hchart(descomposicion) %&gt;% \n  hc_tooltip(valueDecimals = 2) %&gt;% \n  hc_title(\n    useHTML = TRUE,\n    text = \"Descomposición de la Concentración atomsférica de CO&lt;sub&gt;2&lt;/sub&gt; en\n    Mauna Loa utilizando la funcion &lt;code&gt;stl&lt;/code&gt;\"\n  ) %&gt;% \n  hc_subtitle(\n    text = \"&lt;b&gt;Descripción del comando &lt;code&gt;stl&lt;/code&gt;&lt;/b&gt;:\n    El componente estacional se encuentra al suavizar loess la sub-serie\n    estacional (la serie de todos los valores de enero, ...); si s.window = \n    'periódico' suavizado se reemplaza efectivamente tomando la media. Los \n    valores estacionales se eliminan y el resto se suaviza para encontrar la \n    tendencia. El nivel general se elimina del componente estacional y se agrega\n    al componente de tendencia. Este proceso se repite varias veces. El componente\n    restante son los residuos del ajuste estacional más tendencial.\"\n  ) %&gt;% \n  hc_tooltip(table = TRUE) %&gt;% \n  hc_size(height = \"700px\")\n\nhc132\n\n\n\n\n\n\nPara finalizar ejemplificaremos la integración de {highcharter} con el paquete {forecast} con el cual se puede realizar predicciones de los datos de forma simple.\n\n\nCode\nlibrary(forecast)\n\npronosticos &lt;- forecast(ets(USAccDeaths), h = 48, level = 95)\n\nhc133 &lt;- hchart(pronosticos) %&gt;% \n  hc_title(\n    text = \"Muertes por accidentes en los EE. UU. 1973–1978 más predicciones\n    generadas utilizando {forecast}\"\n  ) %&gt;% \n  hc_tooltip(shared = TRUE, valueDecimals = 2)\n\nhc133"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-14-treemaps",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-14-treemaps",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 14: treemaps",
    "text": "Día 14: treemaps\nEs un buen gráfico para sustituir el gráfico de barras cuando la cantidad de categorías aumentan. También sirve como alternativa a los gráficos de torta o dunut (ñami!)\n\n\nCode\nconteo_clases &lt;- count(millas, clase)\nconteo_clases\n\n\n# A tibble: 7 × 2\n  clase           n\n  &lt;chr&gt;       &lt;int&gt;\n1 2asientos       5\n2 compacto       47\n3 mediano        41\n4 minivan        11\n5 pickup         33\n6 subcompacto    35\n7 suv            62\n\n\nCode\nhchart(\n  conteo_clases,\n  \"treemap\",\n  hcaes(clase, value = n, colorValue = n),\n  borderColor = NA # elimina border y se tiene un aspecto más limpio imho\n  ) %&gt;% \n  hc_colorAxis(stops  = color_stops()) %&gt;% \n  hc_title(text = \"Conteo de tipos de automóviles en los datos 'millas'\") %&gt;% \n  hc_colorAxis(endOnTick = FALSE)\n\n\n\n\n\n\nAvanzado. Este es una guia en español para hacer un treemap mostrando la cardinalidad de cada tipo y subtipo de pokemon. Primero descargaremos los datos desde el repositorio https://github.com/PokeAPI/pokeapi/tree/master/data/v2/csv.\nPartiremos con la lista de pokemon:\n\n\nCode\nlibrary(readr)\n\nurl_base &lt;- \"https://raw.githubusercontent.com/PokeAPI/pokeapi/master/data/v2/csv\"\n\npkmnes &lt;- read_csv(file.path(url_base, \"pokemon.csv\"))\npkmnes\n\n\n# A tibble: 1,302 × 8\n      id identifier species_id height weight base_experience order is_default\n   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     1 bulbasaur           1      7     69              64     1          1\n 2     2 ivysaur             2     10    130             142     2          1\n 3     3 venusaur            3     20   1000             263     3          1\n 4     4 charmander          4      6     85              62     5          1\n 5     5 charmeleon          5     11    190             142     6          1\n 6     6 charizard           6     17    905             267     7          1\n 7     7 squirtle            7      5     90              63    10          1\n 8     8 wartortle           8     10    225             142    11          1\n 9     9 blastoise           9     16    855             265    12          1\n10    10 caterpie           10      3     29              39    14          1\n# ℹ 1,292 more rows\n\n\nAhora los tipos de pokemon:\n\n\nCode\npkmn_nombre_tipos &lt;- read_csv(file.path(url_base, \"type_names.csv\")) %&gt;% \n  # inglés es 9, Japonez es 1, español 7\n  filter(local_language_id == 9)\n\npkmn_tipo &lt;- read_csv(file.path(url_base, \"pokemon_types.csv\"))\npkmn_tipo &lt;- pkmn_tipo %&gt;% \n  mutate(slot = paste0(\"type_\", slot)) %&gt;% \n  left_join(pkmn_nombre_tipos, by = \"type_id\") %&gt;% \n  select(pokemon_id, slot, name) %&gt;% \n  spread(slot, name)\n\n\nAhora, la gracia del treemap que haremos es que serán los colores. Esto es lo que hara llamativo nuestro gráfico.\n\n\nCode\npkmn_colores_tipo &lt;- pkmn_nombre_tipos %&gt;% \n  pull(name) %&gt;% \n  setdiff(c(\"???\", \"Shadow\")) %&gt;% \n  purrr::map_df(function(t){\n  # t &lt;- \"psychic\"\n  message(t)\n  \n  col &lt;- \"http://pokemon-uranium.wikia.com/wiki/Template:%s_color\" %&gt;% \n    sprintf(t) %&gt;%\n    xml2::read_html() %&gt;% \n    rvest::html_nodes(\"span &gt; b\") %&gt;% \n    rvest::html_text()\n  \n  tibble(type = t, color = paste0(\"#\", col))\n})\n\n\nAhora, calcularemos todas las combinaciones entre todos los colores para luego promediarlos y generar un matiz entre el color con el del segundo tipo. Esto se hace con la función colorRampPalette.\n\n\nCode\npkmn_colores_tipo2 &lt;- crossing(\n  color_1 = pkmn_colores_tipo$color,\n  color_2 = pkmn_colores_tipo$color\n  ) %&gt;% \n  mutate(\n    color_f = purrr::map2_chr(\n      color_1,\n      color_2,\n      ~ colorRampPalette(c(.x, .y))(100)[round(100 * .25)])\n    )\n\npkmn_colores_tipo2\n\n\n# A tibble: 324 × 3\n   color_1 color_2 color_f\n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n 1 #6890F0 #6890F0 #6890F0\n 2 #6890F0 #7038F8 #697AF1\n 3 #6890F0 #705848 #6982C7\n 4 #6890F0 #705898 #6982DA\n 5 #6890F0 #78C850 #6B9DC9\n 6 #6890F0 #98D8D8 #73A1EA\n 7 #6890F0 #A040A0 #757CDC\n 8 #6890F0 #A890F0 #7790F0\n 9 #6890F0 #A8A878 #7795D2\n10 #6890F0 #A8B820 #7799BD\n# ℹ 314 more rows\n\n\nLos datos! EL JOIN.\n\n\nCode\npkmn &lt;- pkmnes %&gt;% \n  left_join(pkmn_tipo, by = c(\"id\" = \"pokemon_id\")) %&gt;% \n  left_join(pkmn_colores_tipo %&gt;% rename(type_1 = type, color_1 = color), by = \"type_1\") %&gt;% \n  left_join(pkmn_colores_tipo %&gt;% rename(type_2 = type, color_2 = color), by = \"type_2\") %&gt;% \n  left_join(pkmn_colores_tipo2, by =  c(\"color_1\", \"color_2\")) %&gt;% \n  mutate(color_f = ifelse(is.na(color_f), color_1, color_f))\n\n\nAhora obtendremos los prin\n\n\nCode\ndprinc &lt;- pkmn %&gt;% \n  select(name = type_1, color = color_1) %&gt;% \n  distinct() %&gt;% \n  mutate(id = str_to_id(name))\n\ndsecun &lt;- pkmn %&gt;% \n  count(type_1, type_2, color_f) %&gt;% \n  # los siguiente nombre de columnas son para que highcharts los use \n  # internamente.\n  transmute(\n    name =  ifelse(is.na(type_2), paste(\"only\", type_1), type_2),\n    parent = str_to_id(type_1),\n    color = color_f,\n    value = n\n    ) %&gt;% \n  mutate(id = as.character(row_number()))\n\ndd &lt;- list(dprinc, dsecun) %&gt;%\n  purrr::map(mutate_if, is.factor, as.character) %&gt;% \n  bind_rows() %&gt;% \n  list_parse() %&gt;% \n  purrr::map(function(x) x[!is.na(x)])\n\n\nA continuación, finalmente, uno de los treemaps del cual estoy orgulloso! :)\n\n\nCode\nhc14 &lt;- highchart() %&gt;% \n  hc_chart(type = \"treemap\") %&gt;% \n  hc_title(\n    text = \"Pokemon por tipos\"\n  ) %&gt;% \n  hc_add_series(\n    data = dd,\n    allowDrillToNode = TRUE,\n    levelIsConstant = FALSE,\n    textOverflow = \"clip\",\n    dataLabels = list(color = \"white\"),\n    levels = list(\n      list(\n        level = 1,\n        borderWidth = 1,\n        dataLabels = list(\n          enabled = TRUE,\n          verticalAlign = \"top\",\n          align = \"left\",\n          style = list(fontSize = \"12px\", textOutline = FALSE)\n          )\n        ),\n      list(\n        level = 2,\n        borderWidth = 0,\n        dataLabels = list(enabled = FALSE)\n        )\n      )\n    ) %&gt;% \n  # esto es para que el primer nivel, que no tiene color asigando, \n  # sea transparente.\n  hc_colors(\"trasnparent\")\n\nhc14 %&gt;% \n  hc_size(height = 800)"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-15-dendogramas",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-15-dendogramas",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 15: dendogramas",
    "text": "Día 15: dendogramas\nLos dendogramas son una 2da iteración a la visualización de distancia entre individuos o registros en una tabla como lo es el primer gráfico del día 11. Los dendogramás son complejos de leer pues traen mucha más información debido a que podemos ver como se van agrupando (en términos de distancia) las observaciones. Que una esté cerca de otra significa que sus carácterísticas son similares.\nPara gráficar en {highcharter} haremos ya el conocido truco de extraer la información luego de generer un ggplot con la información. Un paquete para generar dendogramas usando {ggplot2} es {ggdendro}.\nLos dendogramas salen como un resultado a partir de un “agrupamiento jerárquico” que viene a su vez de una matriz de distancias, por lo que calcularemos la clasterización antes de graficar el dendograma.\n\n\nCode\n# install.packages(\"ggdendro\")\nlibrary(ggdendro)\n\nhc &lt;- hclust(dist(mtautos), \"ave\")\n\nggd &lt;- ggdendrogram(hc, rotate=TRUE)\n\ndd15 &lt;- as_tibble(ggplot2::layer_data(ggd, 2))\n\ndd152 &lt;- dd15 %&gt;% \n  select(x, xend, y, yend) %&gt;% \n  mutate(id = row_number()) %&gt;% \n  gather(key, value, -id) %&gt;% \n  mutate(key = stringr::str_remove(key, \"end\")) %&gt;% \n  group_by(id, key) %&gt;% \n  mutate(id2 = row_number()) %&gt;% \n  spread(key, value) %&gt;% \n  ungroup() %&gt;% \n  select(-id2) %&gt;% \n  mutate_if(is.numeric, round, 3)\n\nhc15 &lt;- hchart(\n  dd152,\n  \"line\",\n  # x - 1 pues al colocar categorúías \n  hcaes(x - 1, y, group = id),\n  color = \"red\",\n  showInLegend = FALSE\n  ) %&gt;% \n  # https://stackoverflow.com/questions/43638810/how-to-get-labels-from-hclust-result\n  hc_xAxis(\n    categories = hc$labels[hc$order], \n    title = list(text = \"Vehículos\")\n    ) %&gt;% \n  hc_yAxis(\n    title = list(text = \"Distancia\"),\n    endOnTick = FALSE,\n    crosshair = TRUE\n    ) %&gt;% \n  hc_tooltip(\n    headerFormat = \"\",\n    pointFormat = \"&lt;b&gt;x&lt;/b&gt;: {point.x}&lt;br&gt;&lt;b&gt;y&lt;/b&gt;:{point.y}\",\n    valueDecimals = 2\n    ) %&gt;% \n  hc_title(\n    useHTML = TRUE,\n    text = \"Dendograma en el dataset &lt;code&gt;mtautos&lt;/code&gt;\"\n    )\n  \nhc15"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-16-gráficos-de-waffle",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-16-gráficos-de-waffle",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 16: gráficos de waffle",
    "text": "Día 16: gráficos de waffle\nTambién conocidos como pie cuadrados los gráficos de waffle son una alternativa a los pie charts. Em highchartsJS -por tanto en {highcharter}- el equivalente es “item”.\n\n\nCode\nset.seed(123)\n\ndiamantes_cortes_1000 &lt;- diamantes %&gt;% \n  sample_n(1000) %&gt;% \n  count(corte)\n\ndiamantes_cortes_1000\n\n\n# A tibble: 5 × 2\n  corte         n\n  &lt;ord&gt;     &lt;int&gt;\n1 Regular      29\n2 Bueno       101\n3 Muy bueno   227\n4 Premium     250\n5 Ideal       393\n\n\nCode\nhc16 &lt;- hchart(\n  diamantes_cortes_1000,\n  \"item\", \n  hcaes(name = corte, y = n),\n  name = \"cortes\",\n  marker = list(symbol = \"square\"),\n  showInLegend = TRUE\n  ) %&gt;% \n  hc_title(\n    text = \"Distribución de cortes en una muestra de 1000 diamantes\"\n  )\n\nhc16\n\n\n\n\n\n\nTambién tiene se puede configurar para que en realidad parezca un “parlamento”.\n\n\nCode\nhchart(\n  diamantes_cortes_1000,\n  \"item\", \n  hcaes(name = corte, y = n),\n  name = \"cortes\",\n  # marker = list(symbol = \"square\"),\n  showInLegend = TRUE,\n  size = \"100%\",\n  center = list(\"50%\", \"75%\"),\n  startAngle = -100,\n  endAngle  = 100\n  ) %&gt;% \n  hc_title(\n    text = \"Distribución de cortes en una muestra de 1000 diamantes con\n    un layout de &lt;i&gt;Parlamento&lt;/i&gt;\"\n  ) %&gt;% \n  hc_legend(\n    labelFormat = '{name} &lt;span style=\"opacity: 0.4\"&gt;{y}&lt;/span&gt;'\n  )"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-17-diagramas-de-sankey",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-17-diagramas-de-sankey",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 17: diagramas de sankey",
    "text": "Día 17: diagramas de sankey\nCon los sankey plots se puede estudiar las distribución de más variables y como se distribuyen las categorías con las categorías de las variables adyacentes:\nMedio. Usualmente, los sankey necesitan un formato de datos donde se especifique desde, hacia y el peso. En una tabla usual, tidy de debe calcular los contedos de combinaciones de categorías. Para ello generamos un código el cual puede ser reusado en otra ocación con otros datos.\n\n\nCode\nencuesta2014 &lt;- encuesta %&gt;% \n  filter(anio == 2014) %&gt;% \n  filter(complete.cases(.)) %&gt;% \n  mutate(edad = ggplot2::cut_number(edad, 4)) %&gt;% \n  select(estado_civil, edad, religion) %&gt;% \n  mutate(\n    estado_civil = forcats::fct_lump_lowfreq(estado_civil, other_level = \"Otro estado civil\"),\n    religion = forcats::fct_lump_lowfreq(religion, other_level = \"Otra religion\")\n  )\n\ncombinaciones &lt;- tibble(\n  var1 = names(encuesta2014),\n  var2 = lead(var1)\n) %&gt;% \n  filter(var1 != \"n\" | var2 != \"n\") %&gt;% \n  filter(complete.cases(.))\n\nencuenta2014_flujo &lt;- combinaciones %&gt;% \n  purrr::pmap_df(function(var1 = \"estado_civil\", var2 = \"edad\"){\n    \n    encuesta2014 %&gt;% \n      select(all_of(var1) , all_of(var2)) %&gt;% \n      group_by_all() %&gt;% \n      count() %&gt;% \n      ungroup() %&gt;% \n      setNames(c(\"desde\", \"hacia\", \"peso\")) %&gt;% \n      mutate_if(is.factor, as.character)\n  })\n\nhc17 &lt;- hchart(\n  encuenta2014_flujo, \n  \"sankey\",\n  hcaes(from = desde, to = hacia, weight = peso),\n  name = \"Encuesta 2014\"\n  ) %&gt;% \n  hc_title(\n  text = \"Distribución de las variables edad, estado civil y religión para los \n  datos &lt;em&gt;encuesta&lt;/em&gt; para el año 2014\"\n  )\n\nhc17"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-18-datos-espaciales",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-18-datos-espaciales",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 18: datos espaciales",
    "text": "Día 18: datos espaciales\nHay muchos tipos de datos y formas de representar espaciales:\n\nCoropletas\nPuntos/burbujas\nArcos\nContornos\nY supongo que muchos más.\n\nEn esta oportunidad haremos coropletas que viene a colorear regiones de acuerdo a valores o categoría de una variable. En highcarter podemos utilizar como entrada archivos geojson los cuales representan características grográficas.\nUtilizaremos un geojson del gran Santiago que está en el repositorio de @robsalasco (su twitter y github). También utilizaremos su paquete {sinimr} para acceder al sistema de información de municipalidades de Chile.\nPrimero, los datos grográficos:\n\n\nCode\n# remotes::install_github(\"robsalasco/sinimr\")\nlibrary(geojsonio)\n\nurl_gs_geojson &lt;- \"https://raw.githubusercontent.com/robsalasco/precenso_2016_geojson_chile/87bc72ea23ad19a116ae9af02fa1cb5ae06f29f3/Extras/GRAN_SANTIAGO.geojson\"\n\ngransantiago &lt;- jsonlite::fromJSON(url_gs_geojson, simplifyVector = FALSE)\n\n# str(gransantiago, max.level = 4)\n\ndcomuna &lt;- gransantiago$features %&gt;% \n  purrr::map_df(\"properties\") %&gt;% \n  rename_all(stringr::str_to_lower) %&gt;% \n  select(comuna, nom_comuna) %&gt;% \n  mutate(\n    comuna = as.numeric(comuna),\n    nom_comuna = stringr::str_to_title(nom_comuna)\n    )\n\ndcomuna\n\ngransantiago_geojson &lt;- geojsonio::as.json(gransantiago)\n\n\nAhora datos para rellenarlos. Como mencionamos utilizaremos el paquete {sinimr} https://github.com/robsalasco/sinimr:\n\n\nCode\n# remotes::install_github(\"robsalasco/sinimr\")\nlibrary(sinimr)\n\nvarcode &lt;- 882\n\nnombre_variable &lt;- sinimr::get_sinim_var_name(varcode)\nnombre_variable &lt;- stringr::str_to_title(nombre_variable)\n\ndvar &lt;- get_sinim(varcode, 2018, region = 13, truevalue = TRUE) %&gt;% \n  as_tibble() %&gt;% \n  select(code, value) \n  \ndvar &lt;- dvar %&gt;% \n  left_join(dcomuna, by = c(\"code\" = \"comuna\")) %&gt;% \n  mutate(value = round(value/1e6))\n\ndvar\n\n\nEn higcharter los datos goeográficos van en el arguemnto mapData y los datos que tienen la información para pintar van en el data. Notar que necesitamos parsear los datos a lista con la función list_parse y que los datos deben venir con la columna value la cual se utilizará tanto para le color, leyenda, etc. Otra cosa importante es el joinBy que viene a ser lo que en un left_join es el arguemnto by.\n\n\nCode\nhighchart(type = \"map\") %&gt;%\n  hc_add_series(\n    mapData = gransantiago_geojson,\n    data = list_parse(dvar),\n    # \"COMUNA\" es la key en el geojson, \"code\" es la key en nuestros datos: dvar\n    joinBy = c(\"COMUNA\", \"code\"),\n    showInLegend = FALSE,\n    name = nombre_variable,\n    dataLabels = list(enabled = TRUE, format = \"{point.nom_comuna}\")\n    ) %&gt;% \n  hc_colorAxis(minColor = \"white\", maxColor = \"red\", endOnTick = FALSE) %&gt;% \n  hc_tooltip(\n    # estos campos son de los datos dvar\n    pointFormat = \"&lt;b&gt;{point.nom_comuna}&lt;/b&gt;: ${point.value} MM\"\n  ) %&gt;% \n  hc_title(\n    text = \"Ingresos propios por comunas del gran Santiago para el año 2018\"\n  ) %&gt;% \n  hc_subtitle(\n    text = \"Datos obtenidos del paquete {sinimr} por @robsalasco\"\n  ) %&gt;% \n  hc_size(height = 800)\n\n\nAvanzado. Utilizaremos unas de las funcionalidades más entretenidas de {highcharter} que es poner gráficos dentro de un tooltip! Para esto es necesario tener una data parseada en lista (de nuevo list_parse) para luego utilizarla en conjunto con la función tooltip_chart en el argumento pointFormatter en la función hc_tooltip.\n\nMás detalles en http://jkunst.com/blog/posts/2019-02-04-using-tooltips-in-unexpected-ways/\n\nLos datos para este ejemplo son los del Ministerio de Ciencia que cuenta por comuna los casos registrados por COVID-19.\n\n\nCode\nlibrary(scales) # para viridis_pal\n\ndcovid &lt;- read_csv(\"https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv\")\n\ndcovid_largo &lt;- dcovid %&gt;% \n  filter(`Codigo region` == 13) %&gt;% \n  rename(comuna = `Codigo comuna`) %&gt;% \n  select(comuna, matches(\"[0-9]{4}\")) %&gt;% \n  gather(fecha, casos, -comuna) %&gt;% \n  mutate(fecha = lubridate::ymd(fecha))\n\ndcovid_ultimo &lt;- dcovid_largo %&gt;% \n  group_by(comuna) %&gt;% \n  filter(fecha == max(fecha)) %&gt;% \n  ungroup()\n\ndcovid_largo &lt;- dcovid_largo %&gt;% \n  rename(x = fecha, y = casos) %&gt;% \n  mutate(x = datetime_to_timestamp(x)) %&gt;% \n  group_by(comuna) %&gt;% \n  nest() %&gt;% \n  rename(ttdata = data) %&gt;% \n  mutate(ttdata = purrr::map(ttdata, list_parse))\n\ndcovid &lt;- left_join(\n  dcovid_ultimo,\n  dcovid_largo,\n  by = \"comuna\"\n  ) %&gt;% \n  mutate(comuna = as.numeric(comuna)) %&gt;% \n  inner_join(dcomuna, by = \"comuna\") %&gt;% \n  rename(value = casos)\n\ndcovid\n\nmaxfecha &lt;- dcovid %&gt;% \n  pull(fecha) %&gt;% \n  max() %&gt;% \n  format(\"%A %e de %B\")\n\n\n\n\nCode\nhc18 &lt;- highchart(type = \"map\") %&gt;%\n  hc_add_series(\n    mapData = gransantiago_geojson,\n    data = list_parse(dcovid),\n    # \"COMUNA\" es la key en el geojson, \"code\" es la key en nuestros datos: dvar\n    joinBy = c(\"COMUNA\", \"comuna\"),\n    showInLegend = FALSE,\n    name = \"Covid\",\n    borderColor = 'transparent',\n    borderWidth = 0.1,     \n    dataLabels = list(\n      enabled = TRUE,\n      format = \"{point.nom_comuna}\",\n      style = list(fontSize = \"12px\", color = \"#F5F5F5\")\n      )\n    ) %&gt;% \n  hc_colorAxis(\n    stops = color_stops(n = 10, viridis_pal(option = \"B\", end = 0.95)(10)),\n    # fuerza a utilzar mejor el espectro de colores para que HJS no amplie el\n    # eje para tener numero \"redondos\n    endOnTick =  FALSE\n    ) %&gt;% \n  hc_tooltip(\n    useHTML = TRUE,\n    headerFormat = \"{point.key}\",\n    pointFormatter = tooltip_chart(\n      accesor = \"ttdata\",\n      hc_opts = list(\n        subtitle = list(text = \"point.nom_comuna\"),\n        chart = list(backgroundColor = \"white\"),\n        xAxis = list(type = \"datetime\", showLastLabel = TRUE, endOnTick = FALSE),\n        yAxis = list(showLastLabel = TRUE, endOnTick = FALSE),\n        credits = list(enabled = FALSE)\n        ),\n      height = 225,\n      width = 400\n      )\n  ) %&gt;% \n  hc_title(\n    text = \"Casos COVID-19 en el Gran Santiago\",\n    align = \"center\"\n    ) %&gt;% \n  hc_subtitle(\n    text = paste(\"Datos Ministerio de Ciencia; con última actualización el\", maxfecha),\n    align = \"center\"\n    ) %&gt;% \n  hc_legend(symbolWidth = 500, align = \"center\", verticalAlign = \"top\")\n\nhc18 %&gt;% \n  hc_size(height = 800)"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-19-streamgraph",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#día-19-streamgraph",
    "title": "#30diasdegraficos Parte 2",
    "section": "Día 19: streamgraph",
    "text": "Día 19: streamgraph\nEl steamgraph puede crearse a partir de un gráfico de áreas apiladas cuando en el eje x se utiliza una variable temporal. ¿Recuerdan el gráfico de áreas apiladas que hicimos en la parte 1? En el ejemplo teníamos en el eje x una variable asociada al tiempo por lo que podemos reutilizar el código simplemente cambiado el tipo de gráfico de \"area\" a \"streamgraph\".\nPor tanto reutilizaremos el mismo código:\n\n\nCode\nlibrary(scales) # para viridis_pal\n\ndata(movies, package = \"ggplot2movies\")\n\ncolores &lt;- viridis_pal(option = \"B\", end = 0.8)(7)\n\npeliculas &lt;- movies %&gt;% \n  select(anio = year, Action:Short) %&gt;% \n  gather(categoria, cantidad, -anio) %&gt;% \n  group_by(anio, categoria) %&gt;% \n  summarise(cantidad = sum(cantidad)) %&gt;% \n  mutate(\n    categoria = case_when(\n      categoria == \"Action\" ~ \"Acción\",\n      categoria == \"Animation\" ~ \"Animación\",\n      categoria == \"Comedy\" ~ \"Comedia\",\n      categoria == \"Documentary\" ~ \"Documental\",\n      categoria == \"Drama\" ~ \"Drama\",\n      categoria == \"Romance\" ~ \"Romance\",\n      categoria == \"Short\" ~ \"Cortometraje\",\n      TRUE ~ NA_character_\n    )\n  )\n\neventos &lt;- tibble(\n  anio = c(1930, 1941, 1990),\n  texto = c(\n    \"Comienzo era dorada&lt;br&gt;en Hollywood.\",\n    \"Aparición&lt;br&gt;de la televisión.\",\n    \"Comienzo aumento&lt;br&gt;del cine independiente.\")\n)\n\ndata_plotLine &lt;- eventos %&gt;% \n  transmute(\n    value = anio,\n    label = purrr::map(texto, ~ list(text = .x))\n  ) %&gt;% \n  mutate(color = \"#666\", width = 2, zIndex = 5)\n\nhc19 &lt;- hchart(peliculas, \"streamgraph\", hcaes(anio, cantidad, group = categoria)) %&gt;%\n  hc_yAxis(visible = FALSE) %&gt;% # no tiene mucho sentido el\n  hc_colors(colores) %&gt;% \n  hc_tooltip(table = TRUE, sort = TRUE) %&gt;% \n   hc_xAxis(\n    plotLines = list_parse(data_plotLine)\n  ) %&gt;% \n  hc_title(\n    text = \"Cantidad de películas por Género\"\n  ) %&gt;% \n  hc_caption(\n    text = \"Datos provenientes de &lt;b&gt;IMDB&lt;/b&gt; a través del paquete ggplot2movies.&lt;br&gt;\n    La Mayoria de eventos fueron obtenidos a partir de lectura flash en &lt;b&gt;Wikipedia&lt;/b&gt;.\"\n  ) %&gt;% \n  # https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/verticalalign/\n  hc_chart(\n    marginRight = 120\n  ) %&gt;% \n  hc_legend(\n    align = \"right\",\n    verticalAlign = \"top\",\n    layout = \"vertical\",\n    itemMarginBottom = 10,\n    x = 0,\n    y = 150\n  )\n\nhc19"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#dia-20-redes",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#dia-20-redes",
    "title": "#30diasdegraficos Parte 2",
    "section": "Dia 20: redes",
    "text": "Dia 20: redes\nTomamos el ejemplo del paquete {economiccomplexity} en donde realiza un análisis de proximidad basado en lo que exporta cada país https://pacha.dev/economiccomplexity/articles/basic-usage.html\n\n\nCode\n# install.packages(\"economiccomplexity\")\nlibrary(economiccomplexity)\nlibrary(igraph)\nlibrary(Matrix)\n\ndata(world_trade_avg_1998_to_2000)\n\nglimpse(world_trade_avg_1998_to_2000)\n\n\nRows: 124,336\nColumns: 3\n$ country &lt;chr&gt; \"afg\", \"afg\", \"afg\", \"afg\", \"afg\", \"afg\", \"afg\", \"afg\", \"afg\",…\n$ product &lt;chr&gt; \"0011\", \"0012\", \"0111\", \"0112\", \"0113\", \"0116\", \"0223\", \"0224\"…\n$ value   &lt;dbl&gt; 30068, 16366, 19273, 893, 350, 1561, 851, 12884, 114673, 67796…\n\n\nCode\nworld_trade_avg_1998_to_2000 &lt;- world_trade_avg_1998_to_2000 %&gt;% \n  ungroup() %&gt;%\n  filter(!(country %in% c(\"ant\", \"rom\", \"scg\", \"fsm\", \"umi\")))\n\nbi &lt;- balassa_index(world_trade_avg_1998_to_2000)\n\npro &lt;- proximity(bi)\n\nnet &lt;- projections(pro$proximity_country, pro$proximity_product)\n\ndfaggregated_countries &lt;- aggregate(\n  world_trade_avg_1998_to_2000$value,\n  by = list(country = world_trade_avg_1998_to_2000$country),\n  FUN = sum\n)\n\naggregated_countries &lt;- setNames(dfaggregated_countries$x, dfaggregated_countries$country)\n\nV(net$network_country)$size &lt;- aggregated_countries[match(V(net$network_country)$name, names(aggregated_countries))]\n\nred &lt;- net$network_country\n\n\n\n\nCode\nlibrary(ggraph)\n\nggraph(red, layout = \"auto\") +\n  geom_edge_link(edge_colour = \"#a8a8a8\") +\n  geom_node_point(aes(size = size), color = \"#86494d\") +\n  geom_node_text(aes(label = name), size = 2, vjust = 2.2) +\n  ggtitle(\"Proximity Based Network Projection for Products\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\nAvanzado. Acá a partir del objeto igraph obtendremos un layout basado en el paquete {graphlayouts}. Luego dibujaremos independiente los vertices, las aristas y la información de las aristas.\n\n\nCode\nlibrary(countrycode)\n\ndfvertices &lt;- graphlayouts::layout_igraph_stress(net$network_country) %&gt;% \n  as_tibble() \n\ndfvertices &lt;- dfvertices %&gt;% \n  mutate(\n    exportacion_millones = round(size/1e6),\n    iso3c = toupper(name)\n    ) %&gt;% \n  left_join(\n    countrycode::codelist %&gt;% \n      select(iso3c, iso2c, nombre = cldr.name.es_cl),\n    by = \"iso3c\"\n  )\n\ndfvertices &lt;- dfvertices %&gt;% \n  ungroup() %&gt;% \n  mutate(\n    color = colorize(size/max(size), colors = scales::viridis_pal(option = \"B\")(10))\n  ) %&gt;% \n  rowwise() %&gt;% \n  mutate(marker = list(marker = list(fillColor = color))) %&gt;% \n  select(-color)\n\n# glimpse(dfvertices)\n# glimpse(countrycode::codelist) \n\n\n# aristas\ndfaristas &lt;- red %&gt;%\n  get.edgelist() %&gt;%\n  data.frame(stringsAsFactors = FALSE) %&gt;%\n  tbl_df() %&gt;%\n  setNames(c(\"from\", \"to\")) \n\ndfaristas &lt;- dfaristas %&gt;%\n  left_join(\n    dfvertices %&gt;% select(from = name, xf = x, yf = y),\n    by = \"from\")\n\ndfaristas &lt;- dfaristas %&gt;%\n    left_join(\n      dfvertices %&gt;% select(to = name, xt = x, yt = y),\n      by = \"to\")\n\ndfaristas2 &lt;- red %&gt;%\n    edge_attr() %&gt;%\n    data.frame(stringsAsFactors = FALSE) %&gt;%\n    tbl_df()\n\ndfaristas &lt;- bind_cols(dfaristas, dfaristas2)\n\ndfaristas &lt;- dfaristas %&gt;% \n  mutate(id = row_number()) %&gt;% \n  gather(key, value, -weight, -from, -to, -id) %&gt;% \n  mutate(key = stringr::str_remove_all(key, \"f|t\")) %&gt;% \n  group_by(id, key) %&gt;% \n  mutate(id2 = row_number()) %&gt;% \n  spread(key, value)\n\n\ndfaristas_info &lt;- dfaristas %&gt;% \n  group_by(from, to, weight, id) %&gt;% \n  summarise_at(vars(x, y), mean) %&gt;% \n  ungroup() %&gt;% \n  mutate(\n    weight = round(100*weight, 2),\n    from_iso2 = countrycode::countrycode(from, origin = \"iso3c\", destination = \"iso2c\"),\n    to_iso2 = countrycode::countrycode(to, origin = \"iso3c\", destination = \"iso2c\")\n  )\n\ndfaristas &lt;- dfaristas %&gt;% \n  select(x, y, id) %&gt;% \n  ungroup()\n\n\n\n\nCode\nhc20 &lt;- highchart() %&gt;% \n  # opciones generales\n  hc_plotOptions(\n    series = list(\n      color = hex_to_rgba(\"gray\", 0.2),\n      marker = list(enabled = FALSE),\n      states = list(\n        inactive = list(\n          opacity = 1\n          )\n        )\n      )\n    ) %&gt;% \n  hc_boost(enabled = FALSE) %&gt;% \n  hc_chart(zoomType = \"xy\") %&gt;% \n  hc_tooltip(useHTML = TRUE) %&gt;% \n  hc_xAxis(visible = FALSE) %&gt;% \n  hc_yAxis(visible = FALSE) %&gt;% \n  hc_legend(verticalAlign = \"top\", align = \"left\") %&gt;% \n  hc_title(text = \"Red basada en proyección de proximidad\") %&gt;%\n  hc_subtitle(\n      text = \"Datos y análisis provisto en el paquete {economiccomplexity}&lt;br&gt;\n      El tamaño corresponde a la exportación promedio de cada país entre los años 98 y 2000\"\n      ) %&gt;%  \n  # vertices\n  hc_add_series(\n    dfvertices,\n    \"bubble\",\n    hcaes(x, y, size = size, colorValue = size),\n    tooltip = list(\n      headerFormat = \"\",\n      pointFormat = \"\n      &lt;center&gt;\n      &lt;b&gt;{point.nombre}&lt;/b&gt;&lt;br&gt;\n      Exportaciones ${point.exportacion_millones} millones USD\n      &lt;table style=\\\" height:20px;\\\"&gt;\n      &lt;center&gt;\n      &lt;img src=\\\"https://www.countryflags.io/{point.iso2c}/shiny/64.png\\\" style=\\\"text-align: center\\\"&gt;\n      &lt;/center&gt;\n      &lt;table&gt;\n      &lt;/center&gt;\"\n    ),\n    name = \"Países\",\n    minSize = 5,\n    maxSize = 25,\n    marker = list(enabled = TRUE, fillOpacity = 1)\n  ) %&gt;% \n  # aristas\n  hc_add_series(\n    dfaristas,\n    \"line\",\n    hcaes(x, y, group = id),\n    showInLegend = FALSE,\n    enableMouseTracking = FALSE,\n    zIndex = -10\n    ) %&gt;%\n  # info aristas\n  hc_add_series(\n    dfaristas_info,\n    \"scatter\",\n    hcaes(x, y),\n    marker = list(\n      radius = 1\n    ),\n    legend = list(\n      symbolHeight = 11,\n      symbolWidth = 11,\n      symbolRadius = 5\n    ),\n    tooltip = list(\n      headerFormat = \"\",\n      pointFormat = \"&lt;center&gt;\n      &lt;b&gt;Proximidad&lt;/b&gt;&lt;br&gt;\n      {point.weight}%&lt;br&gt;\n      &lt;table style=\\\"height:20px!important\\\"&gt;\n      &lt;tr&gt;\n      &lt;img src=\\\"https://www.countryflags.io/{point.from_iso2}/shiny/64.png\\\" width=\\\"50%\\\"&gt;\n      &lt;img src=\\\"https://www.countryflags.io/{point.to_iso2}/shiny/64.png\\\" width=\\\"50%\\\"&gt;\n      &lt;/tr&gt;\n      &lt;/table&gt;\n      &lt;/center&gt;\"\n    ),\n    name = \"Información artistas\"\n  ) \n\nhc20"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html",
    "title": "#30diasdegraficos Parte 3",
    "section": "",
    "text": "Seguiremos utilizando los mismos paquetes que la parte anterior.\n\n\nCode\n# ejecutar estas líneas para poder instalar {datos}\n# install.packages(\"remotes\")\n# remotes::install_github(\"cienciadedatos/datos\")\n\nlibrary(datos)       # datos\nlibrary(highcharter) # gráficos\nlibrary(ggplot2)     # más gráficos  \nlibrary(readr)       # lectura de datos\nlibrary(dplyr)       # manipulación de datos\nlibrary(tidyr)       # más manipulación de datos\n\n\nCambiando configuración para el español.\n\n\nCode\nnewlang_opts &lt;- getOption(\"highcharter.lang\")\n\nf &lt;- Sys.Date()\ndias &lt;- weekdays((f - lubridate::days(lubridate::wday(f) - 1)) + lubridate::days(0:6))\n\nnewlang_opts$weekdays &lt;- dias\nnewlang_opts$months &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = FALSE))\nnewlang_opts$shortMonths &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))\nnewlang_opts$thousandsSep &lt;- \",\"\n\noptions(highcharter.lang = newlang_opts)"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-21-gráficos-con-anotaciones",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-21-gráficos-con-anotaciones",
    "title": "#30diasdegraficos Parte 3",
    "section": "Día 21: gráficos con anotaciones",
    "text": "Día 21: gráficos con anotaciones\nRealizaremos el ejemplo canónico en HighcharsJS\n\n\nCode\ntourfrance &lt;- read_csv(here::here(\"posts/2020-06-02-30diasdegraficos-parte-3/data/tour_france_state_8.txt\"))\n\nhc21 &lt;- hchart(tourfrance, \"area\", hcaes(distance, elevation), fillOpacity = 0.25) %&gt;% \n  hc_title(text = \"Tour de Francia 2017, Etapa 8: &lt;i&gt;Dole - Station des Rousses&lt;/i&gt;\") %&gt;% \n  hc_subtitle(text = \"Ejemplo obtendido de la documentación de HighchartsJS\") %&gt;% \n  hc_xAxis(labels = list(format = \"{value} km\"), title  = list(text = \"Distancia\")) %&gt;% \n  hc_yAxis(labels = list(format = \"{value} m\"), title = list(text = \"Elevación\")) %&gt;% \n  hc_tooltip(\n    headerFormat = \"Distance: {point.x:.1f} km&lt;br&gt;\",\n    pointFormat = \"{point.y} m a. s. l.\"\n    )\n   \nhc21\n\n\n\n\n\n\n\n\nCode\ndf1 &lt;- read_csv('\"x\",\"y\", \"text\"\n27.98,255, \"Arbois\"\n45.5,611,\"Montrond\"\n63,651,\"Mont-sur-Monnet\"\n84,789,\"Bonlieu\"\n129.5,382,\"Chassal\"\n159,443,\"Saint-Claude\"')\n\ndf2 &lt;- read_csv('\"x\",\"y\",\"text\"\n101.44,1026,\"Col de la Joux\"\n138.5,748,\"Côte de Viry\"\n176.4,1202,\"Montée de la Combe&lt;br&gt;de Laisia Les Molunes\"')\n\ndf3 &lt;- read_csv('\"x\",\"y\",\"text\"\n96.2,783,\"6.1 km climb&lt;br&gt;4.6% on avg.\"\n134.5,540,\"7.6 km climb&lt;br&gt;5.2% on avg.\"\n172.2,925,\"11.7 km climb&lt;br&gt;6.4% on avg.\"\n')\n\ndf_to_annotations_labels &lt;- function(df, xAxis = 0, yAxis = 0) {\n  \n  stopifnot(hasName(df, \"x\"))\n  stopifnot(hasName(df, \"y\"))\n  stopifnot(hasName(df, \"text\"))\n  \n  df %&gt;% \n    rowwise() %&gt;% \n    mutate(point = list(list(x = x, y = y, xAxis = 0, yAxis = 0))) %&gt;% \n    select(-x, -y)  \n  \n}\n\ndf1_p &lt;- df_to_annotations_labels(df1)\n\ndf2_p &lt;- df_to_annotations_labels(df2)\n\ndf3_p &lt;- df_to_annotations_labels(df3)\n  \nhc21 %&gt;% \n  hc_annotations(\n    list(\n      labelOptions = list(backgroundColor = 'rgba(255,255,255,0.5)', verticalAlign = \"top\", y = 15),\n      labels = list_parse(df1_p)\n      ),\n    list(\n      labels = list_parse(df2_p)\n      ),\n    list(\n      labelOptions = list(\n        shape = \"connector\",\n        align = \"right\",\n        justify = FALSE,\n        crop = TRUE,\n        style = list(fontSize = \"0.8em\", textOutline = \"1px white\")\n        ),\n      labels = list_parse(df3_p)\n      )\n    ) %&gt;% \n  hc_caption(\n    text = \"Este gráfico utiliza la función Anotaciones de Highcharts para colocar\n    etiquetas en varios puntos de interés. Las etiquetas son &lt;i&gt;responsivas&lt;/i&gt; y se ocultarán\n    para evitar la superposición en pantallas pequeñas.\"\n  )"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-22-datos-textuales",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-22-datos-textuales",
    "title": "#30diasdegraficos Parte 3",
    "section": "Día 22: datos textuales",
    "text": "Día 22: datos textuales\n\n\nCode\nlibrary(stringr)\nlibrary(rvest)\n\nread_html(\"https://github.com/cienciadedatos/r4ds\") %&gt;%\n  html_nodes(\"a.js-navigation-open\") %&gt;%\n  html_text() %&gt;%\n  str_subset(\"[0-9]{2}.*.qmd\") %&gt;%\n  dput()\n\n\ncharacter(0)\n\n\nCode\nsecciones &lt;- c(\n  \"01-intro.qmd\", \"02-explore.qmd\", \"03-visualize.qmd\", \"04-workflow-basics.qmd\", \n  \"05-transform.qmd\", \"06-workflow-scripts.qmd\", \"07-eda.qmd\", \n  \"08-workflow-projects.qmd\", \"09-wrangle.qmd\", \"10-tibble.qmd\", \n  \"11-import.qmd\", \"12-tidy.qmd\", \"13-relational-data.qmd\", \"14-strings.qmd\", \n  \"15-factors.qmd\", \"16-datetimes.qmd\", \"17-program.qmd\", \"18-pipes.qmd\", \n  \"19-functions.qmd\", \"20-vectors.qmd\", \"21-iteration.qmd\", \"22-model.qmd\", \n  \"23-model-basics.qmd\", \"24-model-building.qmd\", \"25-model-many.qmd\", \n  \"26-communicate.qmd\", \"27-rmarkdown.qmd\", \"28-communicate-plots.qmd\", \n  \"29-rmarkdown-formats.qmd\", \"30-rmarkdown-workflow.qmd\")\n\nruta_base &lt;- \"https://raw.githubusercontent.com/cienciadedatos/r4ds/traduccion/\"\n\nr4ds &lt;- purrr::map_df(secciones, function(seccion = \"23-model-basics.qmd\"){\n  \n  message(paste0(ruta_base, seccion))\n  \n  lineas &lt;- read_lines(paste0(ruta_base, seccion))\n  \n  data_frame(\n    seccion = seccion,\n    texto  = lineas\n  )\n  \n})\n\nr4ds &lt;- r4ds %&gt;% \n  mutate(\n    seccion_num = as.numeric(str_extract(seccion, \"[0-9]{2}\")),\n    capitulo = case_when(\n      seccion_num &lt;=  1 ~ \"1. Bienvenida\",\n      seccion_num &lt;=  8 ~ \"2. Explorar\",\n      seccion_num &lt;= 16 ~ \"3. Manejar datos\",\n      seccion_num &lt;= 21 ~ \"4. Programar\",\n      seccion_num &lt;= 25 ~ \"5. Modelar\",\n      seccion_num &lt;= 30 ~ \"6. Comunicar\",\n    )\n  )\n\n\n\n\nCode\nlibrary(tidytext)\n\nr4ds2 &lt;- r4ds %&gt;%\n  unnest_tokens(palabra, texto) %&gt;% \n  mutate(\n    palabra = str_to_lower(palabra),\n    palabra = str_remove_all(palabra, \"_\"),\n    palabra = str_remove_all(palabra, \"[0-9]+\"),\n    palabra = str_remove_all(palabra, \"[:punct:]+\"),\n    palabra = str_trim(palabra)\n    ) %&gt;% \n  filter(palabra != \"\") %&gt;% \n  anti_join(tibble(palabra = stopwords::stopwords(language = \"es\")), by = \"palabra\")\n\nr4ds2 &lt;- r4ds2 %&gt;%\n  count(capitulo, palabra, sort = TRUE)\n\ntotal_r4ds2 &lt;- r4ds2 %&gt;% \n  group_by(capitulo) %&gt;% \n  summarize(total = sum(n))\n\nr4ds2 &lt;- left_join(r4ds2, total_r4ds2)\n\nr4ds2 &lt;- r4ds2 %&gt;%\n  bind_tf_idf(palabra, capitulo, n)\n\nr4ds2\n\n\n# A tibble: 14,418 × 7\n   capitulo         palabra     n total     tf   idf tf_idf\n   &lt;chr&gt;            &lt;chr&gt;   &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 3. Manejar datos r         520 15300 0.0340     0      0\n 2 4. Programar     x         323 10706 0.0302     0      0\n 3 4. Programar     r         262 10706 0.0245     0      0\n 4 2. Explorar      r         258 12661 0.0204     0      0\n 5 3. Manejar datos datos     210 15300 0.0137     0      0\n 6 2. Explorar      x         203 12661 0.0160     0      0\n 7 3. Manejar datos x         199 15300 0.0130     0      0\n 8 3. Manejar datos n         187 15300 0.0122     0      0\n 9 5. Modelar       x         183  7970 0.0230     0      0\n10 6. Comunicar     r         180  7320 0.0246     0      0\n# ℹ 14,408 more rows\n\n\nCode\nr4ds2_top &lt;- r4ds2 %&gt;%\n  arrange(desc(tf_idf)) %&gt;%\n  mutate(palabra = factor(palabra, levels = rev(unique(palabra)))) %&gt;% \n  group_by(capitulo) %&gt;% \n  top_n(10) %&gt;% \n  ungroup()\n  \nggplot(r4ds2_top, aes(palabra, tf_idf, fill = capitulo)) +\n  geom_col(show.legend = FALSE, width = 0.5) +\n  labs(x = NULL, y = \"tf-idf\") +\n  scale_fill_viridis_d(option = \"B\", begin = 0.1, end = 0.9) +\n  facet_wrap(vars(capitulo), ncol = 3, scales = \"free\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nr4ds2_top50 &lt;- r4ds2 %&gt;%\n  arrange(desc(tf_idf)) %&gt;%\n  mutate(palabra = factor(palabra, levels = rev(unique(palabra)))) %&gt;% \n  group_by(capitulo) %&gt;% \n  top_n(50) %&gt;% \n  ungroup()\n\nr4ds2_top50 &lt;- r4ds2_top50 %&gt;% \n  arrange(desc(tf_idf)) %&gt;% \n  add_row(capitulo = \"\", palabra = \"R4DS\", tf_idf = max(r4ds2_top50$tf_idf)* 2)\n\nfntfmly &lt;- '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' \n\nhchart(\n  r4ds2_top50, \n  \"wordcloud\",\n  hcaes(name = palabra, weight = tf_idf, color = capitulo),\n  style  = list(fontFamily = fntfmly, fontWeight = \"bold\"),\n  tooltip = list(\n    pointHeader = \"&lt;b&gt;{point.key}&lt;/b&gt;\",\n    pointFormat = \"Capítulo &lt;b&gt;{point.capitulo}&lt;/b&gt;&lt;br&gt;TF-IDF: {point.tf_idf:0.4f}\"\n    )\n  )"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-23-proyección-solar---sunburst",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-23-proyección-solar---sunburst",
    "title": "#30diasdegraficos Parte 3",
    "section": "Día 23: proyección solar - sunburst",
    "text": "Día 23: proyección solar - sunburst\n\n\nCode\n# install.packages(\"treemap\")\nlibrary(treemap)\n\npaises_2007 &lt;- datos::paises %&gt;% \n  filter(anio == max(anio)) %&gt;% \n  mutate(poblacion = round(poblacion/1e6))\n\ndata_to_hierarchical_series &lt;- function(data, group_vars, size_var) {\n  \n  # data &lt;- paises_2007\n  # group_vars &lt;- c(\"continente\", \"pais\")\n  # size_var &lt;- \"poblacion\"\n  \n  group_syms &lt;- rlang::syms(group_vars)\n  size_sym &lt;- rlang::sym(size_var)\n  \n  if (data %&gt;%\n      select(!!!group_syms) %&gt;%\n      mutate_all(as.character) %&gt;%\n      purrr::map(unique) %&gt;%\n      unlist() %&gt;%\n      anyDuplicated()) stop(\"Sunburst data uses same label at multiple levels.\")\n  \n  data &lt;- data %&gt;%\n    mutate_at(vars(all_of(group_vars)), as.character)\n  \n  name_cell &lt;- function(..., depth) paste0(list(...), 1:depth, collapse = \"\")\n  \n  data_at_depth &lt;- function(depth = 1) {\n    \n    data %&gt;%\n      group_by(!!!group_syms[1:depth]) %&gt;%\n      summarise(value = sum(!!size_sym)) %&gt;%\n      ungroup() %&gt;%\n      arrange(desc(value)) %&gt;% \n      mutate(name = !!group_syms[[depth]],\n             level = depth) %&gt;%\n      # mutate_at(group_vars, as.character()) %&gt;%\n      {\n        if (depth == 1)\n          mutate(., id = paste0(name, 1))\n        else {\n          mutate(\n            .,\n            parent = purrr::pmap_chr(list(!!!group_syms[1:depth - 1]),\n                                     name_cell,\n                                     depth = depth - 1),\n            id = paste0(parent, name, depth)\n          )\n        }\n      }\n  }\n  \n  sunburst_df &lt;- 1:length(group_vars) %&gt;%\n    purrr::map(data_at_depth) %&gt;%\n    bind_rows() %&gt;%\n    arrange(level)\n  \n  data_list &lt;- sunburst_df %&gt;%\n    highcharter::list_parse() # %&gt;% purrr::map( ~ .[!is.na(.)])\n  \n  data_list\n  \n}\n\n\ndataserie &lt;- data_to_hierarchical_series(\n  paises_2007,\n  group_vars = c(\"continente\", \"pais\"),\n  size_var = \"poblacion\"\n  )\n\nhighchart() %&gt;%\n  hc_add_series(\n    data = dataserie,\n    type = \"sunburst\",\n    # type=  \"treemap\",\n    allowDrillToNode = TRUE,\n    levels = list(\n      list(\n        level = 1,\n        borderWidth = 0,\n        borderColor = \"transparent\",\n        colorByPoint = TRUE,\n        dataLabels = list(enabled = TRUE)\n        ),\n      list(\n        level = 2,\n        borderWidth = 0,\n        borderColor = \"transparent\",\n        colorVariation = list(key = \"brightness\", to = 0.50),\n        dataLabels = list(enabled = TRUE)\n        )\n      )\n    )\n\n\n\n\n\n\nCode\npaises_2007 &lt;- paises_2007 %&gt;% \n  mutate(mundo = \"Mundo\")\n\ndataserie &lt;- data_to_hierarchical_series(\n  paises_2007,\n  group_vars = c(\"mundo\", \"continente\", \"pais\"),\n  size_var = \"poblacion\"\n  )\n\nhighchart() %&gt;%\n  hc_add_series(\n    data = dataserie,\n    type = \"sunburst\",\n    name = \"Población\",\n    # type=  \"treemap\",\n    allowDrillToNode = TRUE,\n    tooltip = list(\n      headerFormat = \"&lt;b&gt;{point.key}&lt;/b&gt;&lt;br&gt;\",\n      pointFormat = \"{point.value} millones habitantes\"\n    ),\n    levels = list(\n       list(\n        level = 1,\n        borderWidth = 0,\n        color = \"transparent\",\n        borderColor = \"transparent\",\n        # colorByPoint = TRUE,\n        dataLabels = list(enabled = TRUE)\n        ),\n      list(\n        level = 2,\n        borderWidth = 0,\n        borderColor = \"transparent\",\n        colorByPoint = TRUE,\n        dataLabels = list(enabled = TRUE)\n        ),\n      list(\n        level = 3,\n        borderWidth = 0,\n        borderColor = \"transparent\",\n        colorVariation = list(key = \"brightness\", to = 0.50),\n        dataLabels = list(enabled = TRUE)\n        )\n      )\n    )"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-24-coropleta-ya-lo-hicimos-antes",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-24-coropleta-ya-lo-hicimos-antes",
    "title": "#30diasdegraficos Parte 3",
    "section": "Día 24: coropleta (ya lo hicimos antes?)",
    "text": "Día 24: coropleta (ya lo hicimos antes?)\nComo en el día de datos espaciales realizamos una coropleta, esta realizaremos un diagrama de puntos sobre un mapa!\n\n\nCode\naeropuertos &lt;- read_csv(\"https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat\", col_names = FALSE)\n\naeropuertos  &lt;- aeropuertos  %&gt;%\n  filter(X4 == \"Chile\") %&gt;% \n  select(nombre = X2, lon = X8, lat = X7) %&gt;% \n  filter(lat &lt;= 0, lon &gt;= -90)\n\nhc24 &lt;- hcmap(\"countries/cl/cl-all\", showInLegend = FALSE) %&gt;% \n  hc_add_series(\n    data = aeropuertos, \n    type = \"mappoint\",\n    name = \"Aeropuertos de Chile\",\n    tooltip = list(pointFormat = \"{point.nombre} ({point.lat:0.2f}, {point.lon:0.2f})\")\n    ) \n\nhc24"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-25-violín",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#día-25-violín",
    "title": "#30diasdegraficos Parte 3",
    "section": "Día 25: violín",
    "text": "Día 25: violín\n\n\nCode\nlibrary(ggplot2)\n\np25 &lt;- ggplot(datos::flores, aes(Largo.Sepalo, Especie)) +\n  geom_violin()\n\ndflores &lt;- datos::flores %&gt;% \n  distinct(Especie) %&gt;% \n  mutate(y = as.numeric(Especie))\n\nd25 &lt;- as_tibble(layer_data(p25, 1)) %&gt;% \n  select(x, y, violinwidth, width, ndensity) %&gt;% \n  mutate_all(round, 3) %&gt;% \n  mutate(y = as.numeric(y)) %&gt;% \n  left_join(dflores, by = \"y\")\n\nd25 &lt;- d25 %&gt;% \n  filter(row_number() %% 2 == 0)\n\nhchart(d25, \"arearange\", hcaes(x, low = y - violinwidth*width  - 1, high = y + violinwidth*width  - 1, group = Especie)) %&gt;% \n  hc_yAxis(\n    categories = dflores$Especie, \n    type = \"categorical\", \n    endOnTick = FALSE,\n    startOnTick = FALSE,\n    title = list(text = \"Especie\")\n    ) %&gt;% \n  hc_xAxis(\n    title = list(text = \"Largo del Sépalo\")\n    ) %&gt;% \n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;span style='color:{point.color};'&gt;&#9679;&lt;/span&gt; {series.name}: &lt;b&gt;{point.ndensity:,.4f}&lt;/b&gt;&lt;br/&gt;\"\n  )"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#fin",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#fin",
    "title": "#30diasdegraficos Parte 3",
    "section": "Fin",
    "text": "Fin\nLamentablemente el tiempo (quizás la ganas!) dictaron a que no pudiese completar todos los días del challenge. ¿Fail? Para nada! Aprendí mucho de highcharts, volví a escribir en el blog &lt;3 e hice post en español."
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html",
    "title": "The tale of two charts combined",
    "section": "",
    "text": "Post updated on Mar 26, 2024"
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#introducction",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#introducction",
    "title": "The tale of two charts combined",
    "section": "Introducction",
    "text": "Introducction\nWeek ago I see a tweet from Steven Bernard @sdbernard from Financial Times showing a streamgraph on the top of a stacked column chart. I take a look some seconds and then boom: What a combination! Why?\n\nOne of them is the complement of the other.\n\nThe link for the original source is here.\n\n\n\nI like the streamgraph but it is hard to see the change the distribution between categories when the total change sudden. So have this auxiliar chart is a nice add to don’t loose from sigth the distribution."
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#data",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#data",
    "title": "The tale of two charts combined",
    "section": "Data",
    "text": "Data\nIn this post we will use the Our Workd In Data Covid deaths (link here) because I’m not sure what is the data used by Financial Times team.\nWe’ll load the data and check the structure and get only what we need to replitcate the chart:\n\n\n# A tibble: 7 × 2\n  continent         n\n  &lt;chr&gt;         &lt;int&gt;\n1 Africa         7410\n2 Asia           6513\n3 Europe         7107\n4 North America  5330\n5 Oceania        3120\n6 South America  1820\n7 &lt;NA&gt;           1560\n\n\nRows: 31,300\nColumns: 5\n$ continent  &lt;chr&gt; \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"Asia\", \"As…\n$ iso_code   &lt;chr&gt; \"AFG\", \"AFG\", \"AFG\", \"AFG\", \"AFG\", \"AFG\", \"AFG\", \"AFG\", \"AF…\n$ date       &lt;date&gt; 2020-01-06, 2020-01-13, 2020-01-20, 2020-01-27, 2020-02-03…\n$ location   &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\",…\n$ new_deaths &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nFT used the 7-day rolling average in the chart so we’ll use the {RcppRoll} package to get that series for each contienent. Check the next code to see how the function roll_meanr works.\n\n\n [1] NA NA  2  3  4  5  6  7  8  9\n\n\nNow we need to group the data to calculate the roll mean for every country/location and then filter to reduce some noise.\nThe chart show continent so we’ll group by date and continent.\n\n\nRows: 720\nColumns: 3\nGroups: date [120]\n$ date       &lt;date&gt; 2020-03-16, 2020-03-16, 2020-03-16, 2020-03-16, 2020-03-16…\n$ continent  &lt;chr&gt; \"Africa\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"So…\n$ new_deaths &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…"
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-streamgraph",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-streamgraph",
    "title": "The tale of two charts combined",
    "section": "The streamgraph",
    "text": "The streamgraph\nBefore combine two charts we need to know how to get every chart independently. Let’s start with the main one:\n\n\n\n\n\n\nA good start, but we can do it better. So, some considerations:\n\nThe yAxis don’t have a meaning in the streamgraph so we’ll remove it.\nWe can set endOnTick and startOnTick en yAxis to gain some extra vertical space.\nRemove the vertical lines to get a more clear chart.\nGet a better tooltip (table = TRUE).\nIn this case but we can try adding labels to each series instead of using legend, same as the FT chart.\nThis is not associate to the chart itself but what is representing: In the original FT chart some countries like UK, US are separated for their continent because are relevant, and then the color used is similar to their continent to get the visual association.\n\nTo separate the information for some coutries from theirs continent we’ll create a grp variable:\n\n\n# A tibble: 13 × 3\n   continent     grp                n\n   &lt;chr&gt;         &lt;chr&gt;          &lt;int&gt;\n 1 Africa        Africa          6840\n 2 Asia          Asia            5909\n 3 Asia          India            120\n 4 Europe        Europe          6356\n 5 Europe        Russia           120\n 6 Europe        United Kingdom   120\n 7 North America Mexico           120\n 8 North America North America   4680\n 9 North America United States    120\n10 Oceania       Oceania         2880\n11 South America Brazil           120\n12 South America Chile            120\n13 South America South America   1440\n\n\nFun part #1: To the continent which have separated countries will add the \"Rest of \" to be specific this is no the total continent.\n\n\n# A tibble: 13 × 3\n   continent     grp                       n\n   &lt;chr&gt;         &lt;chr&gt;                 &lt;int&gt;\n 1 Africa        Africa                 6840\n 2 Asia          India                   120\n 3 Asia          Rest of Asia           5909\n 4 Europe        Rest of Europe         6356\n 5 Europe        Russia                  120\n 6 Europe        United Kingdom          120\n 7 North America Mexico                  120\n 8 North America Rest of North America  4680\n 9 North America United States           120\n10 Oceania       Oceania                2880\n11 South America Brazil                  120\n12 South America Chile                   120\n13 South America Rest of South America  1440\n\n\nFun part #2: We’ll use a specific color for each continent, and a brighten variation for the the separated countries. For this task the {shades} package offer the brightness function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontinent\ngrp\nn\naux\ncontinent_color\nfct\ngrp_color\ncontinent_cln\n\n\n\n\nAfrica\nAfrica\n0\nTRUE\n#f1c40f\n0.00\n#F1C40F\nafrica\n\n\nAsia\nIndia\n0\nFALSE\n#d35400\n0.10\n#EC5E00\nasia\n\n\nAsia\nRest of Asia\n0\nTRUE\n#d35400\n0.00\n#D35400\nasia\n\n\nEurope\nRussia\n0\nFALSE\n#2980b9\n0.05\n#2C89C6\neurope\n\n\nEurope\nUnited Kingdom\n0\nFALSE\n#2980b9\n0.10\n#2F92D2\neurope\n\n\nEurope\nRest of Europe\n0\nTRUE\n#2980b9\n0.00\n#2980B9\neurope\n\n\nNorth America\nMexico\n0\nFALSE\n#2c3e50\n0.05\n#33485D\nnorth_america\n\n\nNorth America\nUnited States\n0\nFALSE\n#2c3e50\n0.10\n#3A526A\nnorth_america\n\n\nNorth America\nRest of North America\n0\nTRUE\n#2c3e50\n0.00\n#2C3E50\nnorth_america\n\n\nOceania\nOceania\n0\nTRUE\n#7f8c8d\n0.00\n#7F8C8D\noceania\n\n\nSouth America\nBrazil\n0\nFALSE\n#2ecc71\n0.05\n#31D978\nsouth_america\n\n\nSouth America\nChile\n0\nFALSE\n#2ecc71\n0.10\n#34E67F\nsouth_america\n\n\nSouth America\nRest of South America\n0\nTRUE\n#2ecc71\n0.00\n#2ECC71\nsouth_america\n\n\n\n\n\nThen exctract some vectors:\nBefore continuing let’s see the original colors and the finishes obtained with the {shades} package.\n\n\n\n\n\nOriginal palette\n\n\n\n\n\n\n\n\n\nColors considering variations\n\n\n\n\nThe colors and levels are ready so let’s regroup the data using this new grp variable:\nThen plot the previous chart but now considering all the comments made before."
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-stacked-column-chart",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-stacked-column-chart",
    "title": "The tale of two charts combined",
    "section": "The stacked column chart",
    "text": "The stacked column chart\nFor the stacked column chart we’ll use the data which have deaths by continent (no grp). This is a simple chart so the only important part is set borderWidth, groupPadding, pointPadding to 0 to remove the space between columns."
  },
  {
    "objectID": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-final-chart",
    "href": "posts/2020-06-15-when-2-charts-are-more-than-1/index.html#the-final-chart",
    "title": "The tale of two charts combined",
    "section": "The final chart",
    "text": "The final chart\nThere are some important things to do before code the final chart:\n\nCreate and add two yAxis using hc_yAxis_multiples and create_yaxis functions. One for each type of series. The two series will share the same xAxis.\nFor the column series we’ll use the id parameter with the unique(cont) value, then in the streamgraph use the linkedTo parameter to link the series. With this the Russia, UK and Rest of Europe series from the streamgraph are link with the Europe series from the stacked column chart, so if the user click the Europa legend all those series will hide."
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html",
    "title": "valueBoxes and Sparklines",
    "section": "",
    "text": "Post updated on Dec 23, 2022"
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#introducction",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#introducction",
    "title": "valueBoxes and Sparklines",
    "section": "Introducction",
    "text": "Introducction\nWhen you create a dashboard to track some information is usual put the important numbers big and clear at the beginning of the main section. For this, {shinydashboard} (https://rstudio.github.io/shinydashboard/) and other dashboard oriented packages for shiny like {bs4dash}, {argonDash}, {tablerDash} - all from https://rinterface.com/ - have an implementation to put this type of information know as a card or value box.\nIn some projects like https://jbkunst.shinyapps.io/trd-sttstcs/ I’ve implemented a modification of the original shinydashboard::valueBox to complement the information (the BIG number) with a sparkline. Always that implementation lives as a function in R/helpers.R script, so this will be a good opportunity to share the code, thoughts and ideas."
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#the-basic-valuebox",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#the-basic-valuebox",
    "title": "valueBoxes and Sparklines",
    "section": "The basic valueBox\n",
    "text": "The basic valueBox\n\nLet’s start with what we know: The most direct and simple implementation of a valueBox in {shinydashboard}.\n\nCodelibrary(shiny)\nlibrary(shinydashboard)\n\nvb <-  valueBox(\n  value = \"1,345\",\n  subtitle = \"Lines of code written\",\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"red\",\n  href = NULL)\n\nui <- dashboardPage(\n  dashboardHeader(),\n  dashboardSidebar(disable = TRUE),\n  dashboardBody(\n    fluidRow(\n      valueBoxOutput(\"vbox\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$vbox <- renderValueBox(vb)\n  \n}\n\n# shiny::shinyApp(ui, server, options = list(launch.browser = .rs.invokeShinyPaneViewer))\n\n\nThis app looks like:\n\n\n\n\nThe most simple value box\n\n\n\n\nSo here it is, a simple value box to emphasize information which can have an icon/color to give some meaning to the number.\n\n\n\n\nApply some zoom"
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#modifying-the-valuebox",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#modifying-the-valuebox",
    "title": "valueBoxes and Sparklines",
    "section": "Modifying the valueBox\n",
    "text": "Modifying the valueBox\n\nBefore to modify a value box we need to know what a valueBox is, or how is it built, so take a look what is inside this funcion.\n\nCodevalueBox\n\nfunction(value, subtitle, icon = NULL, color = \"aqua\", width = 4, href = NULL){\n  \n  validateColor(color)\n  \n  if (!is.null(icon))\n    tagAssert(icon, type = \"i\")\n  \n  boxContent <- div(\n    class = paste0(\"small-box bg-\", color),\n    div(\n      class = \"inner\",\n      h3(value),\n      p(subtitle)\n      ),\n    if (!is.null(icon)) div(class = \"icon-large\", icon)\n    )\n  \n  if (!is.null(href)) \n    boxContent <- a(href = href, boxContent)\n    \n  div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    boxContent\n    )\n}\n\n\nAs we see, the value and subtitle arguments are the main ones. The other are just for styling and format. These elements are in div(class = \"inner\", ...) so here we’ll put the new content.\nLet’s try to put a title in the top of the div and then use the subtitle as an detailed text.\n\nCodevalueBox2 <- function(value, title, subtitle, icon = NULL, color = \"aqua\", width = 4, href = NULL){\n  \n  shinydashboard:::validateColor(color)\n  \n  if (!is.null(icon))\n    shinydashboard:::tagAssert(icon, type = \"i\")\n  \n  boxContent <- div(\n    class = paste0(\"small-box bg-\", color),\n    div(\n      class = \"inner\",\n      tags$small(title),\n      h3(value),\n      p(subtitle)\n      ),\n    if (!is.null(icon)) div(class = \"icon-large\", icon)\n    )\n  \n  if (!is.null(href)) \n    boxContent <- a(href = href, boxContent)\n    \n  div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    boxContent\n    )\n}\n\n\nSo the implementation is the same as the original valueBox function:\n\nCodevb <- valueBox2(\n  value = \"1,345\",\n  title = toupper(\"Lines of code\"),\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last day\"),\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"red\",\n  href = NULL\n  )\n\n\n\n\n\n\nA modificated value box\n\n\n\n\nThe idea of put a title is to help the reader, but we use a small text to be subtle, usually I like to use a Small Caps font but in this case I used uppercase for simplicity."
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#adding-sparklines",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#adding-sparklines",
    "title": "valueBoxes and Sparklines",
    "section": "Adding sparklines",
    "text": "Adding sparklines\nThe idea to add a sparkline to the value box is give more information. For example, if your have a historical data, it would be good put a sparkline to show the previous behaviour about the data, so you can compare the BIG number with the past.\nLet’s simulate data to create a sparkline:\n\nCodeset.seed(123)\n\nN <- 20\n\nx <- cumsum(rnorm(N)) + 0.5 * cumsum(runif(N))\nx <- round(200*x)\n\ndf <- data.frame(\n  x = sort(as.Date(Sys.time() - lubridate::days(1:N))),\n  y = abs(x)\n)\n\ndf\n\n            x    y\n1  2022-12-03   98\n2  2022-12-04  102\n3  2022-12-05  251\n4  2022-12-06  302\n5  2022-12-07  343\n6  2022-12-08  700\n7  2022-12-09  815\n8  2022-12-10  609\n9  2022-12-11  498\n10 2022-12-12  495\n11 2022-12-13  744\n12 2022-12-14  860\n13 2022-12-15 1020\n14 2022-12-16 1055\n15 2022-12-17 1000\n16 2022-12-18 1378\n17 2022-12-19 1490\n18 2022-12-20 1172\n19 2022-12-21 1402\n20 2022-12-22 1345\n\n\nLet’s create a sparkline with {highcharter} package:\n\nCodelibrary(highcharter)\n\nhc <- hchart(df, \"line\", hcaes(x, y), name = \"lines of code\")  %>% \n  hc_size(height = 100)\n\nhc\n\n\n\n\n\n\nWe have our first sparkline. It’s important note the hc object will use the available horizontal (width) space, but we need to control the heigth.\nNow we can create a new valueBox function;\n\nCodevalueBox3 <- function(value, title, sparkobj = NULL, subtitle, icon = NULL,\n                      color = \"aqua\", width = 4, href = NULL){\n  \n  shinydashboard:::validateColor(color)\n  \n  if (!is.null(icon))\n    shinydashboard:::tagAssert(icon, type = \"i\")\n  \n  boxContent <- div(\n    class = paste0(\"small-box bg-\", color),\n    div(\n      class = \"inner\",\n      tags$small(title),\n      h3(value),\n      if (!is.null(sparkobj)) sparkobj,\n      p(subtitle)\n      ),\n    if (!is.null(icon)) div(class = \"icon-large\", icon, style = \"z-index; 0\")\n    )\n  \n  if (!is.null(href)) \n    boxContent <- a(href = href, boxContent)\n    \n  div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    boxContent\n    )\n}\n\n\nSo now:\n\nCodevb <- valueBox3(\n  value = \"1,345\",\n  title = toupper(\"Lines of code\"),\n  sparkobj = hc,\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last day\"),\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"red\",\n  href = NULL)\n\n\nAnd the result is:\n\n\n\n\nA value box with a sparkline using a bad theme\n\n\n\n\nLOL! We need modify the look of the chart. For this we’ll create a custom theme. The general idea is gain space via removing axis and borders. Then have cleaner look removing grid lines… You know, show just the line.\n\nCodehc_theme_sparkline_vb <- function(...) {\n  \n  theme <- list(\n    chart = list(\n      backgroundColor = NULL,\n      margins = c(0, 0, 0, 0),\n      spacingTop = 0,\n      spacingRight = 0,\n      spacingBottom = 0,\n      spacingLeft = 0,\n      plotBorderWidth = 0,\n      borderWidth = 0,\n      style = list(overflow = \"visible\")\n    ),\n    xAxis = list(\n      visible = FALSE, \n      endOnTick = FALSE, \n      startOnTick = FALSE\n    ),\n    yAxis = list(\n      visible = FALSE,\n      endOnTick = FALSE, \n      startOnTick = FALSE\n    ),\n    tooltip = list(\n      outside = FALSE,\n      shadow = FALSE,\n      borderColor = \"transparent\",\n      botderWidth = 0,\n      backgroundColor = \"transparent\",\n      style = list(textOutline = \"5px white\")\n    ),\n    plotOptions = list(\n      series = list(\n        marker = list(enabled = FALSE),\n        lineWidth = 2,\n        shadow = FALSE,\n        fillOpacity = 0.25,\n        color = \"#FFFFFFBF\",\n        fillColor = list(\n          linearGradient = list(x1 = 0, y1 = 1, x2 = 0, y2 = 0),\n          stops = list(\n            list(0.00, \"#FFFFFF00\"),\n            list(0.50, \"#FFFFFF7F\"),\n            list(1.00, \"#FFFFFFFF\")\n          )\n        )\n      )\n    ),\n    credits = list(\n      enabled = FALSE,\n      text = \"\"\n      )\n    )\n  \n  theme <- structure(theme, class = \"hc_theme\")\n  \n  if (length(list(...)) > 0) {\n    theme <- hc_theme_merge(\n      theme,\n      hc_theme(...)\n    )\n  }\n  \n  theme\n}\n\n\nTesting the theme.\n\nCodehc <- hc %>% \n  hc_add_theme(hc_theme_sparkline_vb()) %>% \n  hc_credits(enabled = FALSE)\n\nhc %>% \n  # emulate the background color of the valueBox\n  hc_chart(backgroundColor = \"#DD4B39\")\n\n\n\n\n\n\nAnd trying again:\n\nCodevb <- valueBox3(\n  value = \"1,345\",\n  title = toupper(\"Lines of code\"),\n  sparkobj = hc,\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last day\"),\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"red\",\n  href = NULL)\n\n\n\n\n\n\nA value box with a proper sparkline"
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#including-an-information-helper",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#including-an-information-helper",
    "title": "valueBoxes and Sparklines",
    "section": "Including an information helper",
    "text": "Including an information helper\nSometimes I like to add helper information icon to explain how to read the metric/number if is needed.\nThis can be done using the icon \"info-cirle\" and using the class \"pull-right\" to put in the corner.\n\nCodevalueBox4 <- function(value, title, sparkobj = NULL, subtitle, info = NULL, \n                      icon = NULL, color = \"aqua\", width = 4, href = NULL){\n  \n  shinydashboard:::validateColor(color)\n  \n  if (!is.null(icon))\n    shinydashboard:::tagAssert(icon, type = \"i\")\n  \n  info_icon <- tags$small(\n    tags$i(\n      class = \"fa fa-info-circle fa-lg\",\n      title = info,\n      `data-toggle` = \"tooltip\",\n      style = \"color: rgba(255, 255, 255, 0.75);\"\n      ),\n    class = \"pull-right\"\n    )\n  \n  boxContent <- div(\n    class = paste0(\"small-box bg-\", color),\n    div(\n      class = \"inner\",\n      tags$small(title),\n      if (!is.null(sparkobj)) info_icon,\n      h3(value),\n      if (!is.null(sparkobj)) sparkobj,\n      p(subtitle)\n      ),\n    if (!is.null(icon)) div(class = \"icon-large\", icon, style = \"z-index; 0\")\n    )\n  \n  if (!is.null(href)) \n    boxContent <- a(href = href, boxContent)\n    \n  div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    boxContent\n    )\n}\n\n\nSo now:\n\nCodevb <- valueBox4(\n  value = \"1,345\",\n  title = toupper(\"Lines of code\"),\n  sparkobj = hc,\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last day\"),\n  info = \"This is the lines of code I've written in the past 20 days! That's a lot, right?\",\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"red\",\n  href = NULL\n  )\n\n\n\n\n\n\nA value box with helper text on hover\n\n\n\n\nVoilà we have a value box with a information helper."
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#demo",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#demo",
    "title": "valueBoxes and Sparklines",
    "section": "Demo",
    "text": "Demo\nDemo section! We can use other types of charts, texts and colors:\nBefore the demo, let’s give a proper name to our function:\n\nCodevalueBoxSpark <- function(value, title, sparkobj = NULL, subtitle, info = NULL, \n                          icon = NULL, color = \"aqua\", width = 4, href = NULL){\n  \n  shinydashboard:::validateColor(color)\n  \n  if (!is.null(icon))\n    shinydashboard:::tagAssert(icon, type = \"i\")\n  \n  info_icon <- tags$small(\n    tags$i(\n      class = \"fa fa-info-circle fa-lg\",\n      title = info,\n      `data-toggle` = \"tooltip\",\n      style = \"color: rgba(255, 255, 255, 0.75);\"\n      ),\n    # bs3 pull-right \n    # bs4 float-right\n    class = \"pull-right float-right\"\n    )\n  \n  boxContent <- div(\n    class = paste0(\"small-box bg-\", color),\n    div(\n      class = \"inner\",\n      tags$small(title),\n      if (!is.null(sparkobj)) info_icon,\n      h3(value),\n      if (!is.null(sparkobj)) sparkobj,\n      p(subtitle)\n      ),\n    # bs3 icon-large\n    # bs4 icon\n    if (!is.null(icon)) div(class = \"icon-large icon\", icon, style = \"z-index; 0\")\n    )\n  \n  if (!is.null(href)) \n    boxContent <- a(href = href, boxContent)\n    \n  div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    boxContent\n    )\n}\n\n\nSome charts:\n\nCodehc <- hchart(df, \"area\", hcaes(x, y), name = \"lines of code\")  %>% \n  hc_size(height = 100) %>% \n  hc_credits(enabled = FALSE) %>% \n  hc_add_theme(hc_theme_sparkline_vb()) \n\nhc2 <- hchart(df, \"line\", hcaes(x, y), name = \"Distance\")  %>% \n  hc_size(height = 100) %>% \n  hc_credits(enabled = FALSE) %>% \n  hc_add_theme(hc_theme_sparkline_vb()) \n\nhc3 <- hchart(df, \"column\", hcaes(x, y), name = \"Daily amount\")  %>% \n  hc_size(height = 100) %>% \n  hc_credits(enabled = FALSE) %>% \n  hc_add_theme(hc_theme_sparkline_vb()) \n\n\nSome value boxes:\n\nCodevb <- valueBoxSpark(\n  value = \"1,345\",\n  title = toupper(\"Lines of code written\"),\n  sparkobj = hc,\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last day\"),\n  info = \"This is the lines of code I've written in the past 20 days! That's a lot, right?\",\n  icon = icon(\"code\"),\n  width = 4,\n  color = \"teal\",\n  href = NULL\n  )\n\nvb2 <- valueBoxSpark(\n  value = \"1,345 KM\",\n  title = toupper(\"Distance Traveled\"),\n  sparkobj = hc2,\n  subtitle = tagList(HTML(\"&uarr;\"), \"25% Since last month\"),\n  info = \"This is the lines of code I've written in the past 20 days! That's a lot, right?\",\n  icon = icon(\"plane\"),\n  width = 4,\n  color = \"red\",\n  href = NULL\n  )\n\nvb3 <- valueBoxSpark(\n  value = \"1,3 Hrs.\",\n  title = toupper(\"Thinking time\"),\n  sparkobj = hc3,\n  subtitle = tagList(HTML(\"&uarr;\"), \"5% Since last year\"),\n  info = \"This is the lines of code I've written in the past 20 days! That's a lot, right?\",\n  icon = icon(\"hourglass-half\"),\n  width = 4,\n  color = \"yellow\",\n  href = NULL\n  )\n\n\nFinally the app:\n\nCodelibrary(shiny)\nlibrary(shinydashboard)\n\nui <- dashboardPage(\n  dashboardHeader(),\n  dashboardSidebar(disable = TRUE),\n  dashboardBody(\n    fluidRow(\n      valueBoxOutput(\"vbox\"),\n      valueBoxOutput(\"vbox2\"),\n      valueBoxOutput(\"vbox3\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$vbox <- renderValueBox(vb)\n  output$vbox2 <- renderValueBox(vb2)\n  output$vbox3 <- renderValueBox(vb3)\n}\n\n# shiny::shinyApp(ui, server, options = list(launch.browser = .rs.invokeShinyPaneViewer))\n\n\nThis app look like this :)! What do you think?\n\n\n\n\nAwesome new value boxes"
  },
  {
    "objectID": "posts/2020-06-26-valuebox-and-sparklines/index.html#extending-the-idea",
    "href": "posts/2020-06-26-valuebox-and-sparklines/index.html#extending-the-idea",
    "title": "valueBoxes and Sparklines",
    "section": "Extending the idea",
    "text": "Extending the idea\nDue the {bs4dash} package is based in the same template of the {shinydashboard} https://github.com/ColorlibHQ/AdminLTE is direct use the functions. There some details in the info icon, but you can remove it if you use icon = NULL.\n\nCodelibrary(bs4Dash)\n\nui <- bs4DashPage(\n  header = dashboardHeader(),\n  sidebar = bs4DashSidebar(disable = TRUE),\n  body = bs4DashBody(\n    # this is for use tooltips in the bs4dash package\n    tags$script(HTML(\"setInterval(function(){ $('[title]').tooltip(); }, 1000)\")),\n    tags$h2(\"Testing with {bs4dash} package\"),\n    tags$hr(),\n    fluidRow(\n      valueBoxOutput(\"vbox\"),\n      valueBoxOutput(\"vbox2\"),\n      valueBoxOutput(\"vbox3\")\n      )\n    )\n  )\n\n# setTimeout(function(){ $('[title]').tooltip(); }, 3000)\n# setInterval(function(){ $('[title]').tooltip(); }, 3000)\n# JS(\"$(function () { $('[title]').tooltip() })\")\n\n\n\n\n\n\nWork with the {bs4dash} package too\n\n\n\n\nThis walkthrough/tutorial will help to implement sparklines in other packages as well as other elements such as infoBox, or maybe with other htmlwidgets like {echarts4r} or {plotly}. So if you make an implementation please tell us and share with other people."
  },
  {
    "objectID": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html",
    "href": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html",
    "title": "Favorite and retweets counts from @year_progress account",
    "section": "",
    "text": "You know, is the end of the year and more than one of your contacts retweet:\nSurely you remembered that in the middle of the year you saw the 50% retweet. So why not see the number of favorites throughout the year? To do this we need some packages! The main one in this post will be rtweet, because.., we need tweets.\nFor download tweets I followed the instructions from https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html\nAfter get the tweets we filter the data and make some transformations. Then we’ll get the top tweets in terms of the favorite count to make the annotations in our chart."
  },
  {
    "objectID": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#first-chart",
    "href": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#first-chart",
    "title": "Favorite and retweets counts from @year_progress account",
    "section": "First chart",
    "text": "First chart\n\nCodehchart(data, \"line\", hcaes(created_at, count, group = type)) \n\n\n\n\n\n\n\nOk, all according to keikau1.\n\nHere we can see some peaks, and yes, the peaks are multiples of 5: 10, 15, 20, 75, etc. and some relevant points to, the top ones: 0, 50, 69, 98, 99."
  },
  {
    "objectID": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#annotations",
    "href": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#annotations",
    "title": "Favorite and retweets counts from @year_progress account",
    "section": "Annotations",
    "text": "Annotations\nIt would be useful to add annotations to our graph with the relevant points.\n\nCodedf_to_annotations_labels <- function(df, xAxis = 0, yAxis = 0) {\n  \n  stopifnot(hasName(df, \"x\"))\n  stopifnot(hasName(df, \"y\"))\n  stopifnot(hasName(df, \"text\"))\n  \n  df %>% \n    rowwise() %>% \n    mutate(point = list(list(x = x, y = y, xAxis = 0, yAxis = 0))) %>% \n    select(-x, -y) %>% \n    list_parse()\n  \n}\n\n\ntop_annotations <- dtops %>%\n  mutate(created_at = datetime_to_timestamp(created_at)) %>% \n  select(x = created_at, y = favorite_count, text) %>% \n  df_to_annotations_labels()"
  },
  {
    "objectID": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#final-chart",
    "href": "posts/2021-01-06-favorite-and-retweets-counts-from-yearprogress-account/index.html#final-chart",
    "title": "Favorite and retweets counts from @year_progress account",
    "section": "Final chart",
    "text": "Final chart\nTo our final chart we’ll add some details as a better tooltip, title and the usual obvious and important stuff.\n\nCodehchart(data, \"line\", hcaes(created_at, count, group = type)) %>% \n  hc_title(text = \"Favorite and retweets counts from @year_progress account in 2020\") %>% \n  hc_tooltip(\n    shared = TRUE, \n    headerFormat = '{point.key}<br/>Progress: {point.text}<br/><table>',\n    table = TRUE\n  ) %>% \n   hc_annotations(\n    list(\n      labelOptions = list(\n        shape = \"connector\",\n        align = \"right\",\n        justify = FALSE,\n        crop = TRUE,\n        style = list(fontSize = \"0.8em\", textOutline = \"1px white\")\n        ),\n      labels = top_annotations\n      )\n    ) %>% \n  hc_yAxis(title = list(text = \"Count\")) %>% \n  # from http://jsfiddle.net/kka8eyg5/3/\n  hc_xAxis(\n    title = list(text = NA),\n    endOnTick = FALSE,\n    labels = list(\n      staggerLines = 1,\n      formatter = JS(\"function () { return Highcharts.dateFormat('%B', this.value); }\"),\n      tickPositioner = JS(\"function () {\n                var positions = [],\n                    tick = Math.floor(this.dataMin),\n                    increment = 1000 * 3600 * 24 * 91.5; // 3 months\n\n                for (tick; tick <= this.dataMax; tick += increment) {\n                    positions.push(tick);\n                }\n                if (positions.indexOf(this.dataMax) == -1) positions.push(this.dataMax);\n                return positions;\n            }\")\n    )\n  )\n\n\n\n\n\n\nWhat do you think? Was the result expected?"
  },
  {
    "objectID": "posts/2021-01-07-minimalistic-toolptips-with-highcharter-and-highcharts/index.html",
    "href": "posts/2021-01-07-minimalistic-toolptips-with-highcharter-and-highcharts/index.html",
    "title": "Minimalistic toolptips with highcharter/highcharts",
    "section": "",
    "text": "Time ago we make some really nice but complex tooltips showing charts from the selected points using highcharter package (and highcharts) in the using tooltips in unexpected ways post. But sometimes we need less: a tiny toolip, maybe for have few available space, or maybe requirements.\nSo in this post we’ll detail the parameters in highcharter::hc_tooltip function used in the valuebox and sparklines post to get what we want.\nFirst, let’s try a normal chart with a traditional tooltip.\n\nCodelibrary(highcharter)\nlibrary(tidyverse)\n\nhc <- hchart(citytemp_long, \"line\", hcaes(month, temp, group = city)) %>% \n  hc_add_theme(hc_theme_538()) \n\nhc\n\n\n\n\n\n\nDid you see the tooltip? Is just a normal one, nothing special, it works :). Now, what we came for, but before change arguments let’s make clear what we’ll change:\n\nThe main one is give the text outline effect to the text.\nChange the pointFormat argument removing the “:” in the text because the textOutline effect don’t work very well with this character.\nChange the tooltip background setting the color to transparent.\nRemove the border setting the borderWidth to 0.\nRemove the shadow.\n\nAnd voila.\n\nCodehc %>% \n  hc_tooltip(\n    pointFormat = \"<span  style='color: {series.color}'> {series.name} <b>{point.y}</b><br/></span>\",\n    shadow = FALSE,\n    backgroundColor = \"transparent\",\n    style = list(textOutline = \"3px #404040\"),\n    borderColor = \"transparent\",\n    borderWidth = 0\n  )\n\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{kunstfuentes2021,\n  author = {Joshua Kunst Fuentes},\n  title = {Minimalistic Toolptips with Highcharter/Highcharts},\n  date = {2021-01-07},\n  url = {https://jkunst.com/blog/posts/2021-01-07-minimalistic-toolptips-with-highcharter-and-highcharts},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nJoshua Kunst Fuentes. 2021. “Minimalistic Toolptips with\nHighcharter/Highcharts.” January 7, 2021. https://jkunst.com/blog/posts/2021-01-07-minimalistic-toolptips-with-highcharter-and-highcharts."
  },
  {
    "objectID": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html",
    "href": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html",
    "title": "Using emoji with highcharter and highcharts",
    "section": "",
    "text": "Post updated on Dec 23, 2022\nLet`s try using emoji symbols in highcharter/highcharts.\nFist’s some data:\nFor download tweets I followed the instructions from https://cran.r-project.org/web/packages/rtweet/vignettes/auth.html"
  },
  {
    "objectID": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html#chart-1",
    "href": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html#chart-1",
    "title": "Using emoji with highcharter and highcharts",
    "section": "Chart 1",
    "text": "Chart 1\nUsing emoji in the axis. In this case is direct, nothing special to do.\n\nCode# in interactive mode you can avoid/remove the token argument\ntweets <- rtweet::search_tweets(\"#rstats\", n = 18000, token = token, include_rts = FALSE)\n\nemoji <- tweets %>%\n  mutate(emoji = ji_extract_all(text)) %>%\n  unnest(cols = c(emoji)) %>%\n  count(emoji, sort = TRUE) \n\nmax_count <- emoji %>% \n  pull(n) %>% \n  max()\n\n\n\nCodehchart(\n  emoji, \n  \"bar\",\n  hcaes(emoji, n), \n  name = \"Count\",\n  # dataLabels = list(enabled = TRUE, style = list(fontWeight = \"normal\"))\n  ) %>% \n  hc_xAxis(\n    min = 0,\n    max = 30,\n    scrollbar = list(enabled = TRUE)\n    ) %>% \n  hc_yAxis(\n    max = max_count,\n    title = list(\n      text = \"Count\",\n      align = \"high\"\n      )\n    ) %>% \n  hc_tooltip(\n    headerFormat = \"{point.key}\",\n    pointFormat = \" {point.y}\"\n  ) %>% \n  hc_size(height = 700)"
  },
  {
    "objectID": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html#chart-2",
    "href": "posts/2021-01-10-using-emoji-with-highcharterhighcharts/index.html#chart-2",
    "title": "Using emoji with highcharter and highcharts",
    "section": "Chart 2",
    "text": "Chart 2\nUsing emoji as markers.\n\nCodeemoji2 <- tweets %>%\n  mutate(emoji = ji_extract_all(text)) %>%\n  select(favorite_count, retweet_count, emoji) %>% \n  filter(map_dbl(emoji, length) > 0) %>% \n  unnest(cols = c(emoji)) %>% \n  group_by(emoji) %>% \n  summarise_all(sum) %>% \n  filter(favorite_count*retweet_count > 0) \n  \nemoji2\n\n# A tibble: 196 × 3\n   emoji favorite_count retweet_count\n   <chr>          <int>         <int>\n 1 ➕               369            80\n 2 ⚽               112            22\n 3 ‼️                 21            15\n 4 ⬜                29            84\n 5 ⏳                11             6\n 6 ⤵️                 16             7\n 7 ⬇️                 16             7\n 8 ▶️                300            69\n 9 ➡️                396            81\n10 ☀️                 27             5\n# … with 186 more rows\n\nCodehchart(\n  emoji2,\n  \"scatter\", \n  hcaes(favorite_count , retweet_count),\n  name = \"emoji\",\n  marker = list(\n    radius = 0\n    ),\n  dataLabels = list(\n    enabled = TRUE,\n    format = \"{point.emoji}\", \n    allowOverlap = TRUE,\n    style = list(fontSize = 20),\n    y = 20\n    )\n  ) %>% \n  hc_xAxis(type = \"logarithmic\", title = list(text = \"Favorites\"), minRange = 1) %>% \n  hc_yAxis(type = \"logarithmic\", title = list(text = \"Retweets\"), minRange = 1) %>% \n  hc_chart(zoomType = \"xy\")"
  },
  {
    "objectID": "posts/2021-06-08-regression-anova-t-test/index.html",
    "href": "posts/2021-06-08-regression-anova-t-test/index.html",
    "title": "Regression, ANOVA, t-test are related…",
    "section": "",
    "text": "Source: https://stats.stackexchange.com/questions/59047/how-are-regression-the-t-test-and-the-anova-all-versions-of-the-general-linear\nI Always fail in remember the code to show how this models are related, so I will put here for my future me. An important thing to do is check the p-values.\nThe data, according help(sleep):\nNow, load packages and data."
  },
  {
    "objectID": "posts/2021-06-08-regression-anova-t-test/index.html#regression",
    "href": "posts/2021-06-08-regression-anova-t-test/index.html#regression",
    "title": "Regression, ANOVA, t-test are related…",
    "section": "Regression",
    "text": "Regression\n\nCodelinear_model <- lm(extra ~ group, data = sleep)\n\nsummary(linear_model)\n\n\nCall:\nlm(formula = extra ~ group, data = sleep)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-2.430 -1.305 -0.580  1.455  3.170 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)   0.7500     0.6004   1.249   0.2276  \ngroup2        1.5800     0.8491   1.861   0.0792 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.899 on 18 degrees of freedom\nMultiple R-squared:  0.1613,    Adjusted R-squared:  0.1147 \nF-statistic: 3.463 on 1 and 18 DF,  p-value: 0.07919\n\nCodetidy(linear_model)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)     0.75     0.600      1.25  0.228 \n2 group2          1.58     0.849      1.86  0.0792"
  },
  {
    "objectID": "posts/2021-06-08-regression-anova-t-test/index.html#anova",
    "href": "posts/2021-06-08-regression-anova-t-test/index.html#anova",
    "title": "Regression, ANOVA, t-test are related…",
    "section": "ANOVA",
    "text": "ANOVA\n\nCodeanova <- aov(extra ~ group, data = sleep)\n\nsummary(anova)\n\n            Df Sum Sq Mean Sq F value Pr(>F)  \ngroup        1  12.48  12.482   3.463 0.0792 .\nResiduals   18  64.89   3.605                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCodetidy(anova)\n\n# A tibble: 2 × 6\n  term         df sumsq meansq statistic p.value\n  <chr>     <dbl> <dbl>  <dbl>     <dbl>   <dbl>\n1 group         1  12.5  12.5       3.46  0.0792\n2 Residuals    18  64.9   3.60     NA    NA"
  },
  {
    "objectID": "posts/2021-06-08-regression-anova-t-test/index.html#t-test",
    "href": "posts/2021-06-08-regression-anova-t-test/index.html#t-test",
    "title": "Regression, ANOVA, t-test are related…",
    "section": "\n\\(t\\)-test",
    "text": "\\(t\\)-test\n\nCodet_test <- t.test(extra ~ group, var.equal = TRUE, data = sleep) \n\nt_test\n\n\n    Two Sample t-test\n\ndata:  extra by group\nt = -1.8608, df = 18, p-value = 0.07919\nalternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0\n95 percent confidence interval:\n -3.363874  0.203874\nsample estimates:\nmean in group 1 mean in group 2 \n           0.75            2.33 \n\nCodetidy(t_test)\n\n# A tibble: 1 × 10\n  estim…¹ estim…² estim…³ stati…⁴ p.value param…⁵ conf.…⁶ conf.…⁷ method alter…⁸\n    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>  <chr>  \n1   -1.58    0.75    2.33   -1.86  0.0792      18   -3.36   0.204 Two S… two.si…\n# … with abbreviated variable names ¹​estimate, ²​estimate1, ³​estimate2,\n#   ⁴​statistic, ⁵​parameter, ⁶​conf.low, ⁷​conf.high, ⁸​alternative"
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html",
    "title": "Simulating and watching autoregressive processes",
    "section": "",
    "text": "An autoregressive model of order \\(p\\), \\(AR(p)\\), is defined as:\n\\[{\\displaystyle X_{t}=c+\\sum _{i=1}^{p}\\varphi _{i}X_{t-i}+\\varepsilon _{t}\\,}\\]\nWhere \\(\\varepsilon_t\\) is a White Noise, \\(c\\), \\(\\varphi_i\\) parameters of the model. The structure of this model is easy of understand: The next value \\(X_t\\) is a linear combination of the past values plus a random noise -or innovation-.\nIn R we can simulate this model with stats::arima.sim function for example, if we want simulate an \\(AR(1)\\) with \\(\\varphi _{1} = \\varphi = 0.9\\) with \\(0\\) mean:\n\\[{\\displaystyle X_{t}= \\varphi X_{t-i} + \\varepsilon _{t} = 0.9 \\times X_{t-i} + \\varepsilon _{t}\\,}\\] We code:\n\nCodear_model <-  list(ar = c(0.9))\n\narima.sim(model = ar_model, n = 20)\n\nTime Series:\nStart = 1 \nEnd = 20 \nFrequency = 1 \n [1] -1.77672932 -0.42137552 -1.14412458 -1.69266885 -0.89272259 -0.91866922\n [7] -0.19412967  0.47567958 -0.26995749 -0.72483040  0.03042900 -0.31695851\n[13]  1.04817286 -0.05238642 -0.49166004  0.01527420  0.52553654 -0.58810687\n[19] -0.60426529 -0.75117670"
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#interactivity",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#interactivity",
    "title": "Simulating and watching autoregressive processes",
    "section": "Interactivity",
    "text": "Interactivity\nThere is a popular example in highcharts: Dynamic Update where each second a random value is added to the line series https://www.highcharts.com/demo/dynamic-update.\nThe key part of this example is the next function which every second generate a random value and then is added to the series.\n\nCode// This is Javascript code :) :/ :S XD\nfunction () {\n    // set up the updating of the chart each second\n    var series = this.series[0];\n    setInterval(function () {\n        var x = (new Date()).getTime(), // current time\n            y = Math.random();\n        series.addPoint([x, y], true, true);\n    }, 1000);\n}\n\n\nWe’ll take the example as a template and change to store the last values of the process and generate the random noise and the new value. To get the linear combination between the past values and the autoregressive parameter we used the dot product. For the generation of a normal random number we can use the the Box-Muller transform.\nDot product of two arrays in Javascript https://stackoverflow.com/a/64816824/829971\nGenerating random normal number in Javascript https://stackoverflow.com/a/36481059/829971\nLet’s create some\n\nCodelibrary(highcharter)\nlibrary(stringr)\n\n# model\nar <-  c(0.85, -0.1, 0.2)\n\n# time to update the chart in seconds\ntime <- 1\n\n# the first values of the model\nts <- as.vector(arima.sim(model = list(ar = ar), n = 10))\nts <- round(ts, 3)\nts\n\n [1] 1.155 2.471 3.908 1.892 2.101 3.163 1.463 2.857 2.956 2.607\n\n\nThe function would be something like this:\n\nCodeload_fn <- \"function () {{\n\n    dot = (a, b) => a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);\n  function randn_bm() {{\n    var u = 0, v = 0;\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while(v === 0) v = Math.random();\n    return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n   }}\n  \n    var dat = [{ data }];\n  var ar = [{ ar }];\n  dat = dat.slice(-ar.length);\n  \n  // set up the updating of the chart each second\n  var series = this.series[0];\n  \n  setInterval(function () {{\n      \n      console.log(dat);\n      var new_value = dot(dat, ar) + randn_bm();\n      new_value = Math.round(1000 * new_value)/1000\n      console.log(new_value)\n      dat.shift(); \n      dat.push(new_value);\n      series.addPoint([new_value]);  \n      \n      //if (series.data.length < 500) {{\n      //  series.addPoint([new_value], true, false);\n      //}} else {{\n      //  series.addPoint([new_value], true, true);\n      //}}\n      \n  }}, { time });\n  \n}}\"\n\nload_fn_glued <- str_glue(\n  load_fn,\n  data = str_c(ts, collapse = \",\"),\n  ar = str_c(ar, collapse = \",\"),\n  time = time * 1000\n)\n\nload_fn_glued\n\nfunction () {\n\n    dot = (a, b) => a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);\n  function randn_bm() {\n    var u = 0, v = 0;\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while(v === 0) v = Math.random();\n    return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n   }\n  \n    var dat = [1.155,2.471,3.908,1.892,2.101,3.163,1.463,2.857,2.956,2.607];\n  var ar = [0.85,-0.1,0.2];\n  dat = dat.slice(-ar.length);\n  \n  // set up the updating of the chart each second\n  var series = this.series[0];\n  \n  setInterval(function () {\n      \n      console.log(dat);\n      var new_value = dot(dat, ar) + randn_bm();\n      new_value = Math.round(1000 * new_value)/1000\n      console.log(new_value)\n      dat.shift(); \n      dat.push(new_value);\n      series.addPoint([new_value]);  \n      \n      //if (series.data.length < 500) {\n      //  series.addPoint([new_value], true, false);\n      //} else {\n      //  series.addPoint([new_value], true, true);\n      //}\n      \n  }, 1000);\n  \n}\n\n\n\nCodehighchart() %>% \n  hc_add_series(data = ts) %>% \n  hc_chart(\n    events = list(load = JS(load_fn_glued)), \n    animation = list(duration = time*1000/2)\n    )\n\n\n\n\n\n\nAnd it works perfectly in the first try! Nah! This take me some time in the jsfiddle.\n\nAll according to keikaku."
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#improving-it",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#improving-it",
    "title": "Simulating and watching autoregressive processes",
    "section": "Improving it",
    "text": "Improving it\nWe can improve the chart doing for example:\n\nMake a plotLine in y axis at the value 0 to show as reference.\nMake a second yAxis to the right showing the last generated value, this can be done using the next function in the tickPositionerargument.\n\n\nCodetick_post_fn <- \"function(min,max){        \n  var data = this.chart.yAxis[0].series[0].processedYData;\n  //last point\n  return [Math.round(1000 * data[data.length-1])/1000]; \n}\"\n\n\n\nEnable the navigator panel hc_navigator(enabled = TRUE).\nWe can put an informative title showing the specification of the simulated model.\n\n\nCodeformula <- purrr::map2(ar, seq_along(ar), function(par, t){\n  \n  if(par > 0 & t > 1) {\n    par <- str_c(\"+ \", par)\n  }\n  \n  stringr::str_glue(\"{ par } \\\\times X_{{ t - { i } }}\", i = t)\n  \n  }) \n  \nformula <- purrr::reduce(formula, str_c, sep = \" \")\n\nformula <- str_c(\"$$ X_t = \", formula, \" + \\\\epsilon_t$$\")\n\n\nCodecat(formula)\n\\[ X_t = 0.85 \\times X_{ t - 1 } -0.1 \\times X_{ t - 2 } + 0.2 \\times X_{ t - 3 } + \\epsilon_t\\]\nAlternatively, formula using subscript and superscript tags.\n\nCodeformula <- purrr::map2(ar, seq_along(ar), function(par, t){\n  \n  if(par > 0 & t > 1) {\n    par <- str_c(\"+ \", par)\n  }\n  \n  htmltools::tagList(par, \"×\", \"X\", tags$sub(stringr::str_glue(\"t - { i }\", i = t)))\n  \n}) \n\nformula <- purrr::reduce(formula, htmltools::tagList)\n\nformula <- str_c(\"X\", tags$sub(\"t\") %>% as.character(), \" = \",formula %>% as.character(), \" + &epsilon;\",  tags$sub(\"t\") %>% as.character())\n\n\nCodecat(formula)\nXt = 0.85 × X t - 1 -0.1 × X t - 2 + 0.2 × X t - 3 + εt\n\nHelper button to remove last values.\n\n\nCoderm_poinst_fn <- \"function () {\n  for (var i = 1; i <= 500; i++) {\n    if (this.series[0].data.length) {\n      this.series[0].data[0].remove();\n    }\n  }\n}\"\n\n\n\nAnd others tweaks.\n\n\nCodehighchart() %>% \n  hc_add_series(data = ts, name = \"Process\") %>% \n  hc_chart(\n    events = list(load = JS(load_fn_glued)), \n    animation = list(duration = time*1000/2)\n    ) %>% \n  hc_title(text = \"Autoregressive process\") %>%\n  hc_subtitle(text = as.character(formula), useHTML = TRUE) %>% \n  hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>% \n  hc_tooltip(valueDecimals = 3) %>% \n  hc_xAxis(width = \"95%\") %>% \n  hc_exporting(\n    enabled = TRUE,\n    buttons = list(\n      list(\n        text =  \"Remove last 500 values\",\n        onclick = JS(rm_poinst_fn),\n        theme = list(stroke = 'silver')\n        )\n      )\n    ) %>% \n  hc_yAxis_multiples(\n    # default axis\n    list(\n      title = list(text = \"\"),\n      plotLines = list(\n        list(value = 0, width = 2, color = \"#AAA\", zIndex = 1)\n        )\n      ),\n    # opposite axis\n    list(\n      title = list(text = \"\"),\n      linkedTo = 0,\n      opposite = TRUE,\n      gridLineWidth = 0,\n      tickPositioner = JS(tick_post_fn)\n    )\n  ) %>% \n  hc_navigator(\n    enabled = TRUE, \n    series = list(type = \"line\"),\n    xAxis = list(labels = list(enabled = FALSE), width = \"95%\")\n  )"
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#extending-it",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#extending-it",
    "title": "Simulating and watching autoregressive processes",
    "section": "Extending it",
    "text": "Extending it\nWe can encapsulate all this code into a function:\n\nCodelibrary(highcharter)\nlibrary(stringr)\n\nsim_ar_hc <- function(ar = c(0.3, 0.2), time = 1){\n  \n   # the first values of the model\n  ts <- as.vector(arima.sim(model = list(ar = ar), n = 10))\n  ts <- round(ts, 3)\n  ts\n  \nload_fn <- \"function () {{\n\n    dot = (a, b) => a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);\n  function randn_bm() {{\n    var u = 0, v = 0;\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while(v === 0) v = Math.random();\n    return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n   }}\n  \n    var dat = [{ data }];\n  var ar = [{ ar }];\n  dat = dat.slice(-ar.length);\n  \n  // set up the updating of the chart each second\n  var series = this.series[0];\n  \n  setInterval(function () {{\n      \n      console.log(dat);\n      var new_value = dot(dat, ar) + randn_bm();\n      new_value = Math.round(1000 * new_value)/1000\n      console.log(new_value)\n      dat.shift(); \n      dat.push(new_value);\n      series.addPoint([new_value]);  \n      \n      //if (series.data.length < 500) {{\n      //  series.addPoint([new_value], true, false);\n      //}} else {{\n      //  series.addPoint([new_value], true, true);\n      //}}\n      \n  }}, { time });\n  \n}}\"\n  \n  load_fn_glued <- str_glue(\n    load_fn,\n    data = str_c(ts, collapse = \",\"),\n    ar = str_c(ar, collapse = \",\"),\n    time = time * 1000\n  )\n  \n  tick_post_fn <- \"function(min,max){        \n    var data = this.chart.yAxis[0].series[0].processedYData;\n    //last point\n    return [Math.round(1000 * data[data.length-1])/1000]; \n  }\"\n  \n  rm_poinst_fn <- \"function () {\n    for (var i = 1; i <= 500; i++) {\n      if (this.series[0].data.length) {\n        this.series[0].data[0].remove();\n      }\n    }\n  }\"\n    \n  formula <- purrr::map2(ar, seq_along(ar), function(par, t){\n    \n    if(par > 0 & t > 1) {\n      par <- str_c(\"+ \", par)\n    }\n    \n    htmltools::tagList(par, \"×\", \"X\", tags$sub(stringr::str_glue(\"t - { i }\", i = t)))\n    \n  }) \n  \n  formula <- purrr::reduce(formula, htmltools::tagList)\n  \n  formula <- str_c(\"X\", tags$sub(\"t\") %>% as.character(), \" = \",formula %>% as.character(), \" + &epsilon;\",  tags$sub(\"t\") %>% as.character())\n  \n  hc <- highchart() %>% \n    hc_add_series(data = ts, name = \"Process\") %>% \n    hc_chart(\n      events = list(load = JS(load_fn_glued)), \n      animation = list(duration = time*1000/2)\n      ) %>%\n    hc_title(text = \"Autoregressive process\") %>%\n    hc_subtitle(text = formula, useHTML = TRUE) %>%\n    hc_plotOptions(series = list(marker = list(enabled = FALSE))) %>%\n    hc_tooltip(valueDecimals = 3) %>%\n    hc_xAxis(width = \"95%\") %>%\n    hc_exporting(\n      enabled = TRUE,\n      buttons = list(\n        list(\n          text =  \"Remove last 500 values\",\n          onclick = JS(rm_poinst_fn),\n          theme = list(stroke = 'silver')\n          )\n        )\n      ) %>%\n    hc_yAxis_multiples(\n      # default axis\n      list(\n        title = list(text = \"\"),\n        plotLines = list(\n          list(value = 0, width = 2, color = \"#AAA\", zIndex = 1)\n          )\n        ),\n      # opposite axis\n      list(\n        title = list(text = \"\"),\n        linkedTo = 0,\n        opposite = TRUE,\n        gridLineWidth = 0,\n        tickPositioner = JS(tick_post_fn)\n      )\n    ) %>%\n    hc_navigator(\n      enabled = TRUE,\n      series = list(type = \"line\"),\n      xAxis = list(labels = list(enabled = FALSE), width = \"95%\")\n    )\n  \n  hc\n  \n}\n\n\nWhite Noise:\n\nCodesim_ar_hc(ar = c(0))\n\n\n\n\n\n\nSome traditional AR model:\n\nCodesim_ar_hc(ar = c(.8, .1))"
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#let-it-shine-with-shiny-package",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#let-it-shine-with-shiny-package",
    "title": "Simulating and watching autoregressive processes",
    "section": "Let it shine (with {shiny} package)",
    "text": "Let it shine (with {shiny} package)\nIn this case we can update the highcharts using the new set of proxy functions. You can check the code of the shiny app in https://github.com/jbkunst/shiny-apps-edu/ and the app live is in https://jbkunst.shinyapps.io/arma-process"
  },
  {
    "objectID": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#references",
    "href": "posts/2021-07-17-simulating-and-watching-autoregressive-processes/index.html#references",
    "title": "Simulating and watching autoregressive processes",
    "section": "References",
    "text": "References\n\nhttps://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/demo/dynamic-update\nhttps://jsfiddle.net/BlackLabel/evypfr1L/\nhttp://jsfiddle.net/upt4cbqj/\nhttp://www.java2s.com/Tutorials/highcharts/Example/Series_Data/Remove_first_data_item_from_series.htm"
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "",
    "text": "Why use GOT data? Because I was participating in #datosdemiercoles which is the spanish version of #tidytuesday. So the data is given and the purpouse is to learn new packages using that data and share with the community, you know this already, right?\nSecondly the package I want to learn beside {ggforce} is {gganimate} so a very first idea was represent every character as a point and move according the actual affiliations. A kind of copy inspiration from FlowingData’s A Day in the Life of Americans1\n\nInspiration by Flowindata"
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#introduction",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#introduction",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Introduction",
    "text": "Introduction\nWhy use GOT data? Because I was participating in #datosdemiercoles which is the spanish version of #tidytuesday. So the data is given and the purpouse is to learn new packages using that data and share with the community, you know this already, right?\nSecondly the package I want to learn beside {ggforce} is {gganimate} so a very first idea was represent every character as a point and move according the actual affiliations. A kind of copy inspiration from FlowingData’s A Day in the Life of Americans1\n\nInspiration by Flowindata"
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#disclaimers",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#disclaimers",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Disclaimers",
    "text": "Disclaimers\n\nI know the animation is not then best way to visualiza data! Don’t judge me please! But is fun to play with.\nI don’t follow the series so I don’t know if the results or animations makes any sense."
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#the-data-the-wrangling-and-the-cleaning",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#the-data-the-wrangling-and-the-cleaning",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "The data, the wrangling and the cleaning",
    "text": "The data, the wrangling and the cleaning\nThe data come from this post where the shifting affiliations are visualized using an alluyvial diagram. It’s a nice post by Matthew Lunkes where he tell all the process to get the final chart:\n\nIn this case the data can be downloaded from this repository https://github.com/MattLunkes/GoT_Affiliations.\n\nCodelibrary(tidyverse)\n\ndata <- read_csv(\"https://raw.githubusercontent.com/MattLunkes/GoT_Affiliations/master/got_char.csv\")\ndata\n\n# A tibble: 488 × 11\n   Name   Origin Start…¹ End o…² End o…³ End o…⁴ End o…⁵ End o…⁶ End o…⁷ End o…⁸\n   <chr>  <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Tyrio… House… King R… King J… King J… King J… King T… Daener… Daener… Daener…\n 2 Cerse… House… King R… King J… King J… King J… King T… King T… Queen … Queen …\n 3 Daene… House… Visery… Daener… Daener… Daener… Daener… Daener… Daener… Daener…\n 4 Jon S… House… King R… Night'… Wildli… Night'… Night'… Deceas… Jon Sn… Daener…\n 5 Sansa… House… King R… King J… King J… King J… Petyr … Roose … Jon Sn… Jon Sn…\n 6 Arya … House… King R… Other,… Other,… Other,… Other,… Other,… Jon Sn… Jon Sn…\n 7 Jaime… House… King R… King J… King J… King J… King T… King T… Queen … Queen …\n 8 Jorah… House… Visery… Daener… Daener… Daener… Daener… Daener… Daener… Daener…\n 9 Theon… House… King R… Robb S… Balon … King J… King T… Balon … Daener… Daener…\n10 Samwe… House… Night'… Night'… Night'… Night'… Night'… Night'… Night'… Night'…\n# … with 478 more rows, 1 more variable: Episodes <dbl>, and abbreviated\n#   variable names ¹​`Starting Affiliation`, ²​`End of S1`, ³​`End of S2`,\n#   ⁴​`End of S3`, ⁵​`End of S4`, ⁶​`End of S5`, ⁷​`End of S6`, ⁸​`End of S7`\n\n\nAs we see, the data comes in a not tidy way so gather is our friend here.\n\nCodedata_long <- data |>\n  janitor::clean_names() |> \n  rename(end_of_s0 = starting_affiliation) |>\n  select(-episodes, -origin) |> \n  gather(season, affiliation, -name) |> \n  mutate(\n    season = as.numeric(str_extract(season, \"\\\\d+\")),\n    affiliation = case_when(\n      affiliation == \"King Robert Baratheon\" ~ \"Baratheon\",\n      affiliation == \"Viserys Targaryen\" ~ \"Targaryen\",\n      affiliation == \"King Joffrey Baratheon\" ~ \"Lannister\",\n      affiliation == \"Daenerys Targaryen\" ~ \"Targaryen\",\n      affiliation == \"Night's Watch\" ~ \"Night's Watch\",\n      affiliation == \"Other, Westeros\" ~ \"Westeros\",\n      affiliation == \"Wildlings\" ~ \"Wildlings\",\n      affiliation == \"King Tommen Baratheon\" ~ \"Lannister\",\n      affiliation == \"Petyr Baelish, Lord Protector of the Vale\" ~ \"The Vale\",\n      affiliation == \"Other, Essos\" ~ \"Essos\",\n      affiliation == \"Roose Bolton, Lord Paramount of the North\" ~ \"Bolton\",\n      affiliation == \"Queen Cersei Lannister\" ~ \"Lannister\",\n      affiliation == \"Jon Snow, King in the North\" ~ \"Stark\",\n      TRUE ~ affiliation\n      )\n    )\n\n# there are some repeated characters?\ndata_long <- data_long |> \n  semi_join(count(data, Name) |> filter(n == 1), by = c(\"name\" = \"Name\")) |> \n  # importante for the ggrepel part\n  arrange(season, name, affiliation)\n\ndata_long\n\n# A tibble: 3,592 × 3\n   name            season affiliation  \n   <chr>            <dbl> <chr>        \n 1 Addam Marbrand       0 Baratheon    \n 2 Adrack Humble        0 Baratheon    \n 3 Aeron Greyjoy        0 Baratheon    \n 4 Aggo                 0 Khal Drogo   \n 5 Alliser Thorne       0 Night's Watch\n 6 Alton Lannister      0 Baratheon    \n 7 Alys Karstark        0 Baratheon    \n 8 Amory Lorch          0 Baratheon    \n 9 Anara                0 Essos        \n10 Anguy                0 Baratheon    \n# … with 3,582 more rows"
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#affiliations-positions",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#affiliations-positions",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Affiliations Positions",
    "text": "Affiliations Positions\nAt the beginning I think use a circular layout and see what happend but the result was far for beign interesting, and as we can see I was a failure in my first attempt using {gganimate}.\n\n\nWell, so the next idea and step was to get closer the affilations related. How can be two affiliations be related? An answer can be the the amount of characters which move from one to another.\n\nCodets <- data_long |> \n  distinct(season) |> \n  pull() |> \n  head(-1)\n\nchange_season <- map_df(ts, function(t = 0){\n  \n  dout <- full_join(\n    data_long |> filter(season == t),\n    data_long |> filter(season == t + 1),\n    by = \"name\", \n    suffix = c(\"_before\", \"_actual\")\n  ) |> \n    count(from = affiliation_before, to = affiliation_actual)\n  \n  dout <- dout |> \n    filter(complete.cases(dout)) |> \n    mutate(season = t)\n  \n  dout\n  \n})\n\nchange_total <- change_season |> \n  group_by(from, to) |> \n  summarise(n = sum(n)) |> \n  ungroup()\n\nchange_total\n\n# A tibble: 119 × 3\n   from                                    to                                  n\n   <chr>                                   <chr>                           <int>\n 1 Balon Greyjoy, King of the Iron Islands Balon Greyjoy, King of the Iro…    31\n 2 Balon Greyjoy, King of the Iron Islands Deceased                            7\n 3 Balon Greyjoy, King of the Iron Islands Euron Greyjoy, King of the Iro…     4\n 4 Balon Greyjoy, King of the Iron Islands Lannister                           1\n 5 Balon Greyjoy, King of the Iron Islands Targaryen                           3\n 6 Baratheon                               Balon Greyjoy, King of the Iro…     9\n 7 Baratheon                               Brotherhood Without Banners         5\n 8 Baratheon                               Deceased                           15\n 9 Baratheon                               Essos                               1\n10 Baratheon                               House Arryn (Neutral)              12\n# … with 109 more rows\n\n\nNow, with this data we can use the {igraph} package and the graph_from_data_frame function to get a graph from the previous data frame and then get a layout.\n\nCodelibrary(igraph)\n\ng <- graph_from_data_frame(change_total, directed = FALSE)\n\n# https://igraph.org/r/doc/strength.html\nE(g)$weight <- pull(change_total, n)\nV(g)$degree <- degree(g)\n\nV(g)$label.cex <- 0.5\n\nplot(g)\n\n\n\n\nNice! but we need the positions instead of the image. So we’ll use the layout_with_fr to get some layout of our graph.\n\nCodeset.seed(123)\nlayout <- layout_with_fr(g)\n\naffiliations <- tibble(\n  affiliation = V(g)$name,\n  x = layout[, 2],\n  y = layout[, 1],\n  degree = degree(g)\n)\n\naffiliations <- data_long |> \n  count(affiliation) |> \n  left_join(affiliations, ., by = \"affiliation\")\n\naffiliations\n\n# A tibble: 27 × 5\n   affiliation                                 n     x       y degree\n   <chr>                                   <int> <dbl>   <dbl>  <dbl>\n 1 Balon Greyjoy, King of the Iron Islands    46 -1.85  0.535       9\n 2 Baratheon                                 200 -1.56  0.153      11\n 3 Bolton                                     18 -2.35  0.595       5\n 4 Brotherhood Without Banners                52 -1.52  0.774       6\n 5 Deceased                                  826 -2.27 -0.181      26\n 6 Dothraki                                  100 -3.00 -1.20        6\n 7 Essos                                     262 -2.06 -0.641      16\n 8 Essos Slavers                             113 -2.05 -1.35        6\n 9 Euron Greyjoy, King of the Iron Islands     4 -1.96  1.61        2\n10 High Sparrow                                7 -3.06 -0.0212      4\n# … with 17 more rows\n\n\nAt this point we are ready to use ggplot and check!\n\nCodep1 <- ggplot(affiliations, aes(x, y, color = affiliation, label = affiliation, size = degree)) +\n  geom_point() +\n  geom_text() +\n  scale_size(range = c(1, 4)) +\n  theme(legend.position = \"none\") +\n  labs(title = \"igraph laytout\")\np1\n\n\n\n\nThis is really an improvement from the the circular layout. The downside is the main affiliations are too close so the text is overlaping. A simple solution to this was generate an equidistant sequence for every set of coordinates, \\(x\\) and \\(y\\).\n\nCodeaffiliations <- affiliations |> \n  arrange(y) |> \n  mutate(y = seq(1:n())) |> \n  arrange(x) |> \n  mutate(x = seq(1:n())) |> \n  mutate_at(vars(x, y), ~ (.x - mean(.x))/sd(.x))\n\n\nWe can compare the results:\n\n\n\n\n\nHappy with the effect of a simple fix for the overlaping text. And I think this change keep the spirit of the original graph’s shape."
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#character-positions",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#character-positions",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Character positions",
    "text": "Character positions\nTo get the character positions for every step/time/season we decided to put them in the corresponding affiliation making a circle around it and then adding a random noise\n\nCodeget_reg_poly_coords <- function(sides = 5, radius = 1, x0 = 0, y0 = 0) {\n  # https://stackoverflow.com/a/7198179/829971\n  x <- radius * cos(2*pi*(1:sides)/sides) + x0\n  y <- radius * sin(2*pi*(1:sides)/sides) + y0\n  return(tibble(x, y))\n}\n\ncharacters <- data_long |> \n  count(season, affiliation) |>\n  mutate(coords = map2(n, 1/nrow(affiliations), get_reg_poly_coords)) |> \n  unnest(c(coords)) |> \n  select(-season, -affiliation)\n\ncharacters <- bind_cols(data_long, characters) |> \n  left_join(affiliations, by = c(\"affiliation\"),  suffix = c(\".character\", \".affiliation\")) |> \n  mutate(\n    x = x.character +  x.affiliation,\n    y = y.character +  y.affiliation\n  ) |> \n  mutate_at(vars(x, y), ~ .x + runif(length(.x), -1, 1)/nrow(affiliations))\n\n\n\nCodep <- ggplot() +\n  geom_point(aes(x, y, color = affiliation), alpha = 0.5, data = characters) +\n  geom_text(aes(x, y, size = n, label = affiliation), alpha = 0.5, data = affiliations) +\n  scale_size_area() +\n  scale_color_viridis_d() +\n  theme(legend.position = \"none\")\np\n\n\n\n\nNice! We are almost there."
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#some-details-before-the-magic",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#some-details-before-the-magic",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Some details before the magic",
    "text": "Some details before the magic\nTo get a very style GOT theme we need first the font, you can download from this link https://fontmeme.com/fonts/game-of-thrones-font/.2 and use it with the {extrafont} package.\nWe’ll select some important characters to use with {ggrepel} package:\n\nCodemain_characters <- data |>\n  select(name = Name, Episodes) |> \n  arrange(desc(Episodes)) |>\n  head(5)\n\nknitr::kable(main_characters)\n\n\n\nname\nEpisodes\n\n\n\nTyrion Lannister\n61\n\n\nCersei Lannister\n58\n\n\nDaenerys Targaryen\n56\n\n\nJon Snow\n56\n\n\nSansa Stark\n54"
  },
  {
    "objectID": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#animation-is-here",
    "href": "posts/2019-04-23-got-animating-the-shifting-of-affiliations/index.html#animation-is-here",
    "title": "#GOT Animating the Shifting of Affiliations",
    "section": "Animation is HERE",
    "text": "Animation is HERE\nFirst we need some setup for the font and colors.\n\nCodelibrary(extrafont)\nloadfonts(device = \"win\") # yeah, win! :/\n\nfont <- \"Game of Thrones\"\nfont2 <- \"Roboto Condensed\"\nbckground <- \"black\"\ncolor1 <- \"#959394\"\ncolor2 <- \"white\"\nseed <- 123\n\ntheme_set(theme_gray())\n\n\nThen, the usual {ggplot2} syntax.\n\nCodep <- ggplot() +\n  # maint characters labels\n  ggrepel::geom_text_repel(\n  # geom_text(\n    aes(x, y, label = name),\n    seed = seed,\n    # box.padding = .5, force = 0.25,, max.iter = 5000,\n    color = color1,\n    size = 3,\n    family = font2,\n    vjust = \"inward\", hjust = \"inward\",\n    data = semi_join(characters, main_characters, by = \"name\")\n  ) +\n  # https://stackoverflow.com/a/34398935/829971\n  # maint characters points\n  geom_point(\n    aes(x, y),\n    size = 3,\n    alpha = 0.50,\n    color = color2,\n    stroke = 0,\n    shape = 16,\n    data = semi_join(characters, main_characters, by = \"name\")\n  ) +\n  # rest of points\n  geom_point(\n    aes(x, y),\n    size = 3,\n    alpha = 0.20,\n    color = color2,\n    stroke = 0,\n    shape = 16,\n    data = anti_join(characters, main_characters, by = \"name\") \n  ) +\n  # labels affiliations\n  geom_text(\n    aes(x, y + 3 / nrow(affiliations), label = affiliation, size = degree),\n    data = affiliations,\n    color = color1,\n    alpha = 0.80,\n    family = font\n  ) +\n  scale_size(range = c(2, 5)) +\n  labs(\n    title = \"#\",\n    caption = \"#DatosDeMiercoles por @jbkunst\\njkunst.com\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"none\",\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    panel.grid = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    rect = element_rect(fill = bckground, color = bckground),\n    text  = element_text(family = font, colour = color1, size = 15),\n    plot.title = element_text(family = font, colour = color1, size = 25),\n    plot.subtitle = element_text(family = font2, colour = color1, size = 13),\n    plot.caption = element_text(family = font2, colour = color1, size = 10),\n  )\n\n\nFinally add the {gganimate} magic:\n\nCodelibrary(gganimate)\n\np <- p +\n  labs(subtitle = \"Affiliation changes in season {trunc(frame_time)}\") +\n  transition_time(season) +\n  shadow_wake(wake_length = 0.005, alpha = TRUE, exclude_layer = 1) +\n  ease_aes(\"exponential-in-out\")\n\n\nFor test purposes I recommend reduce de fps to 10, and duration as much you can according how many frames you are using so you can to check if the output animation is what you want quickly, then for the final output use at least 30 fps to get a smooth transition.\n\nCodeanimate(p, fps = 30, duration = 8*3, width = 1000, height = 800)\n\n\nAnd voilà:"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html",
    "title": "Visualización en el Análisis de Datos",
    "section": "",
    "text": "De vez en cuando tengo que hacer clases de visualización o análisis de datos, enseñar ggplot2 o dplyr, y en dichas ocaciones especiales siempre retomo un ya muy viejo ejemplo con datos del metro de Santiago de Chile en el cual intento motivar el hecho de que a través de distintas visualización uno va aprediendo de los datos.\nLa idea es ejemplificar el ejercicio de visualización tanto para consumir o generar conocimiento además de presentar la información. Todo esto bajo un contexto de análsis de datos generando/derivando nuevas variables como se verá más adelante."
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#setup-paquetes-y-otras-cosas",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#setup-paquetes-y-otras-cosas",
    "title": "Visualización en el Análisis de Datos",
    "section": "Setup: paquetes y otras cosas",
    "text": "Setup: paquetes y otras cosas\n\nCódigolibrary(tidyverse)\nlibrary(scales)\nlibrary(corrr)\nlibrary(patchwork)\nlibrary(widyr)\nlibrary(igraph)\nlibrary(ggnetwork)\nlibrary(ggforce)\nlibrary(chilemapas)\n\ntheme_set(\n  theme_get() +\n    theme(legend.position = \"bottom\")\n)\n\n# sobresicribir los parámetros por default\n# lo hago pues no me gusta el color tan claro \n# _amarillo chillón_ en la escala viridis.\nscale_fill_viridis_d  <- partial(\n  ggplot2::scale_fill_viridis_d , \n  begin = 0.05, end = 0.9\n  )\nscale_color_viridis_d <- partial(\n  ggplot2::scale_color_viridis_d, \n  begin = 0.05, end = 0.9\n  )"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#datos",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#datos",
    "title": "Visualización en el Análisis de Datos",
    "section": "Datos",
    "text": "Datos\nLos datos a trabajar corresponden a ingresos de usuarios a estaciones de metros cada media hora. No recuerdo muy bien de donde los obtuve, pero existen y los llevo a cada repo en donde necesito mostrar este ejemplo.\n\nCódigoruta_datos <- here::here(\"posts/2023-07-09-visualizacion-en-el-analisis-de-datos/data\")\n\ndata <- data.table::fread(fs::path(ruta_datos, \"2015.04_Subidas_paradero_mediahora_web.csv.gz\"))\ndata <- as_tibble(data)\n\ndata\n\n# A tibble: 358,543 × 3\n   paraderosubida mediahora subidas_laboral_promedio\n   <chr>          <chr>                        <dbl>\n 1 ALCANTARA      05:30:00                       2.6\n 2 ALCANTARA      06:00:00                      13.2\n 3 ALCANTARA      06:30:00                      53.4\n 4 ALCANTARA      07:00:00                     185. \n 5 ALCANTARA      07:30:00                     364  \n 6 ALCANTARA      08:00:00                     546. \n 7 ALCANTARA      08:30:00                     479. \n 8 ALCANTARA      09:00:00                     359  \n 9 ALCANTARA      09:30:00                     275. \n10 ALCANTARA      10:00:00                     230. \n# ℹ 358,533 more rows\n\n\nEn el ejemplo estudiamos solamente las estaciones de metro, por lo que eliminamos todo lo que parezca código.\n\nCódigodata <- data |>\n  filter(!str_detect(paraderosubida, \"[0-9]+-[0-9]\")) |>\n  filter(paraderosubida != \"-\")\n\n\nAhora parseamos mediahora para transformarla en el tipo de dato adecuado.\n\nCódigodata <- data |>\n  mutate(mediahora = readr::parse_guess(mediahora)) |> \n  filter(hour(mediahora) > 0) \n\n\nY por último nos aseguramos de que cada estación posea todas las mediahora.\n\nCódigodata <- complete(\n  data,\n  paraderosubida,\n  mediahora, \n  fill = list(subidas_laboral_promedio = 0)\n  )\n\ndata\n\n# A tibble: 3,922 × 3\n   paraderosubida mediahora subidas_laboral_promedio\n   <chr>          <time>                       <dbl>\n 1 ALCANTARA      05:30                          2.6\n 2 ALCANTARA      06:00                         13.2\n 3 ALCANTARA      06:30                         53.4\n 4 ALCANTARA      07:00                        185. \n 5 ALCANTARA      07:30                        364  \n 6 ALCANTARA      08:00                        546. \n 7 ALCANTARA      08:30                        479. \n 8 ALCANTARA      09:00                        359  \n 9 ALCANTARA      09:30                        275. \n10 ALCANTARA      10:00                        230. \n# ℹ 3,912 more rows"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#lo-simple-de-menos-a-más",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#lo-simple-de-menos-a-más",
    "title": "Visualización en el Análisis de Datos",
    "section": "Lo simple, de menos a más",
    "text": "Lo simple, de menos a más\nVisualicemos los datos de una estación:\n\nCódigodplazamaipu <- data |>\n  filter(paraderosubida == \"PLAZA MAIPU\")\n\np0 <- ggplot(dplazamaipu) +\n  geom_point(aes(subidas_laboral_promedio, mediahora, color = paraderosubida), size = 1.5) +\n  scale_x_continuous(labels = comma) +\n  scale_color_viridis_d(guide = \"none\")\n\np0\n\n\n\n\nEs bueno equivocarse! Vamos por otro intento.\n\nCódigoggplot(dplazamaipu) +\n  geom_path(aes(subidas_laboral_promedio, mediahora, color = paraderosubida), size = 1.5) +\n  scale_x_continuous(labels = comma) +\n  scale_color_viridis_d(guide = \"none\")\n\n\n\n\nEs importante seguir convenciones. En un gráfico done una de las variables es temporal usualmente se mapea al eje X.\n\nCódigoggplot(dplazamaipu) +\n  geom_path(aes(mediahora, subidas_laboral_promedio, color = paraderosubida), size = 1.5) +\n  scale_y_continuous(labels = comma) +\n  scale_color_viridis_d(name = NULL)"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#buscando-patrones",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#buscando-patrones",
    "title": "Visualización en el Análisis de Datos",
    "section": "Buscando patrones",
    "text": "Buscando patrones\nImportante observar patrones o relaciones en los datos.\n\nCódigod1 <- data |> \n  filter(paraderosubida %in% c(\"PLAZA MAIPU\", \"LAGUNA SUR\"))\n\nc <- d1 |> \n  pivot_wider(\n    names_from = paraderosubida, \n    values_from = subidas_laboral_promedio\n    ) |>\n  corrr::correlate(quiet = TRUE) |> \n  select(2) |>\n  pull() |> \n  na.omit() |> \n  as.numeric()\n\np1 <- ggplot(d1) +\n  geom_line(\n    aes(mediahora, subidas_laboral_promedio, \n        color = paraderosubida, \n        group = paraderosubida),\n    size = 1.2\n    ) +\n  scale_y_continuous(label = scales::comma) +\n  scale_color_viridis_d()\n  \np1\n\n\n\n\nCorrelación\nMétrica de asociación lineal. Nos ayuda a cuantificar la asociación lineal.\n\nCódigoset.seed(123)\n\nn <- 100\nx <- rnorm(n)\ne <- rnorm(n)\n\npc <- tibble(\n  beta  = c(0,  1, 1, -1, -1, 0),\n  beta2 = c(0,  0, 0,  1,  0, 1),\n  sd    = c(1,  1, 0,  0,  1, 1),\n) |> \n  pmap_df(function(beta = 1, beta2 = 1, sd = 1){\n    tibble(\n      x = x,\n      y = beta * x + beta2 * x^2 + sqrt(sd) * e,\n      cor = cor(x, y)\n    )\n  }) |> \n  mutate(\n    cor = round(cor, 3),\n    cor = str_glue(\"{cor} ({ percent(cor)})\"),\n    cor = fct_inorder(as.character(cor))\n    ) |> \n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.25) +\n  geom_smooth(method = \"lm\", color = \"darkred\", size = 1.2, \n              formula = y ~  x, se = FALSE) +\n  facet_wrap(vars(cor), scales = \"free\") +\n  theme(\n    axis.text.x = element_text(size = 6),\n    axis.text.y = element_text(size = 6),\n    )\n\npc\n\n\n\n\nDe esta forma, con los datos los podemos visualizar de otra forma.\n\nCódigolab_dates <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio)  |> \n  pull(mediahora) |> \n  as_datetime() |> \n  pretty(6)\n\nlab_dates_lbls <- str_extract(lab_dates, \"[0-9]{2}:[0-9]{2}\")\n\np2 <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio) |>  \n  mutate(mediahora = as_datetime(mediahora)) |> \n  ggplot(aes(`LAGUNA SUR`, `PLAZA MAIPU`)) +\n  geom_point(aes(color = as.numeric(mediahora)), size = 3) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  scale_color_viridis_c(name = NULL, breaks = as.numeric(lab_dates), labels = lab_dates_lbls) +\n  labs(subtitle = str_glue(\"Correlación { percent(c, , accuracy = 0.01) }\"))\n\n\np1 | p2 \n\n\n\n\nOtro par de estaciones\n\nCódigod1 <- data |> \n  filter(paraderosubida %in% c(\"UNIVERSIDAD DE CHILE\", \"PLAZA DE PUENTE ALTO\")) \n\nc <- d1 |> \n  pivot_wider(\n    names_from = paraderosubida, \n    values_from = subidas_laboral_promedio\n    ) |>\n  corrr::correlate(quiet = TRUE) |> \n  select(2) |>\n  pull() |> \n  na.omit() |> \n  as.numeric()\n\np1 <- ggplot(d1) +\n  geom_line(\n    aes(mediahora, subidas_laboral_promedio, color = paraderosubida, group = paraderosubida),\n    size = 1.2\n    ) +\n  scale_y_continuous(label = scales::comma) +\n  scale_color_viridis_d(name = NULL)\n\np2 <- d1 |> \n  spread(paraderosubida, subidas_laboral_promedio) |>  \n  mutate(mediahora = as_datetime(mediahora)) |> \n  ggplot(aes(`PLAZA DE PUENTE ALTO`, `UNIVERSIDAD DE CHILE`)) +\n  geom_point(aes(color = as.numeric(mediahora)), size = 3) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  scale_color_viridis_c(name = NULL, breaks = as.numeric(lab_dates), labels = lab_dates_lbls) +\n  labs(subtitle = str_glue(\"Correlación { percent(c, , accuracy = 0.01) }\"))\n\np1 | p2 \n\n\n\n\nTodas las correlaciones\n\nCódigodcor <- data |>\n  widyr::pairwise_cor(\n    paraderosubida,\n    mediahora,\n    subidas_laboral_promedio\n    )\n\nncors <- dcor |> \n  nrow() |> \n  comma()\n\nnest <- dcor |> \n  count(item1) |> \n  nrow() |> \n  comma()\n\n\nCalculamos con 106 estaciones 11,130 correlaciones. Visualización vía heatmap.\n\nCódigoggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL)\n\n\n\n\nEl orden, en este caso, importa.\n\nCódigoM <- data |> \n  spread(paraderosubida, subidas_laboral_promedio) |> \n  select(-1) |> \n  mutate_all(replace_na, 0) |> \n  cor()\n\norder <- corrplot::corrMatOrder(M, order = \"hclust\")\n\nM <- M[order, order]\n\nlvls <- colnames(M)\n\ndcor <- dcor |> \n  mutate(across(where(is.character), ~ factor(.x,  levels = lvls)))\n\npcors <- ggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL) +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\npcors"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#correlaciones",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#correlaciones",
    "title": "Visualización en el Análisis de Datos",
    "section": "Correlaciones",
    "text": "Correlaciones\n\nCódigodcor <- data |>\n  widyr::pairwise_cor(\n    paraderosubida,\n    mediahora,\n    subidas_laboral_promedio\n    )\n\nncors <- dcor |> \n  nrow() |> \n  comma()\n\nnest <- dcor |> \n  count(item1) |> \n  nrow() |> \n  comma()\n\n\nCalculamos con 106 estaciones 11,130 correlaciones. Visualización vía heatmap.\n\nCódigoggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL)\n\n\n\n\nEl orden, en este caso, importa.\n\nCódigoM <- data |> \n  spread(paraderosubida, subidas_laboral_promedio) |> \n  select(-1) |> \n  mutate_all(replace_na, 0) |> \n  cor()\n\norder <- corrplot::corrMatOrder(M, order = \"hclust\")\n\nM <- M[order, order]\n\nlvls <- colnames(M)\n\ndcor <- dcor |> \n  mutate(across(where(is.character), ~ factor(.x,  levels = lvls)))\n\npcors <- ggplot(dcor) +\n  geom_tile(aes(item1, item2, fill = correlation)) + \n  scale_fill_viridis_c(limits = c(-1, 1), breaks = seq(-1, 1, length.out = 5), labels = percent) +\n  theme(\n    axis.text.y = element_text(size = 3),\n    axis.text.x = element_text(size = 3, angle = 90, hjust = 1),\n    legend.position = \"right\",\n    legend.key.width = unit(0.5, \"cm\")\n    ) +\n  labs(x = NULL, y = NULL) +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\npcors"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#redes-y-comunidades",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#redes-y-comunidades",
    "title": "Visualización en el Análisis de Datos",
    "section": "Redes y comunidades",
    "text": "Redes y comunidades\nSelecciones las correlaciones más altas.\n\nCódigoncors <- 250\n\ndcorf <- dcor |>\n  filter(as.character(item1) < as.character(item2)) |> \n  arrange(desc(correlation)) |> \n  mutate(w = correlation*correlation) |> \n  head(ncors)\n\n\nConsiderando las 250 correlaciones más altas realizamos una red donde el peso del vértice es la correlación y el tamaño es la cantidad de subidas.\n\nCódigog <- graph_from_data_frame(dcorf, directed = FALSE)\n\nE(g)$weight <- dcorf$w\n\nwc <- cluster_fast_greedy(g)\nnc <- length(unique(membership(wc)))\n\ndvert <- tibble(paraderosubida = V(g)$name) |> \n  mutate(comm = as.numeric(membership(wc))) |> \n  left_join(\n    data |>\n      group_by(paraderosubida) |>\n      summarise(n = sum(subidas_laboral_promedio)),\n    by = \"paraderosubida\"\n    ) |> \n  left_join(\n    data |>\n      group_by(paraderosubida) |> \n      summarise(tend = cor(seq(1, n()), subidas_laboral_promedio)),\n    by = \"paraderosubida\"\n    ) |> \n  ungroup()\n\n# dvert\nV(g)$label <- dvert$paraderosubida\nV(g)$size <- dvert$n\nV(g)$subidas_totales_miles <- round(dvert$n/1000, 2)\nV(g)$comm <- as.numeric(membership(wc))\nV(g)$tendencia <- round(dvert$tend, 2)\nV(g)$color <- dvert$comm\n\nset.seed(123)\n\ndfnet <- ggnetwork(g)\n\ndfnet2 <- dfnet |>\n  as.matrix() |>\n  as.data.frame() |>\n  as_tibble() |>\n  select(x, y, name, weight, size, color) |>\n  mutate_all(as.character) |>\n  mutate_at(vars(x, y, weight, size), as.numeric) |>\n  filter(is.na(weight))\n\npnet <- ggplot(dfnet) + \n  geom_edges(\n    aes(-x, -y, size = width, color = factor(comm), xend = -xend, yend = -yend), \n    color = \"gray50\", size = 1, alpha = 0.25\n    ) +\n  geom_point(\n    aes(-x, -y, size = size, color = factor(comm), fill = factor(comm)), shape = 21\n    ) +\n  ggrepel::geom_text_repel(\n    aes(-x, -y, label = name), size = 2,\n    data = dfnet2, color = \"#666666\",\n    force = 10,\n    family = \"main_font\"\n    ) +\n  scale_fill_viridis_d(name = \"Comunidad\") + \n  # scale_color_viridis_d() + \n  scale_size(guide = \"none\") +\n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n  ) +\n  \n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n    ) +\n  \n  labs(\n    x = NULL,\n    y = NULL,\n    size = \"Subidas\",\n    color = \"Comunidad\"\n    ) + \n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n\npnet"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#clustering",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#clustering",
    "title": "Visualización en el Análisis de Datos",
    "section": "Clustering",
    "text": "Clustering\nK-means\nDe vez en cuando es relevante agrupar información/perfilar. Diagramas de Voronoi.\n\nCódigowithins <- map_dbl(1:15, function(k = 4){\n  km <- kmeans(\n    dumap |> select(-paraderosubida), \n    centers = k,\n    nstart = 50,\n    iter.max = 150\n    )\n  km$tot.withinss\n}) \n\n# plot(withins)\nkm <- kmeans(\n  dumap |> select(-paraderosubida), \n  centers = 4,\n  nstart = 50,\n  iter.max = 150\n  )\n\ndumap <- dumap |> \n  mutate(cluster = as.character(km$cluster))\n\ndcenters <- km$centers |> \n  as.data.frame() |> \n  as_tibble() |> \n  mutate(cluster = as.character(row_number()))\n\n# xmin, xmax, ymin, ymax.\nbnd <- c(-4, 4, -4, 4)\n\nset.seed(1234)\n\npumapkm <- ggplot(dumap, aes(V1, V2, fill = cluster, group = -1)) +\n  geom_voronoi_tile(data = dcenters, alpha = 0.2, bound = bnd) +\n  geom_voronoi_segment(data = dcenters, color = \"gray70\", bound = bnd) +\n  geom_point(aes(V1, V2, fill = cluster), alpha = 0.3) +\n  ggrepel::geom_text_repel(\n    aes(V1, V2, label = paraderosubida),\n    data = dumap |> sample_n(30),\n    size = 3,\n    force = 10\n    ) +\n  scale_fill_viridis_d() +\n  xlim(c(-4, 4)) + ylim(c(-4, 4)) +\n  theme(legend.position = \"none\")\n\npumapkm\n\n\n\n\n¿Por qué 4 grupos? El algoritmo para encontrar grupos usado fue K-means. Uno usualmente da el número de grupos y determina que observación queda en que grupo. Una regla para decidir el número de cluster es realizando el proceso varias veces con distintas cantidad de centros.\n\nCódigodkm <- tibble(\n  tot.withinss = withins,\n  cluster      = seq(length(withins))\n) \n\npkm <- ggplot(dkm, aes(cluster, tot.withinss, fill = \"1\", color = \"1\")) +\n  \n  geom_line(size = 2) +\n  geom_point(size = 3, shape = 21, color = \"white\") +\n  scale_x_continuous(breaks = dkm$cluster) +\n  labs(\n    y = \"Suma de los cuadrados dentro de cada grupo\",\n    x = \"Grupos\"\n  ) +\n  scale_fill_viridis_d() +\n  scale_color_viridis_d() +\n  theme(legend.position = \"none\")\n\npkm\n\n\n\n\nClustering Jerárquico\nDendograma visualiza la forma de agrupación a medida que aumento distancia.\n\nCódigolibrary(ggdendro)\n\ndhclust <- dumap |> \n  column_to_rownames(\"paraderosubida\") |> \n  select(V1, V2)\n\nhc       <- hclust(dist(dhclust), \"ave\")           # heirarchal clustering\ndendr    <- dendro_data(hc, type=\"rectangle\")    # convert for ggplot\nclust    <- cutree(hc, k = 4)                    # find 4 clusters\nclust.df <- data.frame(label = names(clust), cluster = factor(clust))\ndendr[[\"labels\"]] <- merge(dendr[[\"labels\"]], clust.df, by = \"label\")\n\npdend <- ggplot() +\n  geom_segment(\n    data = segment(dendr),\n    aes(x = x, y = y, xend = xend, yend = yend)\n    ) +\n  geom_text(\n    data = label(dendr),\n    aes(x, y, label = label, hjust = 1, color = cluster),\n    size = 1.8\n    \n  ) +\n  coord_flip() +\n  scale_color_viridis_d() +\n  # scale_y_continuous(limits = c(-0.10, NA)) +\n  # scale_y_reverse(expand=c(0.2, 0)) +\n  theme(\n    axis.line.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"right\"\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 5))) \n\npdend\n\n\n\n\nÁrbol filogenético\nOtra visualización con los mismos datos del dendograma. Árbol filogenético.\n\nCódigolibrary(ape)\n\nplot(\n  ape::as.phylo(hc), \n  type = \"unrooted\",\n  edge.width = 2, \n  edge.lty = 2,\n  # tip.color = colors[clust],\n  no.margin = TRUE,\n  label.offset = 0.5,\n  plot = FALSE\n  )\nCódigoL <- get(\"last_plot.phylo\", envir = .PlotPhyloEnv)\n\ndedges <- tibble(x = L$xx, y = L$yy) |> \n  mutate(id = row_number())\n\ndedges2 <- as.data.frame(L$edge) |> \n  as_tibble() |> \n  left_join(dedges, by = c(\"V1\" = \"id\")) |> \n  left_join(dedges, by = c(\"V2\" = \"id\"),  suffix = c(\"\", \"_end\")) \n\ndnodes <- dedges |> \n  head(length(clust)) |> \n  mutate(\n    paraderosubida = names(clust),\n    cluster = as.character(clust)\n    )\n\n\n\nCódigopphylo <- ggplot(dedges2) +\n  geom_segment(\n    aes(x = x, y = y, xend = x_end, yend = y_end, group = -1L), \n    color = \"gray70\", \n    size = .9\n    ) +\n   ggrepel::geom_text_repel(\n    aes(x, y, label = paraderosubida),\n    data = dnodes,\n    size = 1.5,\n    max.overlaps = 1000,\n    segment.colour = \"gray80\"\n    )  +\n  geom_point(\n    aes(x, y, fill = cluster), \n    data = dnodes, \n    shape = 21, color = \"white\", size = 4\n    ) +\n  scale_color_viridis_d()  + \n  scale_fill_viridis_d()  + \n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  scale_y_continuous(expand = expansion(mult = 0.25)) +\n  scale_x_continuous(expand = expansion(mult = 0.25)) \n \npphylo"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#significan-algo-los-cluster-generados",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#significan-algo-los-cluster-generados",
    "title": "Visualización en el Análisis de Datos",
    "section": "¿Significan algo los cluster generados?",
    "text": "¿Significan algo los cluster generados?\nRevisamos nuestro primer gráfico para cada estación y separados por grupo.\n\nCódigodataf <- data |> \n  left_join(dumap |> select(paraderosubida, cluster), by = \"paraderosubida\")\n\npclus <- ggplot(dataf, aes(mediahora, subidas_laboral_promedio)) +\n  geom_line(aes(group = paraderosubida), alpha = 0.8, size = 0.8, color = \"gray90\") +\n  geom_smooth(\n    aes(color = cluster),\n    se = FALSE, size = 2,\n    method = 'gam',\n    formula = y ~ s(x, bs = \"cs\")\n    ) + \n  scale_color_viridis_d() +\n  facet_wrap(vars(cluster)) +\n  scale_y_continuous(labels = comma)\n\npclus\n\n\n\n\nSe observan comportamientos distintos para cada grupo."
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#contextualizar",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#contextualizar",
    "title": "Visualización en el Análisis de Datos",
    "section": "Contextualizar",
    "text": "Contextualizar\nVamos con información geofráfica.\n\nCódigoroutes <- read_csv(fs::path(ruta_datos, \"routes.txt\"))\ntrips  <- read_csv(fs::path(ruta_datos, \"trips.txt\"))\nstops  <- read_csv(fs::path(ruta_datos, \"stops.txt\"), \n                   col_types = cols(stop_url = col_character()))\n\nshapes <- data.table::fread(fs::path(ruta_datos, \"shapes.csv.gz\"))\nshapes <- as_tibble(shapes)\n\nstops_metro <- stops |>\n  filter(!grepl(\"\\\\d\", stop_id)) |> \n  mutate(stop_url = basename(stop_url))\n\nroutes_metro <- routes |> \n  filter(grepl(\"^L\\\\d\",route_id))\n\nshapes_metro <- routes |> \n  filter(grepl(\"^L\\\\d\",route_id)) %>% \n  semi_join(trips, .,  by = \"route_id\") %>%\n  semi_join(shapes, ., by = \"shape_id\") |> \n  ### IMPORTANTE\n  filter(str_detect(shape_id, \"-I\")) |> \n  mutate(shape_id2 = str_replace(shape_id, \"-I\", \"\"))\n\ncolors_metro <- distinct(shapes, shape_id) |> \n  left_join(distinct(trips, shape_id, route_id), by = \"shape_id\") |> \n  left_join(distinct(routes, route_id, route_color), by = \"route_id\") |> \n  semi_join(shapes_metro, by = \"shape_id\") |> \n  mutate(route_color = paste0(\"#\", route_color))\n  \nstr_to_id2 <- function(x) {\n   x |>\n    as.character() |>\n    str_trim() |>\n    str_to_lower() |> \n    str_replace_all(\"\\\\\\\\s+\", \"_\") |>\n    str_replace_all(\"\\\\\\\\\\\\\\\\|/\", \"_\") |>\n    str_replace_all(\"\\\\\\\\[|\\\\\\\\]\", \"_\") |>\n    str_replace_all(\"_+\", \"_\") |>\n    str_replace_all(\"_$|^_\", \"\") |> \n    str_replace_all(\"á\", \"a\") |>\n    str_replace_all(\"é\", \"e\") |> \n    str_replace_all(\"í\", \"i\") |> \n    str_replace_all(\"ó\", \"o\") |> \n    str_replace_all(\"ú\", \"u\") |> \n    str_replace_all(\"ñ\", \"n\") |> \n    str_replace_all(\"`\", \"\") |> \n    str_replace_all(\"_de_\", \"_\")\n}\n\ndumap <- mutate(dumap, id = str_to_id2(paraderosubida))\n\ndata4 <- dataf |> \n  group_by(paraderosubida, cluster) |> \n  summarise(median = median(subidas_laboral_promedio), .groups = \"drop\") |> \n  ungroup() |> \n  mutate(id = str_to_id2(paraderosubida))\n\nstops_metro_data <- stops_metro |> \n  mutate(id = str_to_id2(stop_name)) |> \n  left_join(data4, by = \"id\") |> \n  filter(!is.na(cluster))\n\nrm(shapes, routes, stops, trips, data4)\n\ncolors_metro_manual <- colors_metro |> \n  select(name = route_id, value = route_color) |> \n  deframe()\n\npmetro <- ggplot() +\n  geom_path(\n    data = shapes_metro, \n    aes(shape_pt_lon, shape_pt_lat, color = shape_id2), \n    size = 2\n    ) +\n  geom_point(\n    data = stops_metro_data,\n    aes(stop_lon, stop_lat, size = log(median), fill = cluster),\n    shape = 21, color = \"white\"\n    ) + \n  scale_color_manual(name = \"Línea\", values = colors_metro_manual) +\n  scale_size(guide = \"none\") +\n  scale_fill_viridis_d(name = \"Clúster\") +\n  coord_equal() +\n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n    ) + \n  theme(\n    panel.grid.major = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    legend.position = \"right\"\n    )  +\n  facet_wrap(vars(cluster))\n\npmetro\n\n\n\n\nU otra versión utilizando {{chilemapas}}.\n\nCódigopmetro2 <- ggplot() +\n  geom_sf(\n    data = chilemapas::mapa_zonas |> filter(codigo_region == \"13\"),\n    aes(geometry = geometry),\n    alpha = 0.5,\n    color = \"white\"\n  ) +\n  geom_path(\n    data = shapes_metro, \n    aes(shape_pt_lon, shape_pt_lat, color = shape_id2), \n    size = 2\n    ) +\n  geom_point(\n    data = stops_metro_data,\n    aes(stop_lon, stop_lat, size = log(median), fill = cluster),\n    shape = 21, color = \"white\"\n    ) + \n  scale_color_manual(name = \"Línea\", values = colors_metro_manual) +\n  scale_size(guide = \"none\") +\n  scale_fill_viridis_d(name = \"Clúster\") +\n  coord_sf(xlim = c(-70.8, -70.5), ylim = c(-33.3, -33.65)) +\n  guides(\n    color = guide_legend(override.aes = list(size = 5)),\n    fill = guide_legend(override.aes = list(size = 5))\n  ) +\n  theme(legend.position = \"right\")\n  \npmetro2"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#resumiendo",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#resumiendo",
    "title": "Visualización en el Análisis de Datos",
    "section": "Resumiendo",
    "text": "Resumiendo\n\nCódigo# https://stackoverflow.com/a/46221054/829971\nremove_geom <- function(ggplot2_object, geom_type) {\n  # Delete layers that match the requested type.\n  layers <- lapply(ggplot2_object$layers, function(x) {\n    if (class(x$geom)[1] == geom_type) {\n      NULL\n    } else {\n      x\n    }\n  })\n  # Delete the unwanted layers.\n  layers <- layers[!sapply(layers, is.null)]\n  ggplot2_object$layers <- layers\n  ggplot2_object\n}\n\nlist(p0, p1, p2, pcors, pnet, pumapkm, pkm,\n     pdend, pphylo, pclus, pmetro, pmetro2) |>\n  map(function(p){\n    \n    pb <- ggplot_build(p)\n    \n    nfacets <- pb$layout$layout$PANEL |> length() \n    \n    p <- remove_geom(p, \"GeomTextRepel\") + \n      theme(\n        panel.grid.major = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        legend.position = \"none\",\n        strip.text = element_blank(),\n        panel.spacing = unit(0.1, \"lines\")\n        \n      ) +\n      labs(x = NULL, y = NULL, title = NULL, subtitle = NULL) \n    \n    \n    if(!class(pb$layout$coord)[1] == \"CoordSf\") {\n      p <- p +  coord_cartesian() \n    }\n    \n    if(nfacets != 1){\n      p <- p + \n        # ggforce::facet_grid_paginate(vars(cluster),  ncol = 1, nrow = 1, page = 1)\n        facet_wrap(vars(cluster), ncol = 2, scales = \"free\")\n    }\n    \n    p\n    \n  }) |> \n  reduce(`+`)"
  },
  {
    "objectID": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#reducción-de-dimensionalidad",
    "href": "posts/2023-07-09-visualizacion-en-el-analisis-de-datos/index.html#reducción-de-dimensionalidad",
    "title": "Visualización en el Análisis de Datos",
    "section": "Reducción de Dimensionalidad",
    "text": "Reducción de Dimensionalidad\nHasta ahora hemos usado solamente correlaciones que miden asociacion lineal y no es un indicador necesariamente robusto para usarlo como métrica de distancia.\nUsaremos todos los datos por estacion y usaremos UMAP, un algoritmo para resumir toda la información en 2 columnas/variables. Lleva de una tabla con muchas columnas por observación a 2 columnas:\nDe esto:\n\nCódigonhead <- 8\n\ndatas <- data |> \n  mutate(mediahora = format(mediahora, \"%R\")) |> \n  spread(mediahora, subidas_laboral_promedio)\n\ndatas <- datas |> \n  mutate_if(is.numeric, replace_na, 0)\n\ndatas |> \n  select(1:8) |> \n  head(nhead)\n\n# A tibble: 8 × 8\n  paraderosubida          `05:30:00` `06:00:00` `06:30:00` `07:00:00` `07:30:00`\n  <chr>                        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 ALCANTARA                      2.6       13.2       53.4      185.        364 \n2 BAQUEDANO L1                  86.6      125.       208.       398.        522.\n3 BAQUEDANO L5                   1.4        7.2       26.2       95.6       200.\n4 BARRANCAS                     37        195.       406.       737.        800.\n5 BELLAS ARTES                   6.6       37         92.2      178.        282.\n6 BELLAVISTA DE LA FLORI…      158.       298.       566.      1114.       1163.\n7 BLANQUEADO                    35.8      200.       411.       646.        737.\n8 CAL Y CANTO                  103        575.      1281       2309        2640.\n# ℹ 2 more variables: `08:00:00` <dbl>, `08:30:00` <dbl>\n\n\nA esto:\n\nCódigolibrary(uwot)\n\nset.seed(123)\n\num <- umap(datas, verbose = TRUE, n_threads = 3, n_neighbors = 20)\n\ndumap <- as.data.frame(um) |> \n  as_tibble() |> \n  mutate(paraderosubida = pull(datas, paraderosubida)) |> \n  select(paraderosubida, everything())\n\ndumap\n\n# A tibble: 106 × 3\n   paraderosubida                V1      V2\n   <chr>                      <dbl>   <dbl>\n 1 ALCANTARA                -0.162   1.17  \n 2 BAQUEDANO L1             -2.07    1.44  \n 3 BAQUEDANO L5              0.284   1.14  \n 4 BARRANCAS                 2.23   -0.0915\n 5 BELLAS ARTES             -0.0693  1.08  \n 6 BELLAVISTA DE LA FLORIDA -0.473  -1.95  \n 7 BLANQUEADO                2.97    0.117 \n 8 CAL Y CANTO              -3.10    2.10  \n 9 CAMINO AGRICOLA          -0.327   0.523 \n10 CARLOS VALDOVINOS         1.32    0.887 \n# … with 96 more rows\n\n\nDe esta forma:\n\nCódigoset.seed(1234)\n\npumap <- ggplot(dumap) +\n  geom_point(aes(V1, V2), alpha = 0.3) +\n  ggrepel::geom_text_repel(\n    aes(V1, V2, label = paraderosubida),\n    data = dumap |> sample_n(30),\n    size = 3,\n    force = 10\n    ) \n\npumap"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html",
    "title": "My favorite ggplot2 packages with examples",
    "section": "",
    "text": "The idea is to show some packages and options that I use on a daily basis, and leave code with annotations and defaults that I normally use. We will go through the packages one by one with examples, but these can be grouped into the following categories.\nWhere do we start from? Define some data and some defaults plots that we would have and would like to modify.\nIn my particuar case I like theme_minimal theme and legend at the bottom.\nCode\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"plain\"),\n      plot.background = element_rect(fill = \"#fcfcfc\", colour = NA),\n      panel.background = element_rect(fill = \"#fcfcfc\", colour = NA),\n      legend.position = \"bottom\",\n      legend.key.width = unit(1.5, \"cm\")\n    )\n)\n\ncolors &lt;- c(\"darkorange\",\"darkorchid\",\"cyan4\")\nWe’re ready to go!"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#showtext",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#showtext",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{showtext}",
    "text": "{showtext}\nSource:https://github.com/yixuan/showtext.\nThis package makes easy to use typography! Do you want some typography from https://fonts.google.com/? You want it? You got it!\n\n\nCode\nlibrary(showtext)\n\nfont_add_google(\"IBM Plex Sans\", family = \"ibm\")\n\nshowtext_auto()\n\np2"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggrepel",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggrepel",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggrepel}",
    "text": "{ggrepel}\nSource: https://ggrepel.slowkow.com/articles/examples.html.\nThis package has been on CRAN/github for a while now. Package that in combination with the data argument can make simple and effective annotations.\n\n\nCode\nlibrary(ggrepel)\n\np_repel1 &lt;- p1  +\n  geom_text_repel(color = \"gray40\", family  = \"ibm\")\n\np_repel1\n\n\n\n\n\n\n\n\n\nCode\np_repel2 &lt;- p1 +\n  geom_text_repel(\n    data = ~ filter(.x, mpg &gt; 30), \n    color = \"gray40\", \n    family  = \"ibm\",\n     force = 20\n    )\n\np_repel2"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#gghighlight",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#gghighlight",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{gghighlight}",
    "text": "{gghighlight}\nSource: https://yutannihilation.github.io/gghighlight/articles/gghighlight.html.\n\nThis package is plug and play if you have to highlight data with a specific filter.\nIs important to know this package don’t work like the usual geom_* + aes().\n\n\n\nCode\nlibrary(gghighlight) \n\np1 +\n  gghighlight(\n    # interest subset\n    mpg &gt; 30,\n    # additional parameters\n    label_key = name,\n    keep_scales = TRUE,\n    label_params = list(color = \"gray40\", label.r = 0, fill = \"gray95\"),\n    # can change previous parameters\n    unhighlighted_params = list(size = 1.5, color = \"darkorchid\")\n    )"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggforce",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggforce",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggforce}",
    "text": "{ggforce}\nSource: https://ggforce.data-imaginist.com/.\n\n{ggforce} takes annotations to the next level.\nA lot of other functionalities like new geoms, new facets!\n\n\n\nCode\nlibrary(ggforce)\n\np1 +\n  geom_mark_hull(\n    aes(filter =  mpg &gt; 30, label = \"Interesting\"),\n    description = \"Lightweight vehicles have high performance.\",\n    color = \"gray70\",\n    fill = \"gray90\",\n    concavity = 5,\n    # control width text\n    label.minwidth = unit(100, \"mm\"),\n    # how much distance before show legend\n    label.buffer = unit(2.5, \"mm\"),\n    label.colour = \"gray30\",\n    label.family = \"ibm\"\n  ) +\n  # use circle for points\n  geom_mark_circle(\n    aes(filter =  wt &gt; 3.75, label = NULL, description = name),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 10,\n    label.family = \"ibm\"\n   )\n\n\n\n\n\n\n\n\n\nAnd other geom_mark_* like hull, circle, ellpse, rect.\n\n\nCode\np2 + \n  geom_mark_ellipse(\n    aes(fill = species, label = species),\n    alpha = 0.1,\n    color = \"transparent\", # a nice touch sometimes! (imho)\n    label.colour = \"gray30\",\n    label.family = \"ibm\",\n    label.fontsize = 8,\n    # label.fontface = \"plain\",\n    # this is just for blogpost\n    expand = unit(-5, \"mm\"),\n    radius = unit(5, \"mm\")\n    ) +\n  geom_mark_circle(\n    aes(\n      filter = coalesce(bill_length_mm, 0) == max(bill_length_mm, na.rm = TRUE),\n      label = NULL, \n      description = \"A rare penguin!\"\n      ),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 8,\n    label.family = \"ibm\"\n   ) +\n  theme(legend.position = \"none\") +\n  labs(x = NULL, y = NULL)\n\n\n\n\n\n\n\n\n\nNow imagine we used a \\(K\\)-means algorithm:\n\n\nCode\ndcenters &lt;- penguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt; \n  filter(!is.na(bill_length_mm)) |&gt; \n  filter(!is.na(bill_depth_mm)) |&gt; \n  group_by(species) |&gt; \n  summarise(across(everything(), median)) |&gt; \n  select(-species) |&gt; \n  mutate(cluster = as.character(row_number()))\n\ndcenters\n\n\n# A tibble: 3 × 3\n  bill_length_mm bill_depth_mm cluster\n           &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;  \n1           38.8          18.4 1      \n2           49.6          18.4 2      \n3           47.4          15   3      \n\n\nCode\nbnd &lt;- penguins |&gt;\n  summarise(\n    min(bill_length_mm, na.rm = TRUE) - 1,\n    max(bill_length_mm, na.rm = TRUE) + 1,\n    min(bill_depth_mm, na.rm = TRUE)  - 1,\n    max(bill_depth_mm, na.rm = TRUE)  + 1\n  ) |&gt; \n  as.list() |&gt; \n  unlist() |&gt; \n  as.vector()\n\np2 +\n  geom_voronoi_tile(\n    aes(fill = cluster, group = -1),\n    data = dcenters, alpha = 0.2, bound = bnd\n    ) +\n  geom_voronoi_segment(\n    aes(group = -1),\n    data = dcenters, color = \"gray90\", bound = bnd\n    ) +\n  xlim(bnd[1], bnd[2]) + \n  ylim(bnd[3], bnd[4]) +\n  scale_fill_viridis_d(direction = -1, option = \"C\") +\n  # its better put point over all layers\n  geom_point(\n    aes(color = species), \n    size = 2,\n    shape = 21, \n    color = \"gray90\"\n    ) +\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggfittext",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggfittext",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggfittext}",
    "text": "{ggfittext}\nSource: https://github.com/wilkox/ggfittext.\nThis package have a lot of features to work with strings in ggplot objects, particulary when you use treemaps.\nA love the simple and useful function geom_bar_text() + geom_col() combo.\n\nCode\nlibrary(ggfittext)\n\np3 &lt;- penguins |&gt; \n  count(species) |&gt; \n  mutate(n = 100 * n) |&gt; \n  ggplot(aes(species, n)) +\n  geom_col(width = 0.35, fill = \"cyan4\") \n\np3 +\n  geom_bar_text()\np3 +\n  geom_bar_text(\n    formatter = scales::comma_format(), \n    padding.y =  grid::unit(2.5, \"mm\")\n  )\np3 + \n  geom_bar_text(\n    formatter = scales::comma_format(), \n    place = \"bottom\",\n    padding.y =  grid::unit(2.5, \"mm\")\n  )"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#scales",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#scales",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{scales}",
    "text": "{scales}\nSource: https://scales.r-lib.org/.\nYou use this package using a label_* function in the labels argument of scale_* function.\n\n\nCode\nlibrary(scales) # comma dollar label_comma\n\nx &lt;- c(123, 456678, 100000)\n\nc(comma(x), dollar(x))\n\n\n[1] \"123\"      \"456,678\"  \"100,000\"  \"$123\"     \"$456,678\" \"$100,000\"\n\n\nCode\n# I know the correct alternative is Mpg\nmiles_per_gallon &lt;- label_comma(suffix = \" mi/gal\")\n\nwt_lbl &lt;- label_comma(scale = 1000, suffix = \" lbs\")\n\np1 +\n  scale_y_continuous(\n    labels = miles_per_gallon, \n    name = \"fuel consumption\"\n    ) +\n  scale_x_continuous(\n    labels = wt_lbl, \n    name = \"weigth\"\n    )"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggparty",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggparty",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggparty}",
    "text": "{ggparty}\nSource: https://github.com/martin-borkovec/ggparty.\n\n\nCode\nlibrary(partykit) # ctree\nlibrary(ggparty)\n\npenguinct &lt;- ctree(\n  species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex,\n  data = penguins\n  )\n\nautoplot(penguinct)\n\n\n\n\n\n\n\n\n\n\n\nCode\nggparty(penguinct) +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = splitvar),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      scale_color_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size = 5))), \n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = sprintf(\"Node %s (n = %s)\", id, nodesize)),\n    ids = \"terminal\",\n    size = 3,\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#parttree",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#parttree",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{parttree}",
    "text": "{parttree}\nSource: https://github.com/grantmcdermott/parttree.\nI use the {parttree} package when the model is simple, or when I want to explain the decision tree algorithm.\n\n\nCode\n# remotes::install_github(\"grantmcdermott/parttree\")\nlibrary(parttree)\n\n# 2 independent variables\npenguinct2 &lt;- ctree(\n  species ~ bill_length_mm + bill_depth_mm,\n  data = penguins,\n  control = ctree_control(maxdepth = 3)\n  )\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_parttree(\n    data = penguinct2, \n    aes(fill = species),\n    alpha = 0.2, \n    color = \"gray60\",\n    ) + \n  geom_point(aes(col = species)) +\n  theme_minimal()"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggparty-parttree",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#ggparty-parttree",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggparty} + {parttree}",
    "text": "{ggparty} + {parttree}\n\n\nCode\ndpred_node &lt;- penguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt;\n  mutate(\n    id = predict(penguinct2, type = \"node\", newdata = penguins),\n    species_pred = predict(penguinct2, newdata = penguins)\n    ) |&gt;\n  group_by(id) |&gt;\n  summarise(\n    species = unique(species_pred),\n    bill_length_mm = mean(bill_length_mm),\n    bill_depth_mm = mean(bill_depth_mm)\n  )\n\ndpred_node\n\n\n# A tibble: 5 × 4\n     id species   bill_length_mm bill_depth_mm\n  &lt;int&gt; &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;\n1     3 Adelie              37.4          15.2\n2     4 Adelie              38.5          18.4\n3     6 Gentoo              47.4          14.9\n4     8 Adelie              43.0          18.2\n5     9 Chinstrap           49.5          18.4\n\n\nCode\ndparttree &lt;- parttree(penguinct2)\ndparttree &lt;- dparttree |&gt; \n  as_tibble() |&gt; \n  rename(id = node) |&gt; \n  select(-path)\n\nggp &lt;- ggparty(penguinct2) \n\nggp$data &lt;- ggp$data |&gt; \n  as_tibble() |&gt; \n  left_join(\n    dpred_node |&gt; select(id, species),\n    by = join_by(id)\n    )\n\nggp +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = str_replace_all(splitvar, \"_\", \" \")),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      geom_parttree(\n        data = penguinct2, \n        aes(fill = species),\n        alpha = 0.1, \n        color = \"gray60\",\n        ),\n      \n      geom_point(\n        data = dpred_node, \n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 3\n        ),\n      \n      geom_rect(\n        data = dparttree, \n        aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = species),\n        alpha = 0.5, \n        color = \"gray40\",\n        ),\n      \n      scale_fill_manual(values = colors),\n      scale_color_manual(values = colors),\n      # scale_color_viridis_d(end = 0.9),\n      # scale_fill_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size=5))),\n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    # id = \"all\"\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = str_glue(\"{species} (#{id},  n = {nodesize})\")),\n    ids = \"terminal\",\n    size = 3,\n    family = \"ibm\",\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )"
  },
  {
    "objectID": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#patchwork",
    "href": "posts/2023-07-10-my-favorite-ggplot2-packages-with-examples/index.html#patchwork",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{patchwork}",
    "text": "{patchwork}\nSource: https://patchwork.data-imaginist.com/articles/patchwork.html.\n\n\nCode\nlibrary(patchwork)\n\np2 &lt;- p2 +\n  scale_color_manual(values = colors) +\n  theme(legend.position = \"none\")\n\np3 &lt;- p3 +\n  geom_col(aes(fill = species), width = 0.5) +\n  scale_fill_manual(values = colors, name = NULL)\n\npp &lt;- ((p1 / p3) | p2) +\n  plot_layout(\n    widths = c(1, 2),\n    guides = \"collect\"\n    ) +\n  plot_annotation(\n    title = \"Some ggplot2 objects\",\n    subtitle = \"The plot (a) shows one aspect, while (b) presents additional data.\",\n    tag_levels = \"a\",\n    tag_prefix = \"(\",\n    tag_suffix = \")\"\n    )\n\npp"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html",
    "title": "My favorite ggplot2 packages with examples",
    "section": "",
    "text": "The idea is to show some packages and options that I use on a daily basis, and leave code with annotations and defaults that I normally use. We will go through the packages one by one with examples, but these can be grouped into the following categories.\nWhere do we start from? Define some data and some defaults plots that we would have and would like to modify.\nIn my particuar case I like theme_minimal theme and legend at the bottom.\nWe’re ready to go!"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#showtext",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#showtext",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{showtext}",
    "text": "{showtext}\nSource:https://github.com/yixuan/showtext.\nThis package makes easy to use typography! Do you want some typography from https://fonts.google.com/? You want it? You got it!\n\nCodelibrary(showtext)\n\nfont_add_google(\"IBM Plex Sans\", family = \"ibm\")\n\nshowtext_auto()\n\np2"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggrepel",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggrepel",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggrepel}",
    "text": "{ggrepel}\nSource: https://ggrepel.slowkow.com/articles/examples.html.\nThis package has been on CRAN/github for a while now. Package that in combination with the data argument can make simple and effective annotations.\n\nCodelibrary(ggrepel)\n\np_repel1 <- p1  +\n  geom_text_repel(color = \"gray40\", family  = \"ibm\")\n\np_repel1\n\n\n\nCodep_repel2 <- p1 +\n  geom_text_repel(\n    data = ~ filter(.x, mpg > 30), \n    color = \"gray40\", \n    family  = \"ibm\",\n     force = 20\n    )\n\np_repel2"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#gghighlight",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#gghighlight",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{gghighlight}",
    "text": "{gghighlight}\nSource: https://yutannihilation.github.io/gghighlight/articles/gghighlight.html.\n\nThis package is plug and play if you have to highlight data with a specific filter.\nIs important to know this package don’t work like the usual geom_* + aes().\n\n\nCodelibrary(gghighlight) \n\np1 +\n  gghighlight(\n    # interest subset\n    mpg > 30,\n    # additional parameters\n    label_key = name,\n    keep_scales = TRUE,\n    label_params = list(color = \"gray40\", label.r = 0, fill = \"gray95\"),\n    # can change previous parameters\n    unhighlighted_params = list(size = 1.5, color = \"darkorchid\")\n    )"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggforce",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggforce",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggforce}",
    "text": "{ggforce}\nSource: https://ggforce.data-imaginist.com/.\n\n\nggforce takes annotations to the next level.\nNot only annotation. Other funcionalities like.\nHig\n\n\nCodelibrary(ggforce)\n\np1 +\n  geom_mark_hull(\n    aes(filter =  mpg > 30, label = \"Interesting\"),\n    description = \"Lightweight vehicles have high performance.\",\n    color = \"gray70\",\n    fill = \"gray90\",\n    concavity = 5,\n    # control width text\n    label.minwidth = unit(100, \"mm\"),\n    # how much distance before show legend\n    label.buffer = unit(2.5, \"mm\"),\n    label.colour = \"gray30\",\n    label.family = \"ibm\"\n  ) +\n  # use circle for points\n  geom_mark_circle(\n    aes(filter =  wt > 3.75, label = NULL, description = name),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 10,\n    label.family = \"ibm\"\n   )\n\n\n\n\nAnd other geom_mark_* like hull, circle, ellpse, rect.\n\nCodep2 + \n  geom_mark_ellipse(\n    aes(fill = species, label = species),\n    alpha = 0.1,\n    color = \"transparent\", # a nice touch sometimes! (imho)\n    label.colour = \"gray30\",\n    label.family = \"ibm\",\n    label.fontsize = 8,\n    # label.fontface = \"plain\",\n    # this is just for blogpost\n    expand = unit(-5, \"mm\"),\n    radius = unit(5, \"mm\")\n    ) +\n  geom_mark_circle(\n    aes(\n      filter = coalesce(bill_length_mm, 0) == max(bill_length_mm, na.rm = TRUE),\n      label = NULL, \n      description = \"A rare penguin!\"\n      ),\n    color = \"gray70\",\n    fill = \"transparent\",\n    label.fontsize = 8,\n    label.family = \"ibm\"\n   ) +\n  theme(legend.position = \"none\") +\n  labs(x = NULL, y = NULL)\n\n\n\n\n\n\n\nNow imagine we used a \\(K\\)-means algorithm:\n\nCodedcenters <- penguins |>\n  select(species, bill_length_mm, bill_depth_mm) |> \n  filter(!is.na(bill_length_mm)) |> \n  filter(!is.na(bill_depth_mm)) |> \n  group_by(species) |> \n  summarise(across(everything(), median)) |> \n  select(-species) |> \n  mutate(cluster = as.character(row_number()))\n\ndcenters\n\n# A tibble: 3 × 3\n  bill_length_mm bill_depth_mm cluster\n           <dbl>         <dbl> <chr>  \n1           38.8          18.4 1      \n2           49.6          18.4 2      \n3           47.4          15   3      \n\nCodebnd <- penguins |>\n  summarise(\n    min(bill_length_mm, na.rm = TRUE) - 1,\n    max(bill_length_mm, na.rm = TRUE) + 1,\n    min(bill_depth_mm, na.rm = TRUE)  - 1,\n    max(bill_depth_mm, na.rm = TRUE)  + 1\n  ) |> \n  as.list() |> \n  unlist() |> \n  as.vector()\n\np2 +\n  geom_voronoi_tile(\n    aes(fill = cluster, group = -1),\n    data = dcenters, alpha = 0.2, bound = bnd\n    ) +\n  geom_voronoi_segment(\n    aes(group = -1),\n    data = dcenters, color = \"gray90\", bound = bnd\n    ) +\n  xlim(bnd[1], bnd[2]) + \n  ylim(bnd[3], bnd[4]) +\n  scale_fill_viridis_d(direction = -1, option = \"C\") +\n  # its better put point over all layers\n  geom_point(\n    aes(color = species), \n    size = 2,\n    shape = 21, \n    color = \"gray90\"\n    ) +\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggfittext",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggfittext",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggfittext}",
    "text": "{ggfittext}\nSource: https://github.com/wilkox/ggfittext.\nThis package have a lot of features to work with strings in ggplot objects, particulary when you use treemaps.\nA love the simple and useful function geom_bar_text() + geom_col() combo.\n\nCodelibrary(ggfittext)\n\np3 <- penguins |> \n  count(species) |> \n  mutate(n = 100 * n) |> \n  ggplot(aes(species, n)) +\n  geom_col(width = 0.35, fill = \"cyan4\") \n\np3 +\n  geom_bar_text()\np3 +\n  geom_bar_text(\n    formatter = scales::comma_format(), \n    padding.y =  grid::unit(2.5, \"mm\")\n  )\np3 + \n  geom_bar_text(\n    formatter = scales::comma_format(), \n    place = \"bottom\",\n    padding.y =  grid::unit(2.5, \"mm\")\n  )"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#scales",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#scales",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{scales}",
    "text": "{scales}\nSource: https://scales.r-lib.org/.\nYou use this package using a label_* function in the labels argument of scale_* function.\n\nCodelibrary(scales) # comma dollar label_comma\n\nx <- c(123, 456678, 100000)\n\nc(comma(x), dollar(x))\n\n[1] \"123\"      \"456,678\"  \"100,000\"  \"$123\"     \"$456,678\" \"$100,000\"\n\nCode# I know the correct alternative is Mpg\nmiles_per_gallon <- label_comma(suffix = \" mi/gal\")\n\nwt_lbl <- label_comma(scale = 1000, suffix = \" lbs\")\n\np1 +\n  scale_y_continuous(\n    labels = miles_per_gallon, \n    name = \"fuel consumption\"\n    ) +\n  scale_x_continuous(\n    labels = wt_lbl, \n    name = \"weigth\"\n    )"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggparty",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggparty",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{ggparty}",
    "text": "{ggparty}\nSource: https://github.com/martin-borkovec/ggparty.\n\nCodelibrary(partykit) # ctree\nlibrary(ggparty)\n\npenguinct <- ctree(\n  species ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g + sex,\n  data = penguins\n  )\n\nautoplot(penguinct)\n\n\n\n\n\nCodeggparty(penguinct) +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = splitvar),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      scale_color_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size = 5))), \n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = sprintf(\"Node %s (n = %s)\", id, nodesize)),\n    ids = \"terminal\",\n    size = 3,\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#parttree",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#parttree",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{parttree}",
    "text": "{parttree}\nSource: https://github.com/grantmcdermott/parttree.\nI use the {parttree} package when the model is simple, or when I want to explain the decision tree algorithm.\n\nCodelibrary(parttree)\n\n# 2 independent variables\npenguinct2 <- ctree(\n  species ~ bill_length_mm + bill_depth_mm,\n  data = penguins,\n  control = ctree_control(maxdepth = 3)\n  )\n\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +\n  geom_parttree(\n    data = penguinct2, \n    aes(fill = species),\n    alpha = 0.2, \n    color = \"gray60\",\n    ) + \n  geom_point(aes(col = species)) +\n  theme_minimal()"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggparty-parttree",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#ggparty-parttree",
    "title": "My favorite ggplot2 packages with examples",
    "section": "\n{ggparty} + {parttree}\n",
    "text": "{ggparty} + {parttree}\n\n\nCodedpred_node <- penguins |>\n  select(species, bill_length_mm, bill_depth_mm) |>\n  mutate(\n    id = predict(penguinct2, type = \"node\", newdata = penguins),\n    species_pred = predict(penguinct2, newdata = penguins)\n    ) |>\n  group_by(id) |>\n  summarise(\n    species = unique(species_pred),\n    bill_length_mm = mean(bill_length_mm),\n    bill_depth_mm = mean(bill_depth_mm)\n  )\n\ndpred_node\n\n# A tibble: 5 × 4\n     id species   bill_length_mm bill_depth_mm\n  <int> <fct>              <dbl>         <dbl>\n1     3 Adelie              37.4          15.2\n2     4 Adelie              38.5          18.4\n3     6 Gentoo              47.4          14.9\n4     8 Adelie              43.0          18.2\n5     9 Chinstrap           49.5          18.4\n\nCodedparttree <- parttree(penguinct2)\ndparttree <- dparttree |> \n  as_tibble() |> \n  rename(id = node) |> \n  select(-path)\n\nggp <- ggparty(penguinct2) \n\nggp$data <- ggp$data |> \n  as_tibble() |> \n  left_join(\n    dpred_node |> select(id, species),\n    by = join_by(id)\n    )\n\nggp +\n  geom_edge(color = \"gray80\") +\n  geom_edge_label(color = \"gray50\", size = 4) +\n  geom_node_label(\n    aes(label = str_replace_all(splitvar, \"_\", \" \")),\n    color = \"gray30\",\n    label.col = NA, # no box\n    size = 4,\n    label.padding = unit(0.5, \"lines\"),\n    ids = \"inner\"\n    ) +\n  geom_node_plot(\n    gglist = list(\n      geom_point(\n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 1, alpha = 0.5\n        ),\n      geom_parttree(\n        data = penguinct2, \n        aes(fill = species),\n        alpha = 0.1, \n        color = \"gray60\",\n        ),\n      \n      geom_point(\n        data = dpred_node, \n        aes(x = bill_length_mm, y = bill_depth_mm, color = species),\n        size = 3\n        ),\n      \n      geom_rect(\n        data = dparttree, \n        aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = species),\n        alpha = 0.5, \n        color = \"gray40\",\n        ),\n      \n      scale_fill_manual(values = colors),\n      scale_color_manual(values = colors),\n      # scale_color_viridis_d(end = 0.9),\n      # scale_fill_viridis_d(end = 0.9),\n      guides(color = guide_legend(override.aes = list(size=5))),\n      theme_minimal(),\n      theme(axis.text = element_text(size = 7)),\n      labs(x = NULL, y = NULL)\n    ),\n    scales = \"fixed\",\n    # id = \"all\"\n    id = \"terminal\"\n  ) +\n  geom_node_label(\n    aes(label = str_glue(\"{species} (#{id},  n = {nodesize})\")),\n    ids = \"terminal\",\n    size = 3,\n    family = \"ibm\",\n    label.col = NA, # no box\n    nudge_y = 0.01\n    )"
  },
  {
    "objectID": "posts/my-favorite-ggplot2-packages-with-examples/index.html#patchwork",
    "href": "posts/my-favorite-ggplot2-packages-with-examples/index.html#patchwork",
    "title": "My favorite ggplot2 packages with examples",
    "section": "{patchwork}",
    "text": "{patchwork}\nSource: https://patchwork.data-imaginist.com/articles/patchwork.html.\n\nCodelibrary(patchwork)\n\np2 <- p2 +\n  scale_color_manual(values = colors) +\n  theme(legend.position = \"none\")\n\np3 <- p3 +\n  geom_col(aes(fill = species), width = 0.5) +\n  scale_fill_manual(values = colors, name = NULL)\n\npp <- ((p1 / p3) | p2) +\n  plot_layout(\n    widths = c(1, 2),\n    guides = \"collect\"\n    ) +\n  plot_annotation(\n    title = \"Some ggplot2 objects\",\n    subtitle = \"The plot (a) shows one aspect, while (b) presents additional data.\",\n    tag_levels = \"a\",\n    tag_prefix = \"(\",\n    tag_suffix = \")\"\n    )\n\npp"
  },
  {
    "objectID": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#introducción",
    "href": "posts/2020-06-02-30diasdegraficos-parte-3/index.html#introducción",
    "title": "#30diasdegraficos Parte 3",
    "section": "",
    "text": "Seguiremos utilizando los mismos paquetes que la parte anterior.\n\n\nCode\n# ejecutar estas líneas para poder instalar {datos}\n# install.packages(\"remotes\")\n# remotes::install_github(\"cienciadedatos/datos\")\n\nlibrary(datos)       # datos\nlibrary(highcharter) # gráficos\nlibrary(ggplot2)     # más gráficos  \nlibrary(readr)       # lectura de datos\nlibrary(dplyr)       # manipulación de datos\nlibrary(tidyr)       # más manipulación de datos\n\n\nCambiando configuración para el español.\n\n\nCode\nnewlang_opts &lt;- getOption(\"highcharter.lang\")\n\nf &lt;- Sys.Date()\ndias &lt;- weekdays((f - lubridate::days(lubridate::wday(f) - 1)) + lubridate::days(0:6))\n\nnewlang_opts$weekdays &lt;- dias\nnewlang_opts$months &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = FALSE))\nnewlang_opts$shortMonths &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))\nnewlang_opts$thousandsSep &lt;- \",\"\n\noptions(highcharter.lang = newlang_opts)"
  },
  {
    "objectID": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#introducción",
    "href": "posts/2020-05-22-30diasdegraficos-parte-2/index.html#introducción",
    "title": "#30diasdegraficos Parte 2",
    "section": "",
    "text": "Seguiremos utilizando los mismos paquetes que la parte anterior.\n\n\nCode\n# ejecutar estas líneas para poder instalar {datos}\n# install.packages(\"remotes\")\n# remotes::install_github(\"cienciadedatos/datos\")\n\nlibrary(datos)       # datos\nlibrary(highcharter) # gráficos\nlibrary(ggplot2)     # más gráficos  \nlibrary(dplyr)       # manipulación de datos\nlibrary(tidyr)       # más manipulación de datos\n\n\nCambiando configuración para el español.\n\n\nCode\nnewlang_opts &lt;- getOption(\"highcharter.lang\")\n\nf &lt;- Sys.Date()\ndias &lt;- weekdays((f - lubridate::days(lubridate::wday(f) - 1)) + lubridate::days(0:6))\n\nnewlang_opts$weekdays &lt;- dias\nnewlang_opts$months &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = FALSE))\nnewlang_opts$shortMonths &lt;- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))\nnewlang_opts$thousandsSep &lt;- \",\"\n\noptions(highcharter.lang = newlang_opts)"
  }
]